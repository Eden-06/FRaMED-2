// automatically generated by Xtext
grammar org.framed.iorm.editpolicydsl.Dsl with org.eclipse.xtext.common.Terminals


import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/GenModel" as genmodel

import "http://framed/editpolicymodel" 
import "http://iorm/1.0"  as iorm
import "http://iorm.featuremodel/1.0" as featuremodel


Model returns Model:
	(policies+=Policy (policies+=Policy)*)?;
	
Policy returns Policy:
	override?='override' action=ActionEnum /*actionType=ActionTypeEnum*/
	'{'
		featureRule=FeatureExpression '=>' constraintRule=ConstraintExpression 
	'}';
	
enum ActionEnum returns ActionEnum:
	Add | Reconnect | Create | Start;

enum ActionTypeEnum returns iorm::Type:
	Acyclic | CompartmentType | Cyclic | DataType | Fulfillment | Inheritance | 
	Group | Reflexive | Relationship | RelationshipExclusion | RelationshipImplication | 
	RoleType | RoleEquivalence | RoleGroup | RoleImplication | RoleProhibition|
	Irreflexive;

enum FeatureNameEnum returns featuremodel::FeatureName:
	Compartment_Behavior | Compartment_Inheritance | Compartment_Properties | Compartment_Structure | 
	Compartment_Types | Contains_Compartments | Compartments |
	Data_Type_Inheritance | Data_Types | Dates | Dependent |
	Group_Constraints | Inter_Relationship_Constraints | Intra_Relationship_Constraints | 
	Naturals | Occurrence_Constraints | On_Compartments | On_Relationships | 
	Parthood_Constraints | Participants | Playable | Playable_by_Defining_Compartment | Players |
	Relationship_Cardinality | Relationship_Constraints | Relationships | RML_Feature_Model | 
	Role_Behavior | Role_Constraints | Role_Equivalence | Role_Implication | Role_Inheritance | 
	Role_Prohibition | Role_Properties | Role_Structure | Role_Types | Roles;

ConstraintRule returns ConstraintRule:
	StepInRule | TrueConstraintRule;

FeatureRule returns FeatureRule:
	IsFeature | TrueFeatureRule;	

IsFeature returns IsFeature:
	'isFeature'; //featureName=FeatureNameEnum;
	
TrueFeatureRule returns TrueFeatureRule:
	{TrueFeatureRule}
	'true';

TrueConstraintRule returns TrueConstraintRule:
	{TrueConstraintRule}
	'true';		
	
EString returns ecore::EString:
	STRING|ID;

StepInRule returns ConstraintRule:
	{IsStepIn} 'stepIn';



//expression support for Features
FeatureExpression returns FeatureRule:
	OrFeature;

ImplicationFeature returns FeatureRule:
	OrFeature ({ImplicationFeatureRule.leftRule=current} '=>' rightRule=OrFeature)?;

OrFeature returns FeatureRule: 
	AndFeature ({OrFeatureRule.rules+=current} '||' rules+=AndFeature)*;

AndFeature returns FeatureRule:
	NotFeatureExpression ({AndFeatureRule.rules+=current} '&&' rules+=NotFeatureExpression)*;

NotFeatureExpression returns FeatureRule:
	PrimaryFeature | '!' {NotFeatureRule} rule=PrimaryFeature;
  
PrimaryFeature returns FeatureRule:
	FeatureRule | '(' FeatureExpression ')';
	
	
//expression support for Constraints
ConstraintExpression returns ConstraintRule:
	ImplicationConstraint;

ImplicationConstraint returns ConstraintRule:
	OrConstraint ({ImplicationConstraintRule.leftRule=current} '=>' rightRule=OrConstraint)?;

OrConstraint returns ConstraintRule:
	AndConstraint ({OrConstraintRule.rules+=current} '||' rules+=AndConstraint)*;

AndConstraint returns ConstraintRule:
	NotConstraintExpression ({AndConstraintRule.rules+=current} '&&' rules+=NotConstraintExpression)*;

NotConstraintExpression returns ConstraintRule:
	PrimaryConstraint | '!' {NotConstraintRule} rule=PrimaryConstraint;
  
PrimaryConstraint returns ConstraintRule:
	ConstraintRule | '(' ConstraintExpression ')';
	