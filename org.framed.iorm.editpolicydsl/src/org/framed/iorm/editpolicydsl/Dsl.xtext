// automatically generated by Xtext
grammar org.framed.iorm.editpolicydsl.Dsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/GenModel" as genmodel
import "http://framed/editpolicymodel" 
//import "http://iorm/1.0"  as iorm
//import "http://iorm.featuremodel/1.0" as featuremodel

Model returns Model:
	(policies+=Policy (policies+=Policy)*)?;
	
Policy returns Policy:
	(override?='override')? action=ActionEnum actionType=FeatureTypeEnum
	'(' featureRule=FeatureExpression ')' 'when' constraintRule=ConstraintExpression ';';
	
enum ActionEnum returns ActionEnum:
	Add | Reconnect | Create | Start | Execute | Direct_Edit | Add_Property | Create_Attribute | Create_Operation | Create_Property; 

enum FeatureTypeEnum returns TypeEnum:
	Acyclic | CompartmentType | Cyclic | DataType | Fulfillment | Inheritance | 
	Group | Reflexive | Relationship | RelationshipExclusion | RelationshipImplication | 
	RoleType | RoleEquivalence | RoleGroup | RoleImplication | RoleProhibition|
	Irreflexive | NaturalType;

enum FeatureNameEnum:
	Compartment_Behavior | Compartment_Inheritance | Compartment_Properties | Compartment_Structure | 
	Compartment_Types | Contains_Compartments | Compartments |
	Data_Type_Inheritance | Data_Types | Dates | Dependent |
	Group_Constraints | Inter_Relationship_Constraints | Intra_Relationship_Constraints | 
	Naturals | Occurrence_Constraints | On_Compartments | On_Relationships | 
	Parthood_Constraints | Participants | Playable | Playable_by_Defining_Compartment | Players |
	Relationship_Cardinality | Relationship_Constraints | Relationships | RML_Feature_Model | 
	Role_Behavior | Role_Constraints | Role_Equivalence | Role_Implication | Role_Inheritance | 
	Role_Prohibition | Role_Properties | Role_Structure | Role_Types | Roles;

// ----------------- Constraint Rules ------------------------------//
ConstraintRule returns ConstraintRule:
	TrueConstraintRule | FalseConstraintRule | ContainsCompartmentConstrainRule | IsTargetConstraintRule |
	IsTargetTypeConstraintRule | IsSourceTypeConstraintRule | IsParentConstraintRule | 
	SourceEqualsTargetConstraintRule | SourceEqualsTargetTypeConstraintRule | InCompartmentConstraintRule;

ContainsCompartmentConstrainRule returns ContainsCompartment:
	{ContainsCompartment} 'ContainsCompartment' '(' ')';
	
IsTargetTypeConstraintRule returns IsTargetType:
	{IsTargetType} 'IsTargetType' '(' type=FeatureTypeEnum ')';

IsParentConstraintRule returns IsParent:
	{IsParent} 'IsParent' '(' type=FeatureTypeEnum ')';
	
IsSourceTypeConstraintRule returns IsSourceType:
	{IsSourceType} 'IsSourceType' '(' type=FeatureTypeEnum ')';
	
IsTargetConstraintRule returns IsTarget:
	{IsTarget} 'IsTarget' '(' type=FeatureTypeEnum ')';
	
InCompartmentConstraintRule returns InCompartment:
	{InCompartment} 'InCompartment' '(' ')';	

SourceEqualsTargetConstraintRule returns SourceEqualsTarget:
	{SourceEqualsTarget} 'SourceEqualsTarget' '(' ')';

SourceEqualsTargetTypeConstraintRule returns SourceEqualsTargetType:
	{SourceEqualsTargetType} 'SourceEqualsTargetType' '(' ')';

// ----------------- Feature Rules ------------------------------//
FeatureRule returns FeatureRule:
	IsFeature | TrueFeatureRule | FalseFeatureRule;	

IsFeature returns IsFeature:
	{IsFeature}
	featureName=FeatureNameEnum;
	
// ----------------- Logical Rules ------------------------------//
	
TrueFeatureRule returns TrueFeatureRule:
	{TrueFeatureRule}
	'true';

TrueConstraintRule returns TrueConstraintRule:
	{TrueConstraintRule}
	'true';		
	
FalseFeatureRule returns FalseFeatureRule:
	{FalseFeatureRule}
	'false';

FalseConstraintRule returns FalseConstraintRule:
	{FalseConstraintRule}
	'false';		
	
EString returns ecore::EString:
	STRING|ID;

//expression support for Features
FeatureExpression returns FeatureRule:
	OrFeature;

ImplicationFeature returns FeatureRule:
	OrFeature ({ImplicationFeatureRule.leftRule=current} '=>' rightRule=OrFeature)?;

OrFeature returns FeatureRule: 
	AndFeature ({OrFeatureRule.rules+=current} 'or' rules+=AndFeature)*;

AndFeature returns FeatureRule:
	NotFeatureExpression ({AndFeatureRule.rules+=current} 'and' rules+=NotFeatureExpression)*;

NotFeatureExpression returns FeatureRule:
	PrimaryFeature | '!' {NotFeatureRule} rule=PrimaryFeature;
  
PrimaryFeature returns FeatureRule:
	FeatureRule | '(' FeatureExpression ')';
	
//expression support for Constraints
ConstraintExpression returns ConstraintRule:
	ImplicationConstraint;

ImplicationConstraint returns ConstraintRule:
	OrConstraint ({ImplicationConstraintRule.leftRule=current} '=>' rightRule=OrConstraint)?;

OrConstraint returns ConstraintRule:
	AndConstraint ({OrConstraintRule.rules+=current} 'or' rules+=AndConstraint)*;

AndConstraint returns ConstraintRule:
	NotConstraintExpression ({AndConstraintRule.rules+=current} 'and' rules+=NotConstraintExpression)*;

NotConstraintExpression returns ConstraintRule:
	PrimaryConstraint | '!' {NotConstraintRule} rule=PrimaryConstraint;
  
PrimaryConstraint returns ConstraintRule:
	ConstraintRule | '(' ConstraintExpression ')';
	