/*
 * generated by Xtext 2.13.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.framed.iorm.editpolicydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.framed.iorm.editpolicydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.framed.iorm.editpolicydsl.services.DslGrammarAccess;

}

@parser::members {

 	private DslGrammarAccess grammarAccess;

    public InternalDslParser(TokenStream input, DslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected DslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getPoliciesPolicyParserRuleCall_0_0());
				}
				lv_policies_0_0=rulePolicy
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"policies",
						lv_policies_0_0,
						"org.framed.iorm.editpolicydsl.Dsl.Policy");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getPoliciesPolicyParserRuleCall_1_0());
				}
				lv_policies_1_0=rulePolicy
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"policies",
						lv_policies_1_0,
						"org.framed.iorm.editpolicydsl.Dsl.Policy");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)?
;

// Entry rule entryRulePolicy
entryRulePolicy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPolicyRule()); }
	iv_rulePolicy=rulePolicy
	{ $current=$iv_rulePolicy.current; }
	EOF;

// Rule Policy
rulePolicy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_override_0_0='override'
				{
					newLeafNode(lv_override_0_0, grammarAccess.getPolicyAccess().getOverrideOverrideKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPolicyRule());
					}
					setWithLastConsumed($current, "override", true, "override");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPolicyAccess().getActionActionEnumEnumRuleCall_1_0());
				}
				lv_action_1_0=ruleActionEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolicyRule());
					}
					set(
						$current,
						"action",
						lv_action_1_0,
						"org.framed.iorm.editpolicydsl.Dsl.ActionEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPolicyAccess().getActionTypeActionTypeEnumEnumRuleCall_2_0());
				}
				lv_actionType_2_0=ruleActionTypeEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolicyRule());
					}
					set(
						$current,
						"actionType",
						lv_actionType_2_0,
						"org.framed.iorm.editpolicydsl.Dsl.ActionTypeEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getPolicyAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPolicyAccess().getFeatureRuleFeatureExpressionParserRuleCall_4_0());
				}
				lv_featureRule_4_0=ruleFeatureExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolicyRule());
					}
					set(
						$current,
						"featureRule",
						lv_featureRule_4_0,
						"org.framed.iorm.editpolicydsl.Dsl.FeatureExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='=>'
		{
			newLeafNode(otherlv_5, grammarAccess.getPolicyAccess().getEqualsSignGreaterThanSignKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPolicyAccess().getConstraintRuleConstraintExpressionParserRuleCall_6_0());
				}
				lv_constraintRule_6_0=ruleConstraintExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolicyRule());
					}
					set(
						$current,
						"constraintRule",
						lv_constraintRule_6_0,
						"org.framed.iorm.editpolicydsl.Dsl.ConstraintExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getPolicyAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleConstraintRule
entryRuleConstraintRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintRuleRule()); }
	iv_ruleConstraintRule=ruleConstraintRule
	{ $current=$iv_ruleConstraintRule.current; }
	EOF;

// Rule ConstraintRule
ruleConstraintRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConstraintRuleAccess().getStepInRuleParserRuleCall_0());
		}
		this_StepInRule_0=ruleStepInRule
		{
			$current = $this_StepInRule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstraintRuleAccess().getTrueRuleParserRuleCall_1());
		}
		this_TrueRule_1=ruleTrueRule
		{
			$current = $this_TrueRule_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFeatureRule
entryRuleFeatureRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRuleRule()); }
	iv_ruleFeatureRule=ruleFeatureRule
	{ $current=$iv_ruleFeatureRule.current; }
	EOF;

// Rule FeatureRule
ruleFeatureRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFeatureRuleAccess().getIsFeatureRuleParserRuleCall_0());
		}
		this_IsFeatureRule_0=ruleIsFeatureRule
		{
			$current = $this_IsFeatureRule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFeatureRuleAccess().getTrueRuleParserRuleCall_1());
		}
		this_TrueRule_1=ruleTrueRule
		{
			$current = $this_TrueRule_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIsFeatureRule
entryRuleIsFeatureRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsFeatureRuleRule()); }
	iv_ruleIsFeatureRule=ruleIsFeatureRule
	{ $current=$iv_ruleIsFeatureRule.current; }
	EOF;

// Rule IsFeatureRule
ruleIsFeatureRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIsFeatureRuleAccess().getRuleAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIsFeatureRuleAccess().getRuleIsFeatureParserRuleCall_1_0());
				}
				lv_rule_1_0=ruleIsFeature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIsFeatureRuleRule());
					}
					set(
						$current,
						"rule",
						lv_rule_1_0,
						"org.framed.iorm.editpolicydsl.Dsl.IsFeature");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIsFeature
entryRuleIsFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsFeatureRule()); }
	iv_ruleIsFeature=ruleIsFeature
	{ $current=$iv_ruleIsFeature.current; }
	EOF;

// Rule IsFeature
ruleIsFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIsFeatureAccess().getIsFeatureAction_0(),
					$current);
			}
		)
		otherlv_1='isFeature'
		{
			newLeafNode(otherlv_1, grammarAccess.getIsFeatureAccess().getIsFeatureKeyword_1());
		}
	)
;

// Entry rule entryRuleStepInRule
entryRuleStepInRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStepInRuleRule()); }
	iv_ruleStepInRule=ruleStepInRule
	{ $current=$iv_ruleStepInRule.current; }
	EOF;

// Rule StepInRule
ruleStepInRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStepInRuleAccess().getRuleAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStepInRuleAccess().getRuleStepInParserRuleCall_1_0());
				}
				lv_rule_1_0=ruleStepIn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStepInRuleRule());
					}
					set(
						$current,
						"rule",
						lv_rule_1_0,
						"org.framed.iorm.editpolicydsl.Dsl.StepIn");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStepIn
entryRuleStepIn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStepInRule()); }
	iv_ruleStepIn=ruleStepIn
	{ $current=$iv_ruleStepIn.current; }
	EOF;

// Rule StepIn
ruleStepIn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStepInAccess().getIsStepInAction_0(),
					$current);
			}
		)
		otherlv_1='StepIn'
		{
			newLeafNode(otherlv_1, grammarAccess.getStepInAccess().getStepInKeyword_1());
		}
	)
;

// Entry rule entryRuleTrueRule
entryRuleTrueRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTrueRuleRule()); }
	iv_ruleTrueRule=ruleTrueRule
	{ $current=$iv_ruleTrueRule.current; }
	EOF;

// Rule TrueRule
ruleTrueRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTrueRuleAccess().getTrueRuleAction_0(),
					$current);
			}
		)
		otherlv_1='true'
		{
			newLeafNode(otherlv_1, grammarAccess.getTrueRuleAccess().getTrueKeyword_1());
		}
	)
;

// Entry rule entryRuleFeatureExpression
entryRuleFeatureExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureExpressionRule()); }
	iv_ruleFeatureExpression=ruleFeatureExpression
	{ $current=$iv_ruleFeatureExpression.current; }
	EOF;

// Rule FeatureExpression
ruleFeatureExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getFeatureExpressionAccess().getOrFeatureParserRuleCall());
	}
	this_OrFeature_0=ruleOrFeature
	{
		$current = $this_OrFeature_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOrFeature
entryRuleOrFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrFeatureRule()); }
	iv_ruleOrFeature=ruleOrFeature
	{ $current=$iv_ruleOrFeature.current; }
	EOF;

// Rule OrFeature
ruleOrFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrFeatureAccess().getAndFeatureParserRuleCall_0());
		}
		this_AndFeature_0=ruleAndFeature
		{
			$current = $this_AndFeature_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getOrFeatureAccess().getOrRuleRulesAction_1_0(),
						$current);
				}
			)
			otherlv_2='||'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrFeatureAccess().getVerticalLineVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrFeatureAccess().getRulesAndFeatureParserRuleCall_1_2_0());
					}
					lv_rules_3_0=ruleAndFeature
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrFeatureRule());
						}
						add(
							$current,
							"rules",
							lv_rules_3_0,
							"org.framed.iorm.editpolicydsl.Dsl.AndFeature");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndFeature
entryRuleAndFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndFeatureRule()); }
	iv_ruleAndFeature=ruleAndFeature
	{ $current=$iv_ruleAndFeature.current; }
	EOF;

// Rule AndFeature
ruleAndFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndFeatureAccess().getNotFeatureExpressionParserRuleCall_0());
		}
		this_NotFeatureExpression_0=ruleNotFeatureExpression
		{
			$current = $this_NotFeatureExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getAndFeatureAccess().getAndRuleRulesAction_1_0(),
						$current);
				}
			)
			otherlv_2='&&'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndFeatureAccess().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndFeatureAccess().getRulesNotFeatureExpressionParserRuleCall_1_2_0());
					}
					lv_rules_3_0=ruleNotFeatureExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndFeatureRule());
						}
						add(
							$current,
							"rules",
							lv_rules_3_0,
							"org.framed.iorm.editpolicydsl.Dsl.NotFeatureExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNotFeatureExpression
entryRuleNotFeatureExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotFeatureExpressionRule()); }
	iv_ruleNotFeatureExpression=ruleNotFeatureExpression
	{ $current=$iv_ruleNotFeatureExpression.current; }
	EOF;

// Rule NotFeatureExpression
ruleNotFeatureExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNotFeatureExpressionAccess().getPrimaryFeatureParserRuleCall_0());
		}
		this_PrimaryFeature_0=rulePrimaryFeature
		{
			$current = $this_PrimaryFeature_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='!'
			{
				newLeafNode(otherlv_1, grammarAccess.getNotFeatureExpressionAccess().getExclamationMarkKeyword_1_0());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getNotFeatureExpressionAccess().getNotRuleAction_1_1(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNotFeatureExpressionAccess().getRulePrimaryFeatureParserRuleCall_1_2_0());
					}
					lv_rule_3_0=rulePrimaryFeature
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNotFeatureExpressionRule());
						}
						set(
							$current,
							"rule",
							lv_rule_3_0,
							"org.framed.iorm.editpolicydsl.Dsl.PrimaryFeature");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulePrimaryFeature
entryRulePrimaryFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryFeatureRule()); }
	iv_rulePrimaryFeature=rulePrimaryFeature
	{ $current=$iv_rulePrimaryFeature.current; }
	EOF;

// Rule PrimaryFeature
rulePrimaryFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryFeatureAccess().getFeatureRuleParserRuleCall_0());
		}
		this_FeatureRule_0=ruleFeatureRule
		{
			$current = $this_FeatureRule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimaryFeatureAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryFeatureAccess().getFeatureExpressionParserRuleCall_1_1());
			}
			this_FeatureExpression_2=ruleFeatureExpression
			{
				$current = $this_FeatureExpression_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryFeatureAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleConstraintExpression
entryRuleConstraintExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintExpressionRule()); }
	iv_ruleConstraintExpression=ruleConstraintExpression
	{ $current=$iv_ruleConstraintExpression.current; }
	EOF;

// Rule ConstraintExpression
ruleConstraintExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getConstraintExpressionAccess().getImplicationConstraintParserRuleCall());
	}
	this_ImplicationConstraint_0=ruleImplicationConstraint
	{
		$current = $this_ImplicationConstraint_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleImplicationConstraint
entryRuleImplicationConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImplicationConstraintRule()); }
	iv_ruleImplicationConstraint=ruleImplicationConstraint
	{ $current=$iv_ruleImplicationConstraint.current; }
	EOF;

// Rule ImplicationConstraint
ruleImplicationConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getImplicationConstraintAccess().getOrConstraintParserRuleCall_0());
		}
		this_OrConstraint_0=ruleOrConstraint
		{
			$current = $this_OrConstraint_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getImplicationConstraintAccess().getImplicationRuleLeftRuleAction_1_0(),
						$current);
				}
			)
			otherlv_2='=>'
			{
				newLeafNode(otherlv_2, grammarAccess.getImplicationConstraintAccess().getEqualsSignGreaterThanSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getImplicationConstraintAccess().getRightRuleOrConstraintParserRuleCall_1_2_0());
					}
					lv_rightRule_3_0=ruleOrConstraint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImplicationConstraintRule());
						}
						set(
							$current,
							"rightRule",
							lv_rightRule_3_0,
							"org.framed.iorm.editpolicydsl.Dsl.OrConstraint");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleOrConstraint
entryRuleOrConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrConstraintRule()); }
	iv_ruleOrConstraint=ruleOrConstraint
	{ $current=$iv_ruleOrConstraint.current; }
	EOF;

// Rule OrConstraint
ruleOrConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrConstraintAccess().getAndConstraintParserRuleCall_0());
		}
		this_AndConstraint_0=ruleAndConstraint
		{
			$current = $this_AndConstraint_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getOrConstraintAccess().getOrRuleRulesAction_1_0(),
						$current);
				}
			)
			otherlv_2='||'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrConstraintAccess().getVerticalLineVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrConstraintAccess().getRulesAndConstraintParserRuleCall_1_2_0());
					}
					lv_rules_3_0=ruleAndConstraint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrConstraintRule());
						}
						add(
							$current,
							"rules",
							lv_rules_3_0,
							"org.framed.iorm.editpolicydsl.Dsl.AndConstraint");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndConstraint
entryRuleAndConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndConstraintRule()); }
	iv_ruleAndConstraint=ruleAndConstraint
	{ $current=$iv_ruleAndConstraint.current; }
	EOF;

// Rule AndConstraint
ruleAndConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndConstraintAccess().getNotConstraintExpressionParserRuleCall_0());
		}
		this_NotConstraintExpression_0=ruleNotConstraintExpression
		{
			$current = $this_NotConstraintExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getAndConstraintAccess().getAndRuleRulesAction_1_0(),
						$current);
				}
			)
			otherlv_2='&&'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndConstraintAccess().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndConstraintAccess().getRulesNotConstraintExpressionParserRuleCall_1_2_0());
					}
					lv_rules_3_0=ruleNotConstraintExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndConstraintRule());
						}
						add(
							$current,
							"rules",
							lv_rules_3_0,
							"org.framed.iorm.editpolicydsl.Dsl.NotConstraintExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNotConstraintExpression
entryRuleNotConstraintExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotConstraintExpressionRule()); }
	iv_ruleNotConstraintExpression=ruleNotConstraintExpression
	{ $current=$iv_ruleNotConstraintExpression.current; }
	EOF;

// Rule NotConstraintExpression
ruleNotConstraintExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNotConstraintExpressionAccess().getPrimaryConstraintParserRuleCall_0());
		}
		this_PrimaryConstraint_0=rulePrimaryConstraint
		{
			$current = $this_PrimaryConstraint_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='!'
			{
				newLeafNode(otherlv_1, grammarAccess.getNotConstraintExpressionAccess().getExclamationMarkKeyword_1_0());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getNotConstraintExpressionAccess().getNotRuleAction_1_1(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNotConstraintExpressionAccess().getRulePrimaryConstraintParserRuleCall_1_2_0());
					}
					lv_rule_3_0=rulePrimaryConstraint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNotConstraintExpressionRule());
						}
						set(
							$current,
							"rule",
							lv_rule_3_0,
							"org.framed.iorm.editpolicydsl.Dsl.PrimaryConstraint");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulePrimaryConstraint
entryRulePrimaryConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryConstraintRule()); }
	iv_rulePrimaryConstraint=rulePrimaryConstraint
	{ $current=$iv_rulePrimaryConstraint.current; }
	EOF;

// Rule PrimaryConstraint
rulePrimaryConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryConstraintAccess().getConstraintRuleParserRuleCall_0());
		}
		this_ConstraintRule_0=ruleConstraintRule
		{
			$current = $this_ConstraintRule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimaryConstraintAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryConstraintAccess().getConstraintExpressionParserRuleCall_1_1());
			}
			this_ConstraintExpression_2=ruleConstraintExpression
			{
				$current = $this_ConstraintExpression_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryConstraintAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Rule ActionEnum
ruleActionEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Add'
			{
				$current = grammarAccess.getActionEnumAccess().getAddEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getActionEnumAccess().getAddEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Reconnect'
			{
				$current = grammarAccess.getActionEnumAccess().getReconnectEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getActionEnumAccess().getReconnectEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Create'
			{
				$current = grammarAccess.getActionEnumAccess().getCreateEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getActionEnumAccess().getCreateEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Start'
			{
				$current = grammarAccess.getActionEnumAccess().getStartEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getActionEnumAccess().getStartEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule ActionTypeEnum
ruleActionTypeEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Acyclic'
			{
				$current = grammarAccess.getActionTypeEnumAccess().getAcyclicEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getActionTypeEnumAccess().getAcyclicEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='CompartmentType'
			{
				$current = grammarAccess.getActionTypeEnumAccess().getCompartmentTypeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getActionTypeEnumAccess().getCompartmentTypeEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Cyclic'
			{
				$current = grammarAccess.getActionTypeEnumAccess().getCyclicEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getActionTypeEnumAccess().getCyclicEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='DataType'
			{
				$current = grammarAccess.getActionTypeEnumAccess().getDataTypeEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getActionTypeEnumAccess().getDataTypeEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Fulfillment'
			{
				$current = grammarAccess.getActionTypeEnumAccess().getFulfillmentEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getActionTypeEnumAccess().getFulfillmentEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='Inheritance'
			{
				$current = grammarAccess.getActionTypeEnumAccess().getInheritanceEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getActionTypeEnumAccess().getInheritanceEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='Group'
			{
				$current = grammarAccess.getActionTypeEnumAccess().getGroupEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getActionTypeEnumAccess().getGroupEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='Reflexive'
			{
				$current = grammarAccess.getActionTypeEnumAccess().getReflexiveEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getActionTypeEnumAccess().getReflexiveEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='Relationship'
			{
				$current = grammarAccess.getActionTypeEnumAccess().getRelationshipEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getActionTypeEnumAccess().getRelationshipEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='RelationshipExclusion'
			{
				$current = grammarAccess.getActionTypeEnumAccess().getRelationshipExclusionEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getActionTypeEnumAccess().getRelationshipExclusionEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='RelationshipImplication'
			{
				$current = grammarAccess.getActionTypeEnumAccess().getRelationshipImplicationEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getActionTypeEnumAccess().getRelationshipImplicationEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='RoleType'
			{
				$current = grammarAccess.getActionTypeEnumAccess().getRoleTypeEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getActionTypeEnumAccess().getRoleTypeEnumLiteralDeclaration_11());
			}
		)
		    |
		(
			enumLiteral_12='RoleEquivalence'
			{
				$current = grammarAccess.getActionTypeEnumAccess().getRoleEquivalenceEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_12, grammarAccess.getActionTypeEnumAccess().getRoleEquivalenceEnumLiteralDeclaration_12());
			}
		)
		    |
		(
			enumLiteral_13='RoleGroup'
			{
				$current = grammarAccess.getActionTypeEnumAccess().getRoleGroupEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_13, grammarAccess.getActionTypeEnumAccess().getRoleGroupEnumLiteralDeclaration_13());
			}
		)
		    |
		(
			enumLiteral_14='RoleImplication'
			{
				$current = grammarAccess.getActionTypeEnumAccess().getRoleImplicationEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_14, grammarAccess.getActionTypeEnumAccess().getRoleImplicationEnumLiteralDeclaration_14());
			}
		)
		    |
		(
			enumLiteral_15='RoleProhibition'
			{
				$current = grammarAccess.getActionTypeEnumAccess().getRoleProhibitionEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_15, grammarAccess.getActionTypeEnumAccess().getRoleProhibitionEnumLiteralDeclaration_15());
			}
		)
		    |
		(
			enumLiteral_16='Irreflexive'
			{
				$current = grammarAccess.getActionTypeEnumAccess().getIrreflexiveEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_16, grammarAccess.getActionTypeEnumAccess().getIrreflexiveEnumLiteralDeclaration_16());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
