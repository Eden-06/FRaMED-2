/*
 * generated by Xtext 2.13.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.framed.iorm.editpolicydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.framed.iorm.editpolicydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.framed.iorm.editpolicydsl.services.DslGrammarAccess;

}

@parser::members {

 	private DslGrammarAccess grammarAccess;

    public InternalDslParser(TokenStream input, DslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected DslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getPoliciesPolicyParserRuleCall_0_0());
				}
				lv_policies_0_0=rulePolicy
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"policies",
						lv_policies_0_0,
						"org.framed.iorm.editpolicydsl.Dsl.Policy");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getPoliciesPolicyParserRuleCall_1_0());
				}
				lv_policies_1_0=rulePolicy
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"policies",
						lv_policies_1_0,
						"org.framed.iorm.editpolicydsl.Dsl.Policy");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)?
;

// Entry rule entryRulePolicy
entryRulePolicy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPolicyRule()); }
	iv_rulePolicy=rulePolicy
	{ $current=$iv_rulePolicy.current; }
	EOF;

// Rule Policy
rulePolicy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_override_0_0='override'
				{
					newLeafNode(lv_override_0_0, grammarAccess.getPolicyAccess().getOverrideOverrideKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPolicyRule());
					}
					setWithLastConsumed($current, "override", true, "override");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPolicyAccess().getActionActionEnumEnumRuleCall_1_0());
				}
				lv_action_1_0=ruleActionEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolicyRule());
					}
					set(
						$current,
						"action",
						lv_action_1_0,
						"org.framed.iorm.editpolicydsl.Dsl.ActionEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPolicyAccess().getActionTypeFeatureTypeEnumEnumRuleCall_2_0());
				}
				lv_actionType_2_0=ruleFeatureTypeEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolicyRule());
					}
					set(
						$current,
						"actionType",
						lv_actionType_2_0,
						"org.framed.iorm.editpolicydsl.Dsl.FeatureTypeEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getPolicyAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPolicyAccess().getFeatureRuleFeatureExpressionParserRuleCall_4_0());
				}
				lv_featureRule_4_0=ruleFeatureExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolicyRule());
					}
					set(
						$current,
						"featureRule",
						lv_featureRule_4_0,
						"org.framed.iorm.editpolicydsl.Dsl.FeatureExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getPolicyAccess().getRightParenthesisKeyword_5());
		}
		otherlv_6='when'
		{
			newLeafNode(otherlv_6, grammarAccess.getPolicyAccess().getWhenKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPolicyAccess().getConstraintRuleConstraintExpressionParserRuleCall_7_0());
				}
				lv_constraintRule_7_0=ruleConstraintExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolicyRule());
					}
					set(
						$current,
						"constraintRule",
						lv_constraintRule_7_0,
						"org.framed.iorm.editpolicydsl.Dsl.ConstraintExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8=';'
		{
			newLeafNode(otherlv_8, grammarAccess.getPolicyAccess().getSemicolonKeyword_8());
		}
	)
;

// Entry rule entryRuleConstraintRule
entryRuleConstraintRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintRuleRule()); }
	iv_ruleConstraintRule=ruleConstraintRule
	{ $current=$iv_ruleConstraintRule.current; }
	EOF;

// Rule ConstraintRule
ruleConstraintRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConstraintRuleAccess().getTrueConstraintRuleParserRuleCall_0());
		}
		this_TrueConstraintRule_0=ruleTrueConstraintRule
		{
			$current = $this_TrueConstraintRule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstraintRuleAccess().getFalseConstraintRuleParserRuleCall_1());
		}
		this_FalseConstraintRule_1=ruleFalseConstraintRule
		{
			$current = $this_FalseConstraintRule_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstraintRuleAccess().getContainsCompartmentConstrainRuleParserRuleCall_2());
		}
		this_ContainsCompartmentConstrainRule_2=ruleContainsCompartmentConstrainRule
		{
			$current = $this_ContainsCompartmentConstrainRule_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstraintRuleAccess().getIsTargetConstraintRuleParserRuleCall_3());
		}
		this_IsTargetConstraintRule_3=ruleIsTargetConstraintRule
		{
			$current = $this_IsTargetConstraintRule_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstraintRuleAccess().getIsTargetTypeConstraintRuleParserRuleCall_4());
		}
		this_IsTargetTypeConstraintRule_4=ruleIsTargetTypeConstraintRule
		{
			$current = $this_IsTargetTypeConstraintRule_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstraintRuleAccess().getIsSourceTypeConstraintRuleParserRuleCall_5());
		}
		this_IsSourceTypeConstraintRule_5=ruleIsSourceTypeConstraintRule
		{
			$current = $this_IsSourceTypeConstraintRule_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstraintRuleAccess().getIsParentConstraintRuleParserRuleCall_6());
		}
		this_IsParentConstraintRule_6=ruleIsParentConstraintRule
		{
			$current = $this_IsParentConstraintRule_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstraintRuleAccess().getSourceEqualsTargetConstraintRuleParserRuleCall_7());
		}
		this_SourceEqualsTargetConstraintRule_7=ruleSourceEqualsTargetConstraintRule
		{
			$current = $this_SourceEqualsTargetConstraintRule_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstraintRuleAccess().getSourceEqualsTargetTypeConstraintRuleParserRuleCall_8());
		}
		this_SourceEqualsTargetTypeConstraintRule_8=ruleSourceEqualsTargetTypeConstraintRule
		{
			$current = $this_SourceEqualsTargetTypeConstraintRule_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstraintRuleAccess().getInCompartmentConstraintRuleParserRuleCall_9());
		}
		this_InCompartmentConstraintRule_9=ruleInCompartmentConstraintRule
		{
			$current = $this_InCompartmentConstraintRule_9.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleContainsCompartmentConstrainRule
entryRuleContainsCompartmentConstrainRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainsCompartmentConstrainRuleRule()); }
	iv_ruleContainsCompartmentConstrainRule=ruleContainsCompartmentConstrainRule
	{ $current=$iv_ruleContainsCompartmentConstrainRule.current; }
	EOF;

// Rule ContainsCompartmentConstrainRule
ruleContainsCompartmentConstrainRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getContainsCompartmentConstrainRuleAccess().getContainsCompartmentAction_0(),
					$current);
			}
		)
		otherlv_1='ContainsCompartment'
		{
			newLeafNode(otherlv_1, grammarAccess.getContainsCompartmentConstrainRuleAccess().getContainsCompartmentKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getContainsCompartmentConstrainRuleAccess().getLeftParenthesisKeyword_2());
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getContainsCompartmentConstrainRuleAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleIsTargetTypeConstraintRule
entryRuleIsTargetTypeConstraintRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsTargetTypeConstraintRuleRule()); }
	iv_ruleIsTargetTypeConstraintRule=ruleIsTargetTypeConstraintRule
	{ $current=$iv_ruleIsTargetTypeConstraintRule.current; }
	EOF;

// Rule IsTargetTypeConstraintRule
ruleIsTargetTypeConstraintRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIsTargetTypeConstraintRuleAccess().getIsTargetTypeAction_0(),
					$current);
			}
		)
		otherlv_1='IsTargetType'
		{
			newLeafNode(otherlv_1, grammarAccess.getIsTargetTypeConstraintRuleAccess().getIsTargetTypeKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getIsTargetTypeConstraintRuleAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIsTargetTypeConstraintRuleAccess().getTypeFeatureTypeEnumEnumRuleCall_3_0());
				}
				lv_type_3_0=ruleFeatureTypeEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIsTargetTypeConstraintRuleRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"org.framed.iorm.editpolicydsl.Dsl.FeatureTypeEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getIsTargetTypeConstraintRuleAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleIsParentConstraintRule
entryRuleIsParentConstraintRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsParentConstraintRuleRule()); }
	iv_ruleIsParentConstraintRule=ruleIsParentConstraintRule
	{ $current=$iv_ruleIsParentConstraintRule.current; }
	EOF;

// Rule IsParentConstraintRule
ruleIsParentConstraintRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIsParentConstraintRuleAccess().getIsParentAction_0(),
					$current);
			}
		)
		otherlv_1='IsParent'
		{
			newLeafNode(otherlv_1, grammarAccess.getIsParentConstraintRuleAccess().getIsParentKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getIsParentConstraintRuleAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIsParentConstraintRuleAccess().getTypeFeatureTypeEnumEnumRuleCall_3_0());
				}
				lv_type_3_0=ruleFeatureTypeEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIsParentConstraintRuleRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"org.framed.iorm.editpolicydsl.Dsl.FeatureTypeEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getIsParentConstraintRuleAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleIsSourceTypeConstraintRule
entryRuleIsSourceTypeConstraintRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsSourceTypeConstraintRuleRule()); }
	iv_ruleIsSourceTypeConstraintRule=ruleIsSourceTypeConstraintRule
	{ $current=$iv_ruleIsSourceTypeConstraintRule.current; }
	EOF;

// Rule IsSourceTypeConstraintRule
ruleIsSourceTypeConstraintRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIsSourceTypeConstraintRuleAccess().getIsSourceTypeAction_0(),
					$current);
			}
		)
		otherlv_1='IsSourceType'
		{
			newLeafNode(otherlv_1, grammarAccess.getIsSourceTypeConstraintRuleAccess().getIsSourceTypeKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getIsSourceTypeConstraintRuleAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIsSourceTypeConstraintRuleAccess().getTypeFeatureTypeEnumEnumRuleCall_3_0());
				}
				lv_type_3_0=ruleFeatureTypeEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIsSourceTypeConstraintRuleRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"org.framed.iorm.editpolicydsl.Dsl.FeatureTypeEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getIsSourceTypeConstraintRuleAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleIsTargetConstraintRule
entryRuleIsTargetConstraintRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsTargetConstraintRuleRule()); }
	iv_ruleIsTargetConstraintRule=ruleIsTargetConstraintRule
	{ $current=$iv_ruleIsTargetConstraintRule.current; }
	EOF;

// Rule IsTargetConstraintRule
ruleIsTargetConstraintRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIsTargetConstraintRuleAccess().getIsTargetAction_0(),
					$current);
			}
		)
		otherlv_1='IsTarget'
		{
			newLeafNode(otherlv_1, grammarAccess.getIsTargetConstraintRuleAccess().getIsTargetKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getIsTargetConstraintRuleAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIsTargetConstraintRuleAccess().getTypeFeatureTypeEnumEnumRuleCall_3_0());
				}
				lv_type_3_0=ruleFeatureTypeEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIsTargetConstraintRuleRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"org.framed.iorm.editpolicydsl.Dsl.FeatureTypeEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getIsTargetConstraintRuleAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleInCompartmentConstraintRule
entryRuleInCompartmentConstraintRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInCompartmentConstraintRuleRule()); }
	iv_ruleInCompartmentConstraintRule=ruleInCompartmentConstraintRule
	{ $current=$iv_ruleInCompartmentConstraintRule.current; }
	EOF;

// Rule InCompartmentConstraintRule
ruleInCompartmentConstraintRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInCompartmentConstraintRuleAccess().getInCompartmentAction_0(),
					$current);
			}
		)
		otherlv_1='InCompartment'
		{
			newLeafNode(otherlv_1, grammarAccess.getInCompartmentConstraintRuleAccess().getInCompartmentKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getInCompartmentConstraintRuleAccess().getLeftParenthesisKeyword_2());
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getInCompartmentConstraintRuleAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleSourceEqualsTargetConstraintRule
entryRuleSourceEqualsTargetConstraintRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSourceEqualsTargetConstraintRuleRule()); }
	iv_ruleSourceEqualsTargetConstraintRule=ruleSourceEqualsTargetConstraintRule
	{ $current=$iv_ruleSourceEqualsTargetConstraintRule.current; }
	EOF;

// Rule SourceEqualsTargetConstraintRule
ruleSourceEqualsTargetConstraintRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSourceEqualsTargetConstraintRuleAccess().getSourceEqualsTargetAction_0(),
					$current);
			}
		)
		otherlv_1='SourceEqualsTarget'
		{
			newLeafNode(otherlv_1, grammarAccess.getSourceEqualsTargetConstraintRuleAccess().getSourceEqualsTargetKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getSourceEqualsTargetConstraintRuleAccess().getLeftParenthesisKeyword_2());
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getSourceEqualsTargetConstraintRuleAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleSourceEqualsTargetTypeConstraintRule
entryRuleSourceEqualsTargetTypeConstraintRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSourceEqualsTargetTypeConstraintRuleRule()); }
	iv_ruleSourceEqualsTargetTypeConstraintRule=ruleSourceEqualsTargetTypeConstraintRule
	{ $current=$iv_ruleSourceEqualsTargetTypeConstraintRule.current; }
	EOF;

// Rule SourceEqualsTargetTypeConstraintRule
ruleSourceEqualsTargetTypeConstraintRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSourceEqualsTargetTypeConstraintRuleAccess().getSourceEqualsTargetTypeAction_0(),
					$current);
			}
		)
		otherlv_1='SourceEqualsTargetType'
		{
			newLeafNode(otherlv_1, grammarAccess.getSourceEqualsTargetTypeConstraintRuleAccess().getSourceEqualsTargetTypeKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getSourceEqualsTargetTypeConstraintRuleAccess().getLeftParenthesisKeyword_2());
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getSourceEqualsTargetTypeConstraintRuleAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleFeatureRule
entryRuleFeatureRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRuleRule()); }
	iv_ruleFeatureRule=ruleFeatureRule
	{ $current=$iv_ruleFeatureRule.current; }
	EOF;

// Rule FeatureRule
ruleFeatureRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFeatureRuleAccess().getIsFeatureParserRuleCall_0());
		}
		this_IsFeature_0=ruleIsFeature
		{
			$current = $this_IsFeature_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFeatureRuleAccess().getTrueFeatureRuleParserRuleCall_1());
		}
		this_TrueFeatureRule_1=ruleTrueFeatureRule
		{
			$current = $this_TrueFeatureRule_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFeatureRuleAccess().getFalseFeatureRuleParserRuleCall_2());
		}
		this_FalseFeatureRule_2=ruleFalseFeatureRule
		{
			$current = $this_FalseFeatureRule_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIsFeature
entryRuleIsFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsFeatureRule()); }
	iv_ruleIsFeature=ruleIsFeature
	{ $current=$iv_ruleIsFeature.current; }
	EOF;

// Rule IsFeature
ruleIsFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIsFeatureAccess().getIsFeatureAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIsFeatureAccess().getFeatureNameFeatureNameEnumEnumRuleCall_1_0());
				}
				lv_featureName_1_0=ruleFeatureNameEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIsFeatureRule());
					}
					set(
						$current,
						"featureName",
						lv_featureName_1_0,
						"org.framed.iorm.editpolicydsl.Dsl.FeatureNameEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTrueFeatureRule
entryRuleTrueFeatureRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTrueFeatureRuleRule()); }
	iv_ruleTrueFeatureRule=ruleTrueFeatureRule
	{ $current=$iv_ruleTrueFeatureRule.current; }
	EOF;

// Rule TrueFeatureRule
ruleTrueFeatureRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTrueFeatureRuleAccess().getTrueFeatureRuleAction_0(),
					$current);
			}
		)
		otherlv_1='true'
		{
			newLeafNode(otherlv_1, grammarAccess.getTrueFeatureRuleAccess().getTrueKeyword_1());
		}
	)
;

// Entry rule entryRuleTrueConstraintRule
entryRuleTrueConstraintRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTrueConstraintRuleRule()); }
	iv_ruleTrueConstraintRule=ruleTrueConstraintRule
	{ $current=$iv_ruleTrueConstraintRule.current; }
	EOF;

// Rule TrueConstraintRule
ruleTrueConstraintRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTrueConstraintRuleAccess().getTrueConstraintRuleAction_0(),
					$current);
			}
		)
		otherlv_1='true'
		{
			newLeafNode(otherlv_1, grammarAccess.getTrueConstraintRuleAccess().getTrueKeyword_1());
		}
	)
;

// Entry rule entryRuleFalseFeatureRule
entryRuleFalseFeatureRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFalseFeatureRuleRule()); }
	iv_ruleFalseFeatureRule=ruleFalseFeatureRule
	{ $current=$iv_ruleFalseFeatureRule.current; }
	EOF;

// Rule FalseFeatureRule
ruleFalseFeatureRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFalseFeatureRuleAccess().getFalseFeatureRuleAction_0(),
					$current);
			}
		)
		otherlv_1='false'
		{
			newLeafNode(otherlv_1, grammarAccess.getFalseFeatureRuleAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleFalseConstraintRule
entryRuleFalseConstraintRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFalseConstraintRuleRule()); }
	iv_ruleFalseConstraintRule=ruleFalseConstraintRule
	{ $current=$iv_ruleFalseConstraintRule.current; }
	EOF;

// Rule FalseConstraintRule
ruleFalseConstraintRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFalseConstraintRuleAccess().getFalseConstraintRuleAction_0(),
					$current);
			}
		)
		otherlv_1='false'
		{
			newLeafNode(otherlv_1, grammarAccess.getFalseConstraintRuleAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleFeatureExpression
entryRuleFeatureExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureExpressionRule()); }
	iv_ruleFeatureExpression=ruleFeatureExpression
	{ $current=$iv_ruleFeatureExpression.current; }
	EOF;

// Rule FeatureExpression
ruleFeatureExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getFeatureExpressionAccess().getOrFeatureParserRuleCall());
	}
	this_OrFeature_0=ruleOrFeature
	{
		$current = $this_OrFeature_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOrFeature
entryRuleOrFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrFeatureRule()); }
	iv_ruleOrFeature=ruleOrFeature
	{ $current=$iv_ruleOrFeature.current; }
	EOF;

// Rule OrFeature
ruleOrFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrFeatureAccess().getAndFeatureParserRuleCall_0());
		}
		this_AndFeature_0=ruleAndFeature
		{
			$current = $this_AndFeature_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getOrFeatureAccess().getOrFeatureRuleRulesAction_1_0(),
						$current);
				}
			)
			otherlv_2='or'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrFeatureAccess().getOrKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrFeatureAccess().getRulesAndFeatureParserRuleCall_1_2_0());
					}
					lv_rules_3_0=ruleAndFeature
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrFeatureRule());
						}
						add(
							$current,
							"rules",
							lv_rules_3_0,
							"org.framed.iorm.editpolicydsl.Dsl.AndFeature");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndFeature
entryRuleAndFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndFeatureRule()); }
	iv_ruleAndFeature=ruleAndFeature
	{ $current=$iv_ruleAndFeature.current; }
	EOF;

// Rule AndFeature
ruleAndFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndFeatureAccess().getNotFeatureExpressionParserRuleCall_0());
		}
		this_NotFeatureExpression_0=ruleNotFeatureExpression
		{
			$current = $this_NotFeatureExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getAndFeatureAccess().getAndFeatureRuleRulesAction_1_0(),
						$current);
				}
			)
			otherlv_2='and'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndFeatureAccess().getAndKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndFeatureAccess().getRulesNotFeatureExpressionParserRuleCall_1_2_0());
					}
					lv_rules_3_0=ruleNotFeatureExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndFeatureRule());
						}
						add(
							$current,
							"rules",
							lv_rules_3_0,
							"org.framed.iorm.editpolicydsl.Dsl.NotFeatureExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNotFeatureExpression
entryRuleNotFeatureExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotFeatureExpressionRule()); }
	iv_ruleNotFeatureExpression=ruleNotFeatureExpression
	{ $current=$iv_ruleNotFeatureExpression.current; }
	EOF;

// Rule NotFeatureExpression
ruleNotFeatureExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNotFeatureExpressionAccess().getPrimaryFeatureParserRuleCall_0());
		}
		this_PrimaryFeature_0=rulePrimaryFeature
		{
			$current = $this_PrimaryFeature_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='!'
			{
				newLeafNode(otherlv_1, grammarAccess.getNotFeatureExpressionAccess().getExclamationMarkKeyword_1_0());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getNotFeatureExpressionAccess().getNotFeatureRuleAction_1_1(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNotFeatureExpressionAccess().getRulePrimaryFeatureParserRuleCall_1_2_0());
					}
					lv_rule_3_0=rulePrimaryFeature
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNotFeatureExpressionRule());
						}
						set(
							$current,
							"rule",
							lv_rule_3_0,
							"org.framed.iorm.editpolicydsl.Dsl.PrimaryFeature");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulePrimaryFeature
entryRulePrimaryFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryFeatureRule()); }
	iv_rulePrimaryFeature=rulePrimaryFeature
	{ $current=$iv_rulePrimaryFeature.current; }
	EOF;

// Rule PrimaryFeature
rulePrimaryFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryFeatureAccess().getFeatureRuleParserRuleCall_0());
		}
		this_FeatureRule_0=ruleFeatureRule
		{
			$current = $this_FeatureRule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimaryFeatureAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryFeatureAccess().getFeatureExpressionParserRuleCall_1_1());
			}
			this_FeatureExpression_2=ruleFeatureExpression
			{
				$current = $this_FeatureExpression_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryFeatureAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleConstraintExpression
entryRuleConstraintExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintExpressionRule()); }
	iv_ruleConstraintExpression=ruleConstraintExpression
	{ $current=$iv_ruleConstraintExpression.current; }
	EOF;

// Rule ConstraintExpression
ruleConstraintExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getConstraintExpressionAccess().getImplicationConstraintParserRuleCall());
	}
	this_ImplicationConstraint_0=ruleImplicationConstraint
	{
		$current = $this_ImplicationConstraint_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleImplicationConstraint
entryRuleImplicationConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImplicationConstraintRule()); }
	iv_ruleImplicationConstraint=ruleImplicationConstraint
	{ $current=$iv_ruleImplicationConstraint.current; }
	EOF;

// Rule ImplicationConstraint
ruleImplicationConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getImplicationConstraintAccess().getOrConstraintParserRuleCall_0());
		}
		this_OrConstraint_0=ruleOrConstraint
		{
			$current = $this_OrConstraint_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getImplicationConstraintAccess().getImplicationConstraintRuleLeftRuleAction_1_0(),
						$current);
				}
			)
			otherlv_2='=>'
			{
				newLeafNode(otherlv_2, grammarAccess.getImplicationConstraintAccess().getEqualsSignGreaterThanSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getImplicationConstraintAccess().getRightRuleOrConstraintParserRuleCall_1_2_0());
					}
					lv_rightRule_3_0=ruleOrConstraint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImplicationConstraintRule());
						}
						set(
							$current,
							"rightRule",
							lv_rightRule_3_0,
							"org.framed.iorm.editpolicydsl.Dsl.OrConstraint");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleOrConstraint
entryRuleOrConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrConstraintRule()); }
	iv_ruleOrConstraint=ruleOrConstraint
	{ $current=$iv_ruleOrConstraint.current; }
	EOF;

// Rule OrConstraint
ruleOrConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrConstraintAccess().getAndConstraintParserRuleCall_0());
		}
		this_AndConstraint_0=ruleAndConstraint
		{
			$current = $this_AndConstraint_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getOrConstraintAccess().getOrConstraintRuleRulesAction_1_0(),
						$current);
				}
			)
			otherlv_2='or'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrConstraintAccess().getOrKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrConstraintAccess().getRulesAndConstraintParserRuleCall_1_2_0());
					}
					lv_rules_3_0=ruleAndConstraint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrConstraintRule());
						}
						add(
							$current,
							"rules",
							lv_rules_3_0,
							"org.framed.iorm.editpolicydsl.Dsl.AndConstraint");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndConstraint
entryRuleAndConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndConstraintRule()); }
	iv_ruleAndConstraint=ruleAndConstraint
	{ $current=$iv_ruleAndConstraint.current; }
	EOF;

// Rule AndConstraint
ruleAndConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndConstraintAccess().getNotConstraintExpressionParserRuleCall_0());
		}
		this_NotConstraintExpression_0=ruleNotConstraintExpression
		{
			$current = $this_NotConstraintExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getAndConstraintAccess().getAndConstraintRuleRulesAction_1_0(),
						$current);
				}
			)
			otherlv_2='and'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndConstraintAccess().getAndKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndConstraintAccess().getRulesNotConstraintExpressionParserRuleCall_1_2_0());
					}
					lv_rules_3_0=ruleNotConstraintExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndConstraintRule());
						}
						add(
							$current,
							"rules",
							lv_rules_3_0,
							"org.framed.iorm.editpolicydsl.Dsl.NotConstraintExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNotConstraintExpression
entryRuleNotConstraintExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotConstraintExpressionRule()); }
	iv_ruleNotConstraintExpression=ruleNotConstraintExpression
	{ $current=$iv_ruleNotConstraintExpression.current; }
	EOF;

// Rule NotConstraintExpression
ruleNotConstraintExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNotConstraintExpressionAccess().getPrimaryConstraintParserRuleCall_0());
		}
		this_PrimaryConstraint_0=rulePrimaryConstraint
		{
			$current = $this_PrimaryConstraint_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='!'
			{
				newLeafNode(otherlv_1, grammarAccess.getNotConstraintExpressionAccess().getExclamationMarkKeyword_1_0());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getNotConstraintExpressionAccess().getNotConstraintRuleAction_1_1(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNotConstraintExpressionAccess().getRulePrimaryConstraintParserRuleCall_1_2_0());
					}
					lv_rule_3_0=rulePrimaryConstraint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNotConstraintExpressionRule());
						}
						set(
							$current,
							"rule",
							lv_rule_3_0,
							"org.framed.iorm.editpolicydsl.Dsl.PrimaryConstraint");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulePrimaryConstraint
entryRulePrimaryConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryConstraintRule()); }
	iv_rulePrimaryConstraint=rulePrimaryConstraint
	{ $current=$iv_rulePrimaryConstraint.current; }
	EOF;

// Rule PrimaryConstraint
rulePrimaryConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryConstraintAccess().getConstraintRuleParserRuleCall_0());
		}
		this_ConstraintRule_0=ruleConstraintRule
		{
			$current = $this_ConstraintRule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimaryConstraintAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryConstraintAccess().getConstraintExpressionParserRuleCall_1_1());
			}
			this_ConstraintExpression_2=ruleConstraintExpression
			{
				$current = $this_ConstraintExpression_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryConstraintAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Rule ActionEnum
ruleActionEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Add'
			{
				$current = grammarAccess.getActionEnumAccess().getAddEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getActionEnumAccess().getAddEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Reconnect'
			{
				$current = grammarAccess.getActionEnumAccess().getReconnectEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getActionEnumAccess().getReconnectEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Create'
			{
				$current = grammarAccess.getActionEnumAccess().getCreateEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getActionEnumAccess().getCreateEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Start'
			{
				$current = grammarAccess.getActionEnumAccess().getStartEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getActionEnumAccess().getStartEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Execute'
			{
				$current = grammarAccess.getActionEnumAccess().getExecuteEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getActionEnumAccess().getExecuteEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='Direct_Edit'
			{
				$current = grammarAccess.getActionEnumAccess().getDirect_EditEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getActionEnumAccess().getDirect_EditEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='Add_Property'
			{
				$current = grammarAccess.getActionEnumAccess().getAdd_PropertyEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getActionEnumAccess().getAdd_PropertyEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='Create_Attribute'
			{
				$current = grammarAccess.getActionEnumAccess().getCreate_AttributeEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getActionEnumAccess().getCreate_AttributeEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='Create_Operation'
			{
				$current = grammarAccess.getActionEnumAccess().getCreate_OperationEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getActionEnumAccess().getCreate_OperationEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='Create_Property'
			{
				$current = grammarAccess.getActionEnumAccess().getCreate_PropertyEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getActionEnumAccess().getCreate_PropertyEnumLiteralDeclaration_9());
			}
		)
	)
;

// Rule FeatureTypeEnum
ruleFeatureTypeEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Acyclic'
			{
				$current = grammarAccess.getFeatureTypeEnumAccess().getAcyclicEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getFeatureTypeEnumAccess().getAcyclicEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='CompartmentType'
			{
				$current = grammarAccess.getFeatureTypeEnumAccess().getCompartmentTypeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getFeatureTypeEnumAccess().getCompartmentTypeEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Cyclic'
			{
				$current = grammarAccess.getFeatureTypeEnumAccess().getCyclicEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getFeatureTypeEnumAccess().getCyclicEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='DataType'
			{
				$current = grammarAccess.getFeatureTypeEnumAccess().getDataTypeEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getFeatureTypeEnumAccess().getDataTypeEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Fulfillment'
			{
				$current = grammarAccess.getFeatureTypeEnumAccess().getFulfillmentEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getFeatureTypeEnumAccess().getFulfillmentEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='Inheritance'
			{
				$current = grammarAccess.getFeatureTypeEnumAccess().getInheritanceEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getFeatureTypeEnumAccess().getInheritanceEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='Group'
			{
				$current = grammarAccess.getFeatureTypeEnumAccess().getGroupEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getFeatureTypeEnumAccess().getGroupEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='Reflexive'
			{
				$current = grammarAccess.getFeatureTypeEnumAccess().getReflexiveEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getFeatureTypeEnumAccess().getReflexiveEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='Relationship'
			{
				$current = grammarAccess.getFeatureTypeEnumAccess().getRelationshipEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getFeatureTypeEnumAccess().getRelationshipEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='RelationshipExclusion'
			{
				$current = grammarAccess.getFeatureTypeEnumAccess().getRelationshipExclusionEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getFeatureTypeEnumAccess().getRelationshipExclusionEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='RelationshipImplication'
			{
				$current = grammarAccess.getFeatureTypeEnumAccess().getRelationshipImplicationEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getFeatureTypeEnumAccess().getRelationshipImplicationEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='RoleType'
			{
				$current = grammarAccess.getFeatureTypeEnumAccess().getRoleTypeEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getFeatureTypeEnumAccess().getRoleTypeEnumLiteralDeclaration_11());
			}
		)
		    |
		(
			enumLiteral_12='RoleEquivalence'
			{
				$current = grammarAccess.getFeatureTypeEnumAccess().getRoleEquivalenceEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_12, grammarAccess.getFeatureTypeEnumAccess().getRoleEquivalenceEnumLiteralDeclaration_12());
			}
		)
		    |
		(
			enumLiteral_13='RoleGroup'
			{
				$current = grammarAccess.getFeatureTypeEnumAccess().getRoleGroupEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_13, grammarAccess.getFeatureTypeEnumAccess().getRoleGroupEnumLiteralDeclaration_13());
			}
		)
		    |
		(
			enumLiteral_14='RoleImplication'
			{
				$current = grammarAccess.getFeatureTypeEnumAccess().getRoleImplicationEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_14, grammarAccess.getFeatureTypeEnumAccess().getRoleImplicationEnumLiteralDeclaration_14());
			}
		)
		    |
		(
			enumLiteral_15='RoleProhibition'
			{
				$current = grammarAccess.getFeatureTypeEnumAccess().getRoleProhibitionEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_15, grammarAccess.getFeatureTypeEnumAccess().getRoleProhibitionEnumLiteralDeclaration_15());
			}
		)
		    |
		(
			enumLiteral_16='Irreflexive'
			{
				$current = grammarAccess.getFeatureTypeEnumAccess().getIrreflexiveEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_16, grammarAccess.getFeatureTypeEnumAccess().getIrreflexiveEnumLiteralDeclaration_16());
			}
		)
		    |
		(
			enumLiteral_17='NaturalType'
			{
				$current = grammarAccess.getFeatureTypeEnumAccess().getNaturalTypeEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_17, grammarAccess.getFeatureTypeEnumAccess().getNaturalTypeEnumLiteralDeclaration_17());
			}
		)
	)
;

// Rule FeatureNameEnum
ruleFeatureNameEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Compartment_Behavior'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getCompartment_BehaviorEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getFeatureNameEnumAccess().getCompartment_BehaviorEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Compartment_Inheritance'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getCompartment_InheritanceEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getFeatureNameEnumAccess().getCompartment_InheritanceEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Compartment_Properties'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getCompartment_PropertiesEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getFeatureNameEnumAccess().getCompartment_PropertiesEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Compartment_Structure'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getCompartment_StructureEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getFeatureNameEnumAccess().getCompartment_StructureEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Compartment_Types'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getCompartment_TypesEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getFeatureNameEnumAccess().getCompartment_TypesEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='Contains_Compartments'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getContains_CompartmentsEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getFeatureNameEnumAccess().getContains_CompartmentsEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='Compartments'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getCompartmentsEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getFeatureNameEnumAccess().getCompartmentsEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='Data_Type_Inheritance'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getData_Type_InheritanceEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getFeatureNameEnumAccess().getData_Type_InheritanceEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='Data_Types'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getData_TypesEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getFeatureNameEnumAccess().getData_TypesEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='Dates'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getDatesEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getFeatureNameEnumAccess().getDatesEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='Dependent'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getDependentEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getFeatureNameEnumAccess().getDependentEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='Group_Constraints'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getGroup_ConstraintsEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getFeatureNameEnumAccess().getGroup_ConstraintsEnumLiteralDeclaration_11());
			}
		)
		    |
		(
			enumLiteral_12='Inter_Relationship_Constraints'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getInter_Relationship_ConstraintsEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_12, grammarAccess.getFeatureNameEnumAccess().getInter_Relationship_ConstraintsEnumLiteralDeclaration_12());
			}
		)
		    |
		(
			enumLiteral_13='Intra_Relationship_Constraints'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getIntra_Relationship_ConstraintsEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_13, grammarAccess.getFeatureNameEnumAccess().getIntra_Relationship_ConstraintsEnumLiteralDeclaration_13());
			}
		)
		    |
		(
			enumLiteral_14='Naturals'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getNaturalsEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_14, grammarAccess.getFeatureNameEnumAccess().getNaturalsEnumLiteralDeclaration_14());
			}
		)
		    |
		(
			enumLiteral_15='Occurrence_Constraints'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getOccurrence_ConstraintsEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_15, grammarAccess.getFeatureNameEnumAccess().getOccurrence_ConstraintsEnumLiteralDeclaration_15());
			}
		)
		    |
		(
			enumLiteral_16='On_Compartments'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getOn_CompartmentsEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_16, grammarAccess.getFeatureNameEnumAccess().getOn_CompartmentsEnumLiteralDeclaration_16());
			}
		)
		    |
		(
			enumLiteral_17='On_Relationships'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getOn_RelationshipsEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_17, grammarAccess.getFeatureNameEnumAccess().getOn_RelationshipsEnumLiteralDeclaration_17());
			}
		)
		    |
		(
			enumLiteral_18='Parthood_Constraints'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getParthood_ConstraintsEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_18, grammarAccess.getFeatureNameEnumAccess().getParthood_ConstraintsEnumLiteralDeclaration_18());
			}
		)
		    |
		(
			enumLiteral_19='Participants'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getParticipantsEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_19, grammarAccess.getFeatureNameEnumAccess().getParticipantsEnumLiteralDeclaration_19());
			}
		)
		    |
		(
			enumLiteral_20='Playable'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getPlayableEnumLiteralDeclaration_20().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_20, grammarAccess.getFeatureNameEnumAccess().getPlayableEnumLiteralDeclaration_20());
			}
		)
		    |
		(
			enumLiteral_21='Playable_by_Defining_Compartment'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getPlayable_by_Defining_CompartmentEnumLiteralDeclaration_21().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_21, grammarAccess.getFeatureNameEnumAccess().getPlayable_by_Defining_CompartmentEnumLiteralDeclaration_21());
			}
		)
		    |
		(
			enumLiteral_22='Players'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getPlayersEnumLiteralDeclaration_22().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_22, grammarAccess.getFeatureNameEnumAccess().getPlayersEnumLiteralDeclaration_22());
			}
		)
		    |
		(
			enumLiteral_23='Relationship_Cardinality'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getRelationship_CardinalityEnumLiteralDeclaration_23().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_23, grammarAccess.getFeatureNameEnumAccess().getRelationship_CardinalityEnumLiteralDeclaration_23());
			}
		)
		    |
		(
			enumLiteral_24='Relationship_Constraints'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getRelationship_ConstraintsEnumLiteralDeclaration_24().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_24, grammarAccess.getFeatureNameEnumAccess().getRelationship_ConstraintsEnumLiteralDeclaration_24());
			}
		)
		    |
		(
			enumLiteral_25='Relationships'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getRelationshipsEnumLiteralDeclaration_25().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_25, grammarAccess.getFeatureNameEnumAccess().getRelationshipsEnumLiteralDeclaration_25());
			}
		)
		    |
		(
			enumLiteral_26='RML_Feature_Model'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getRML_Feature_ModelEnumLiteralDeclaration_26().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_26, grammarAccess.getFeatureNameEnumAccess().getRML_Feature_ModelEnumLiteralDeclaration_26());
			}
		)
		    |
		(
			enumLiteral_27='Role_Behavior'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getRole_BehaviorEnumLiteralDeclaration_27().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_27, grammarAccess.getFeatureNameEnumAccess().getRole_BehaviorEnumLiteralDeclaration_27());
			}
		)
		    |
		(
			enumLiteral_28='Role_Constraints'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getRole_ConstraintsEnumLiteralDeclaration_28().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_28, grammarAccess.getFeatureNameEnumAccess().getRole_ConstraintsEnumLiteralDeclaration_28());
			}
		)
		    |
		(
			enumLiteral_29='Role_Equivalence'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getRole_EquivalenceEnumLiteralDeclaration_29().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_29, grammarAccess.getFeatureNameEnumAccess().getRole_EquivalenceEnumLiteralDeclaration_29());
			}
		)
		    |
		(
			enumLiteral_30='Role_Implication'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getRole_ImplicationEnumLiteralDeclaration_30().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_30, grammarAccess.getFeatureNameEnumAccess().getRole_ImplicationEnumLiteralDeclaration_30());
			}
		)
		    |
		(
			enumLiteral_31='Role_Inheritance'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getRole_InheritanceEnumLiteralDeclaration_31().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_31, grammarAccess.getFeatureNameEnumAccess().getRole_InheritanceEnumLiteralDeclaration_31());
			}
		)
		    |
		(
			enumLiteral_32='Role_Prohibition'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getRole_ProhibitionEnumLiteralDeclaration_32().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_32, grammarAccess.getFeatureNameEnumAccess().getRole_ProhibitionEnumLiteralDeclaration_32());
			}
		)
		    |
		(
			enumLiteral_33='Role_Properties'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getRole_PropertiesEnumLiteralDeclaration_33().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_33, grammarAccess.getFeatureNameEnumAccess().getRole_PropertiesEnumLiteralDeclaration_33());
			}
		)
		    |
		(
			enumLiteral_34='Role_Structure'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getRole_StructureEnumLiteralDeclaration_34().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_34, grammarAccess.getFeatureNameEnumAccess().getRole_StructureEnumLiteralDeclaration_34());
			}
		)
		    |
		(
			enumLiteral_35='Role_Types'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getRole_TypesEnumLiteralDeclaration_35().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_35, grammarAccess.getFeatureNameEnumAccess().getRole_TypesEnumLiteralDeclaration_35());
			}
		)
		    |
		(
			enumLiteral_36='Roles'
			{
				$current = grammarAccess.getFeatureNameEnumAccess().getRolesEnumLiteralDeclaration_36().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_36, grammarAccess.getFeatureNameEnumAccess().getRolesEnumLiteralDeclaration_36());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
