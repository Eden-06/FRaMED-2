/*
 * generated by Xtext 2.13.0
 */
package org.framed.iorm.editpolicydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPoliciesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPoliciesPolicyParserRuleCall_0_0 = (RuleCall)cPoliciesAssignment_0.eContents().get(0);
		private final Assignment cPoliciesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPoliciesPolicyParserRuleCall_1_0 = (RuleCall)cPoliciesAssignment_1.eContents().get(0);
		
		//Model:
		//	(policies+=Policy policies+=Policy*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(policies+=Policy policies+=Policy*)?
		public Group getGroup() { return cGroup; }
		
		//policies+=Policy
		public Assignment getPoliciesAssignment_0() { return cPoliciesAssignment_0; }
		
		//Policy
		public RuleCall getPoliciesPolicyParserRuleCall_0_0() { return cPoliciesPolicyParserRuleCall_0_0; }
		
		//policies+=Policy*
		public Assignment getPoliciesAssignment_1() { return cPoliciesAssignment_1; }
		
		//Policy
		public RuleCall getPoliciesPolicyParserRuleCall_1_0() { return cPoliciesPolicyParserRuleCall_1_0; }
	}
	public class PolicyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.Policy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOverrideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOverrideOverrideKeyword_0_0 = (Keyword)cOverrideAssignment_0.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionActionEnumEnumRuleCall_1_0 = (RuleCall)cActionAssignment_1.eContents().get(0);
		private final Assignment cActionTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionTypeActionTypeEnumEnumRuleCall_2_0 = (RuleCall)cActionTypeAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeatureRuleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeatureRuleFeatureExpressionParserRuleCall_4_0 = (RuleCall)cFeatureRuleAssignment_4.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cConstraintRuleAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConstraintRuleConstraintExpressionParserRuleCall_6_0 = (RuleCall)cConstraintRuleAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Policy:
		//	override?='override' action=ActionEnum actionType=ActionTypeEnum
		//	'{'
		//	featureRule=FeatureExpression '=>' constraintRule=ConstraintExpression
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//override?='override' action=ActionEnum actionType=ActionTypeEnum '{' featureRule=FeatureExpression '=>'
		//constraintRule=ConstraintExpression '}'
		public Group getGroup() { return cGroup; }
		
		//override?='override'
		public Assignment getOverrideAssignment_0() { return cOverrideAssignment_0; }
		
		//'override'
		public Keyword getOverrideOverrideKeyword_0_0() { return cOverrideOverrideKeyword_0_0; }
		
		//action=ActionEnum
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//ActionEnum
		public RuleCall getActionActionEnumEnumRuleCall_1_0() { return cActionActionEnumEnumRuleCall_1_0; }
		
		//actionType=ActionTypeEnum
		public Assignment getActionTypeAssignment_2() { return cActionTypeAssignment_2; }
		
		//ActionTypeEnum
		public RuleCall getActionTypeActionTypeEnumEnumRuleCall_2_0() { return cActionTypeActionTypeEnumEnumRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//featureRule=FeatureExpression
		public Assignment getFeatureRuleAssignment_4() { return cFeatureRuleAssignment_4; }
		
		//FeatureExpression
		public RuleCall getFeatureRuleFeatureExpressionParserRuleCall_4_0() { return cFeatureRuleFeatureExpressionParserRuleCall_4_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_5() { return cEqualsSignGreaterThanSignKeyword_5; }
		
		//constraintRule=ConstraintExpression
		public Assignment getConstraintRuleAssignment_6() { return cConstraintRuleAssignment_6; }
		
		//ConstraintExpression
		public RuleCall getConstraintRuleConstraintExpressionParserRuleCall_6_0() { return cConstraintRuleConstraintExpressionParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ConstraintRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.ConstraintRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStepInRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTrueRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConstraintRule AbstractRule:
		//	StepInRule | TrueRule;
		@Override public ParserRule getRule() { return rule; }
		
		//StepInRule | TrueRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StepInRule
		public RuleCall getStepInRuleParserRuleCall_0() { return cStepInRuleParserRuleCall_0; }
		
		//TrueRule
		public RuleCall getTrueRuleParserRuleCall_1() { return cTrueRuleParserRuleCall_1; }
	}
	public class FeatureRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.FeatureRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIsFeatureRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTrueRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FeatureRule AbstractRule:
		//	IsFeatureRule | TrueRule;
		@Override public ParserRule getRule() { return rule; }
		
		//IsFeatureRule | TrueRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IsFeatureRule
		public RuleCall getIsFeatureRuleParserRuleCall_0() { return cIsFeatureRuleParserRuleCall_0; }
		
		//TrueRule
		public RuleCall getTrueRuleParserRuleCall_1() { return cTrueRuleParserRuleCall_1; }
	}
	public class IsFeatureRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.IsFeatureRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRuleIsFeatureParserRuleCall_1_0 = (RuleCall)cRuleAssignment_1.eContents().get(0);
		
		//IsFeatureRule Rule:
		//	{Rule} rule=IsFeature;
		@Override public ParserRule getRule() { return rule; }
		
		//{Rule} rule=IsFeature
		public Group getGroup() { return cGroup; }
		
		//{Rule}
		public Action getRuleAction_0() { return cRuleAction_0; }
		
		//rule=IsFeature
		public Assignment getRuleAssignment_1() { return cRuleAssignment_1; }
		
		//IsFeature
		public RuleCall getRuleIsFeatureParserRuleCall_1_0() { return cRuleIsFeatureParserRuleCall_1_0; }
	}
	public class IsFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.IsFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsFeatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsFeatureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IsFeature:
		//	{IsFeature}
		//	'isFeature';
		@Override public ParserRule getRule() { return rule; }
		
		//{IsFeature} 'isFeature'
		public Group getGroup() { return cGroup; }
		
		//{IsFeature}
		public Action getIsFeatureAction_0() { return cIsFeatureAction_0; }
		
		//'isFeature'
		public Keyword getIsFeatureKeyword_1() { return cIsFeatureKeyword_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////(IsFeature.name=>FeatureName);
		////enum FeatureNames returns featuremodel::FeatureName:
		////	On_Relationships;
		////enum EnumType returns
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class StepInRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.StepInRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRuleStepInParserRuleCall_1_0 = (RuleCall)cRuleAssignment_1.eContents().get(0);
		
		//StepInRule Rule:
		//	{Rule} rule=StepIn;
		@Override public ParserRule getRule() { return rule; }
		
		//{Rule} rule=StepIn
		public Group getGroup() { return cGroup; }
		
		//{Rule}
		public Action getRuleAction_0() { return cRuleAction_0; }
		
		//rule=StepIn
		public Assignment getRuleAssignment_1() { return cRuleAssignment_1; }
		
		//StepIn
		public RuleCall getRuleStepInParserRuleCall_1_0() { return cRuleStepInParserRuleCall_1_0; }
	}
	public class StepInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.StepIn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsStepInAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStepInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StepIn IsStepIn:
		//	{IsStepIn}
		//	'StepIn';
		@Override public ParserRule getRule() { return rule; }
		
		//{IsStepIn} 'StepIn'
		public Group getGroup() { return cGroup; }
		
		//{IsStepIn}
		public Action getIsStepInAction_0() { return cIsStepInAction_0; }
		
		//'StepIn'
		public Keyword getStepInKeyword_1() { return cStepInKeyword_1; }
	}
	public class TrueRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.TrueRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTrueRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTrueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TrueRule:
		//	{TrueRule}
		//	'true';
		@Override public ParserRule getRule() { return rule; }
		
		//{TrueRule} 'true'
		public Group getGroup() { return cGroup; }
		
		//{TrueRule}
		public Action getTrueRuleAction_0() { return cTrueRuleAction_0; }
		
		//'true'
		public Keyword getTrueKeyword_1() { return cTrueKeyword_1; }
	}
	public class FalseRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.FalseRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFalseRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FalseRule:
		//	{FalseRule}
		//	'false';
		@Override public ParserRule getRule() { return rule; }
		
		//{FalseRule} 'false'
		public Group getGroup() { return cGroup; }
		
		//{FalseRule}
		public Action getFalseRuleAction_0() { return cFalseRuleAction_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class FeatureExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.FeatureExpression");
		private final RuleCall cOrFeatureParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////expression support for Features
		//FeatureExpression AbstractRule:
		//	OrFeature;
		@Override public ParserRule getRule() { return rule; }
		
		//OrFeature
		public RuleCall getOrFeatureParserRuleCall() { return cOrFeatureParserRuleCall; }
	}
	public class ImplicationFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.ImplicationFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrFeatureParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cImplicationRuleLeftRuleAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightRuleAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRuleOrFeatureParserRuleCall_1_2_0 = (RuleCall)cRightRuleAssignment_1_2.eContents().get(0);
		
		//ImplicationFeature AbstractRule:
		//	OrFeature ({ImplicationRule.leftRule=current} '=>' rightRule=OrFeature)?;
		@Override public ParserRule getRule() { return rule; }
		
		//OrFeature ({ImplicationRule.leftRule=current} '=>' rightRule=OrFeature)?
		public Group getGroup() { return cGroup; }
		
		//OrFeature
		public RuleCall getOrFeatureParserRuleCall_0() { return cOrFeatureParserRuleCall_0; }
		
		//({ImplicationRule.leftRule=current} '=>' rightRule=OrFeature)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ImplicationRule.leftRule=current}
		public Action getImplicationRuleLeftRuleAction_1_0() { return cImplicationRuleLeftRuleAction_1_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1() { return cEqualsSignGreaterThanSignKeyword_1_1; }
		
		//rightRule=OrFeature
		public Assignment getRightRuleAssignment_1_2() { return cRightRuleAssignment_1_2; }
		
		//OrFeature
		public RuleCall getRightRuleOrFeatureParserRuleCall_1_2_0() { return cRightRuleOrFeatureParserRuleCall_1_2_0; }
	}
	public class OrFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.OrFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndFeatureParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrRuleRulesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRulesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRulesAndFeatureParserRuleCall_1_2_0 = (RuleCall)cRulesAssignment_1_2.eContents().get(0);
		
		//OrFeature AbstractRule:
		//	AndFeature ({OrRule.rules+=current} '||' rules+=AndFeature)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndFeature ({OrRule.rules+=current} '||' rules+=AndFeature)*
		public Group getGroup() { return cGroup; }
		
		//AndFeature
		public RuleCall getAndFeatureParserRuleCall_0() { return cAndFeatureParserRuleCall_0; }
		
		//({OrRule.rules+=current} '||' rules+=AndFeature)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrRule.rules+=current}
		public Action getOrRuleRulesAction_1_0() { return cOrRuleRulesAction_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//rules+=AndFeature
		public Assignment getRulesAssignment_1_2() { return cRulesAssignment_1_2; }
		
		//AndFeature
		public RuleCall getRulesAndFeatureParserRuleCall_1_2_0() { return cRulesAndFeatureParserRuleCall_1_2_0; }
	}
	public class AndFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.AndFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotFeatureExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndRuleRulesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRulesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRulesNotFeatureExpressionParserRuleCall_1_2_0 = (RuleCall)cRulesAssignment_1_2.eContents().get(0);
		
		//AndFeature AbstractRule:
		//	NotFeatureExpression ({AndRule.rules+=current} '&&' rules+=NotFeatureExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//NotFeatureExpression ({AndRule.rules+=current} '&&' rules+=NotFeatureExpression)*
		public Group getGroup() { return cGroup; }
		
		//NotFeatureExpression
		public RuleCall getNotFeatureExpressionParserRuleCall_0() { return cNotFeatureExpressionParserRuleCall_0; }
		
		//({AndRule.rules+=current} '&&' rules+=NotFeatureExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndRule.rules+=current}
		public Action getAndRuleRulesAction_1_0() { return cAndRuleRulesAction_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//rules+=NotFeatureExpression
		public Assignment getRulesAssignment_1_2() { return cRulesAssignment_1_2; }
		
		//NotFeatureExpression
		public RuleCall getRulesNotFeatureExpressionParserRuleCall_1_2_0() { return cRulesNotFeatureExpressionParserRuleCall_1_2_0; }
	}
	public class NotFeatureExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.NotFeatureExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cNotRuleAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRulePrimaryFeatureParserRuleCall_1_2_0 = (RuleCall)cRuleAssignment_1_2.eContents().get(0);
		
		//NotFeatureExpression AbstractRule:
		//	PrimaryFeature | '!' {NotRule} rule=PrimaryFeature;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryFeature | '!' {NotRule} rule=PrimaryFeature
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryFeature
		public RuleCall getPrimaryFeatureParserRuleCall_0() { return cPrimaryFeatureParserRuleCall_0; }
		
		//'!' {NotRule} rule=PrimaryFeature
		public Group getGroup_1() { return cGroup_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_0() { return cExclamationMarkKeyword_1_0; }
		
		//{NotRule}
		public Action getNotRuleAction_1_1() { return cNotRuleAction_1_1; }
		
		//rule=PrimaryFeature
		public Assignment getRuleAssignment_1_2() { return cRuleAssignment_1_2; }
		
		//PrimaryFeature
		public RuleCall getRulePrimaryFeatureParserRuleCall_1_2_0() { return cRulePrimaryFeatureParserRuleCall_1_2_0; }
	}
	public class PrimaryFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.PrimaryFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cFeatureExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryFeature AbstractRule:
		//	FeatureRule | '(' FeatureExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureRule | '(' FeatureExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FeatureRule
		public RuleCall getFeatureRuleParserRuleCall_0() { return cFeatureRuleParserRuleCall_0; }
		
		//'(' FeatureExpression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//FeatureExpression
		public RuleCall getFeatureExpressionParserRuleCall_1_1() { return cFeatureExpressionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class ConstraintExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.ConstraintExpression");
		private final RuleCall cImplicationConstraintParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////expression support for Constraints
		//ConstraintExpression AbstractRule:
		//	ImplicationConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		//ImplicationConstraint
		public RuleCall getImplicationConstraintParserRuleCall() { return cImplicationConstraintParserRuleCall; }
	}
	public class ImplicationConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.ImplicationConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrConstraintParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cImplicationRuleLeftRuleAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightRuleAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRuleOrConstraintParserRuleCall_1_2_0 = (RuleCall)cRightRuleAssignment_1_2.eContents().get(0);
		
		//ImplicationConstraint AbstractRule:
		//	OrConstraint ({ImplicationRule.leftRule=current} '=>' rightRule=OrConstraint)?;
		@Override public ParserRule getRule() { return rule; }
		
		//OrConstraint ({ImplicationRule.leftRule=current} '=>' rightRule=OrConstraint)?
		public Group getGroup() { return cGroup; }
		
		//OrConstraint
		public RuleCall getOrConstraintParserRuleCall_0() { return cOrConstraintParserRuleCall_0; }
		
		//({ImplicationRule.leftRule=current} '=>' rightRule=OrConstraint)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ImplicationRule.leftRule=current}
		public Action getImplicationRuleLeftRuleAction_1_0() { return cImplicationRuleLeftRuleAction_1_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1() { return cEqualsSignGreaterThanSignKeyword_1_1; }
		
		//rightRule=OrConstraint
		public Assignment getRightRuleAssignment_1_2() { return cRightRuleAssignment_1_2; }
		
		//OrConstraint
		public RuleCall getRightRuleOrConstraintParserRuleCall_1_2_0() { return cRightRuleOrConstraintParserRuleCall_1_2_0; }
	}
	public class OrConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.OrConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndConstraintParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrRuleRulesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRulesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRulesAndConstraintParserRuleCall_1_2_0 = (RuleCall)cRulesAssignment_1_2.eContents().get(0);
		
		//OrConstraint AbstractRule:
		//	AndConstraint ({OrRule.rules+=current} '||' rules+=AndConstraint)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndConstraint ({OrRule.rules+=current} '||' rules+=AndConstraint)*
		public Group getGroup() { return cGroup; }
		
		//AndConstraint
		public RuleCall getAndConstraintParserRuleCall_0() { return cAndConstraintParserRuleCall_0; }
		
		//({OrRule.rules+=current} '||' rules+=AndConstraint)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrRule.rules+=current}
		public Action getOrRuleRulesAction_1_0() { return cOrRuleRulesAction_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//rules+=AndConstraint
		public Assignment getRulesAssignment_1_2() { return cRulesAssignment_1_2; }
		
		//AndConstraint
		public RuleCall getRulesAndConstraintParserRuleCall_1_2_0() { return cRulesAndConstraintParserRuleCall_1_2_0; }
	}
	public class AndConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.AndConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotConstraintExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndRuleRulesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRulesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRulesNotConstraintExpressionParserRuleCall_1_2_0 = (RuleCall)cRulesAssignment_1_2.eContents().get(0);
		
		//AndConstraint AbstractRule:
		//	NotConstraintExpression ({AndRule.rules+=current} '&&' rules+=NotConstraintExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//NotConstraintExpression ({AndRule.rules+=current} '&&' rules+=NotConstraintExpression)*
		public Group getGroup() { return cGroup; }
		
		//NotConstraintExpression
		public RuleCall getNotConstraintExpressionParserRuleCall_0() { return cNotConstraintExpressionParserRuleCall_0; }
		
		//({AndRule.rules+=current} '&&' rules+=NotConstraintExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndRule.rules+=current}
		public Action getAndRuleRulesAction_1_0() { return cAndRuleRulesAction_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//rules+=NotConstraintExpression
		public Assignment getRulesAssignment_1_2() { return cRulesAssignment_1_2; }
		
		//NotConstraintExpression
		public RuleCall getRulesNotConstraintExpressionParserRuleCall_1_2_0() { return cRulesNotConstraintExpressionParserRuleCall_1_2_0; }
	}
	public class NotConstraintExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.NotConstraintExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cNotRuleAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRulePrimaryConstraintParserRuleCall_1_2_0 = (RuleCall)cRuleAssignment_1_2.eContents().get(0);
		
		//NotConstraintExpression AbstractRule:
		//	PrimaryConstraint | '!' {NotRule} rule=PrimaryConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryConstraint | '!' {NotRule} rule=PrimaryConstraint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryConstraint
		public RuleCall getPrimaryConstraintParserRuleCall_0() { return cPrimaryConstraintParserRuleCall_0; }
		
		//'!' {NotRule} rule=PrimaryConstraint
		public Group getGroup_1() { return cGroup_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_0() { return cExclamationMarkKeyword_1_0; }
		
		//{NotRule}
		public Action getNotRuleAction_1_1() { return cNotRuleAction_1_1; }
		
		//rule=PrimaryConstraint
		public Assignment getRuleAssignment_1_2() { return cRuleAssignment_1_2; }
		
		//PrimaryConstraint
		public RuleCall getRulePrimaryConstraintParserRuleCall_1_2_0() { return cRulePrimaryConstraintParserRuleCall_1_2_0; }
	}
	public class PrimaryConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.PrimaryConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstraintRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cConstraintExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryConstraint AbstractRule:
		//	ConstraintRule | '(' ConstraintExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//ConstraintRule | '(' ConstraintExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConstraintRule
		public RuleCall getConstraintRuleParserRuleCall_0() { return cConstraintRuleParserRuleCall_0; }
		
		//'(' ConstraintExpression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//ConstraintExpression
		public RuleCall getConstraintExpressionParserRuleCall_1_1() { return cConstraintExpressionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	
	public class ActionEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.ActionEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAddEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAddAddKeyword_0_0 = (Keyword)cAddEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cReconnectEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cReconnectReconnectKeyword_1_0 = (Keyword)cReconnectEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCreateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCreateCreateKeyword_2_0 = (Keyword)cCreateEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cStartEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cStartStartKeyword_3_0 = (Keyword)cStartEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ActionEnum:
		//	Add | Reconnect | Create | Start;
		public EnumRule getRule() { return rule; }
		
		//Add | Reconnect | Create | Start
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Add
		public EnumLiteralDeclaration getAddEnumLiteralDeclaration_0() { return cAddEnumLiteralDeclaration_0; }
		
		//"Add"
		public Keyword getAddAddKeyword_0_0() { return cAddAddKeyword_0_0; }
		
		//Reconnect
		public EnumLiteralDeclaration getReconnectEnumLiteralDeclaration_1() { return cReconnectEnumLiteralDeclaration_1; }
		
		//"Reconnect"
		public Keyword getReconnectReconnectKeyword_1_0() { return cReconnectReconnectKeyword_1_0; }
		
		//Create
		public EnumLiteralDeclaration getCreateEnumLiteralDeclaration_2() { return cCreateEnumLiteralDeclaration_2; }
		
		//"Create"
		public Keyword getCreateCreateKeyword_2_0() { return cCreateCreateKeyword_2_0; }
		
		//Start
		public EnumLiteralDeclaration getStartEnumLiteralDeclaration_3() { return cStartEnumLiteralDeclaration_3; }
		
		//"Start"
		public Keyword getStartStartKeyword_3_0() { return cStartStartKeyword_3_0; }
	}
	public class ActionTypeEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.ActionTypeEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAcyclicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAcyclicAcyclicKeyword_0_0 = (Keyword)cAcyclicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCompartmentTypeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCompartmentTypeCompartmentTypeKeyword_1_0 = (Keyword)cCompartmentTypeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCyclicEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCyclicCyclicKeyword_2_0 = (Keyword)cCyclicEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDataTypeEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDataTypeDataTypeKeyword_3_0 = (Keyword)cDataTypeEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFulfillmentEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFulfillmentFulfillmentKeyword_4_0 = (Keyword)cFulfillmentEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cInheritanceEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cInheritanceInheritanceKeyword_5_0 = (Keyword)cInheritanceEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cGroupEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cGroupGroupKeyword_6_0 = (Keyword)cGroupEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cReflexiveEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cReflexiveReflexiveKeyword_7_0 = (Keyword)cReflexiveEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cRelationshipEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cRelationshipRelationshipKeyword_8_0 = (Keyword)cRelationshipEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cRelationshipExclusionEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cRelationshipExclusionRelationshipExclusionKeyword_9_0 = (Keyword)cRelationshipExclusionEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cRelationshipImplicationEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cRelationshipImplicationRelationshipImplicationKeyword_10_0 = (Keyword)cRelationshipImplicationEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cRoleTypeEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cRoleTypeRoleTypeKeyword_11_0 = (Keyword)cRoleTypeEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cRoleEquivalenceEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cRoleEquivalenceRoleEquivalenceKeyword_12_0 = (Keyword)cRoleEquivalenceEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cRoleGroupEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cRoleGroupRoleGroupKeyword_13_0 = (Keyword)cRoleGroupEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cRoleImplicationEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cRoleImplicationRoleImplicationKeyword_14_0 = (Keyword)cRoleImplicationEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cRoleProhibitionEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cRoleProhibitionRoleProhibitionKeyword_15_0 = (Keyword)cRoleProhibitionEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cIrreflexiveEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cIrreflexiveIrreflexiveKeyword_16_0 = (Keyword)cIrreflexiveEnumLiteralDeclaration_16.eContents().get(0);
		
		//enum ActionTypeEnum returns iorm::Type:
		//	Acyclic | CompartmentType | Cyclic | DataType | Fulfillment | Inheritance |
		//	Group | Reflexive | Relationship | RelationshipExclusion | RelationshipImplication |
		//	RoleType | RoleEquivalence | RoleGroup | RoleImplication | RoleProhibition |
		//	Irreflexive;
		public EnumRule getRule() { return rule; }
		
		//Acyclic | CompartmentType | Cyclic | DataType | Fulfillment | Inheritance | Group | Reflexive | Relationship |
		//RelationshipExclusion | RelationshipImplication | RoleType | RoleEquivalence | RoleGroup | RoleImplication |
		//RoleProhibition | Irreflexive
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Acyclic
		public EnumLiteralDeclaration getAcyclicEnumLiteralDeclaration_0() { return cAcyclicEnumLiteralDeclaration_0; }
		
		//"Acyclic"
		public Keyword getAcyclicAcyclicKeyword_0_0() { return cAcyclicAcyclicKeyword_0_0; }
		
		//CompartmentType
		public EnumLiteralDeclaration getCompartmentTypeEnumLiteralDeclaration_1() { return cCompartmentTypeEnumLiteralDeclaration_1; }
		
		//"CompartmentType"
		public Keyword getCompartmentTypeCompartmentTypeKeyword_1_0() { return cCompartmentTypeCompartmentTypeKeyword_1_0; }
		
		//Cyclic
		public EnumLiteralDeclaration getCyclicEnumLiteralDeclaration_2() { return cCyclicEnumLiteralDeclaration_2; }
		
		//"Cyclic"
		public Keyword getCyclicCyclicKeyword_2_0() { return cCyclicCyclicKeyword_2_0; }
		
		//DataType
		public EnumLiteralDeclaration getDataTypeEnumLiteralDeclaration_3() { return cDataTypeEnumLiteralDeclaration_3; }
		
		//"DataType"
		public Keyword getDataTypeDataTypeKeyword_3_0() { return cDataTypeDataTypeKeyword_3_0; }
		
		//Fulfillment
		public EnumLiteralDeclaration getFulfillmentEnumLiteralDeclaration_4() { return cFulfillmentEnumLiteralDeclaration_4; }
		
		//"Fulfillment"
		public Keyword getFulfillmentFulfillmentKeyword_4_0() { return cFulfillmentFulfillmentKeyword_4_0; }
		
		//Inheritance
		public EnumLiteralDeclaration getInheritanceEnumLiteralDeclaration_5() { return cInheritanceEnumLiteralDeclaration_5; }
		
		//"Inheritance"
		public Keyword getInheritanceInheritanceKeyword_5_0() { return cInheritanceInheritanceKeyword_5_0; }
		
		//Group
		public EnumLiteralDeclaration getGroupEnumLiteralDeclaration_6() { return cGroupEnumLiteralDeclaration_6; }
		
		//"Group"
		public Keyword getGroupGroupKeyword_6_0() { return cGroupGroupKeyword_6_0; }
		
		//Reflexive
		public EnumLiteralDeclaration getReflexiveEnumLiteralDeclaration_7() { return cReflexiveEnumLiteralDeclaration_7; }
		
		//"Reflexive"
		public Keyword getReflexiveReflexiveKeyword_7_0() { return cReflexiveReflexiveKeyword_7_0; }
		
		//Relationship
		public EnumLiteralDeclaration getRelationshipEnumLiteralDeclaration_8() { return cRelationshipEnumLiteralDeclaration_8; }
		
		//"Relationship"
		public Keyword getRelationshipRelationshipKeyword_8_0() { return cRelationshipRelationshipKeyword_8_0; }
		
		//RelationshipExclusion
		public EnumLiteralDeclaration getRelationshipExclusionEnumLiteralDeclaration_9() { return cRelationshipExclusionEnumLiteralDeclaration_9; }
		
		//"RelationshipExclusion"
		public Keyword getRelationshipExclusionRelationshipExclusionKeyword_9_0() { return cRelationshipExclusionRelationshipExclusionKeyword_9_0; }
		
		//RelationshipImplication
		public EnumLiteralDeclaration getRelationshipImplicationEnumLiteralDeclaration_10() { return cRelationshipImplicationEnumLiteralDeclaration_10; }
		
		//"RelationshipImplication"
		public Keyword getRelationshipImplicationRelationshipImplicationKeyword_10_0() { return cRelationshipImplicationRelationshipImplicationKeyword_10_0; }
		
		//RoleType
		public EnumLiteralDeclaration getRoleTypeEnumLiteralDeclaration_11() { return cRoleTypeEnumLiteralDeclaration_11; }
		
		//"RoleType"
		public Keyword getRoleTypeRoleTypeKeyword_11_0() { return cRoleTypeRoleTypeKeyword_11_0; }
		
		//RoleEquivalence
		public EnumLiteralDeclaration getRoleEquivalenceEnumLiteralDeclaration_12() { return cRoleEquivalenceEnumLiteralDeclaration_12; }
		
		//"RoleEquivalence"
		public Keyword getRoleEquivalenceRoleEquivalenceKeyword_12_0() { return cRoleEquivalenceRoleEquivalenceKeyword_12_0; }
		
		//RoleGroup
		public EnumLiteralDeclaration getRoleGroupEnumLiteralDeclaration_13() { return cRoleGroupEnumLiteralDeclaration_13; }
		
		//"RoleGroup"
		public Keyword getRoleGroupRoleGroupKeyword_13_0() { return cRoleGroupRoleGroupKeyword_13_0; }
		
		//RoleImplication
		public EnumLiteralDeclaration getRoleImplicationEnumLiteralDeclaration_14() { return cRoleImplicationEnumLiteralDeclaration_14; }
		
		//"RoleImplication"
		public Keyword getRoleImplicationRoleImplicationKeyword_14_0() { return cRoleImplicationRoleImplicationKeyword_14_0; }
		
		//RoleProhibition
		public EnumLiteralDeclaration getRoleProhibitionEnumLiteralDeclaration_15() { return cRoleProhibitionEnumLiteralDeclaration_15; }
		
		//"RoleProhibition"
		public Keyword getRoleProhibitionRoleProhibitionKeyword_15_0() { return cRoleProhibitionRoleProhibitionKeyword_15_0; }
		
		//Irreflexive
		public EnumLiteralDeclaration getIrreflexiveEnumLiteralDeclaration_16() { return cIrreflexiveEnumLiteralDeclaration_16; }
		
		//"Irreflexive"
		public Keyword getIrreflexiveIrreflexiveKeyword_16_0() { return cIrreflexiveIrreflexiveKeyword_16_0; }
	}
	
	private final ModelElements pModel;
	private final PolicyElements pPolicy;
	private final ActionEnumElements eActionEnum;
	private final ActionTypeEnumElements eActionTypeEnum;
	private final ConstraintRuleElements pConstraintRule;
	private final FeatureRuleElements pFeatureRule;
	private final IsFeatureRuleElements pIsFeatureRule;
	private final IsFeatureElements pIsFeature;
	private final EStringElements pEString;
	private final StepInRuleElements pStepInRule;
	private final StepInElements pStepIn;
	private final TrueRuleElements pTrueRule;
	private final FalseRuleElements pFalseRule;
	private final FeatureExpressionElements pFeatureExpression;
	private final ImplicationFeatureElements pImplicationFeature;
	private final OrFeatureElements pOrFeature;
	private final AndFeatureElements pAndFeature;
	private final NotFeatureExpressionElements pNotFeatureExpression;
	private final PrimaryFeatureElements pPrimaryFeature;
	private final ConstraintExpressionElements pConstraintExpression;
	private final ImplicationConstraintElements pImplicationConstraint;
	private final OrConstraintElements pOrConstraint;
	private final AndConstraintElements pAndConstraint;
	private final NotConstraintExpressionElements pNotConstraintExpression;
	private final PrimaryConstraintElements pPrimaryConstraint;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPolicy = new PolicyElements();
		this.eActionEnum = new ActionEnumElements();
		this.eActionTypeEnum = new ActionTypeEnumElements();
		this.pConstraintRule = new ConstraintRuleElements();
		this.pFeatureRule = new FeatureRuleElements();
		this.pIsFeatureRule = new IsFeatureRuleElements();
		this.pIsFeature = new IsFeatureElements();
		this.pEString = new EStringElements();
		this.pStepInRule = new StepInRuleElements();
		this.pStepIn = new StepInElements();
		this.pTrueRule = new TrueRuleElements();
		this.pFalseRule = new FalseRuleElements();
		this.pFeatureExpression = new FeatureExpressionElements();
		this.pImplicationFeature = new ImplicationFeatureElements();
		this.pOrFeature = new OrFeatureElements();
		this.pAndFeature = new AndFeatureElements();
		this.pNotFeatureExpression = new NotFeatureExpressionElements();
		this.pPrimaryFeature = new PrimaryFeatureElements();
		this.pConstraintExpression = new ConstraintExpressionElements();
		this.pImplicationConstraint = new ImplicationConstraintElements();
		this.pOrConstraint = new OrConstraintElements();
		this.pAndConstraint = new AndConstraintElements();
		this.pNotConstraintExpression = new NotConstraintExpressionElements();
		this.pPrimaryConstraint = new PrimaryConstraintElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.framed.iorm.editpolicydsl.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	(policies+=Policy policies+=Policy*)?;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Policy:
	//	override?='override' action=ActionEnum actionType=ActionTypeEnum
	//	'{'
	//	featureRule=FeatureExpression '=>' constraintRule=ConstraintExpression
	//	'}';
	public PolicyElements getPolicyAccess() {
		return pPolicy;
	}
	
	public ParserRule getPolicyRule() {
		return getPolicyAccess().getRule();
	}
	
	//enum ActionEnum:
	//	Add | Reconnect | Create | Start;
	public ActionEnumElements getActionEnumAccess() {
		return eActionEnum;
	}
	
	public EnumRule getActionEnumRule() {
		return getActionEnumAccess().getRule();
	}
	
	//enum ActionTypeEnum returns iorm::Type:
	//	Acyclic | CompartmentType | Cyclic | DataType | Fulfillment | Inheritance |
	//	Group | Reflexive | Relationship | RelationshipExclusion | RelationshipImplication |
	//	RoleType | RoleEquivalence | RoleGroup | RoleImplication | RoleProhibition |
	//	Irreflexive;
	public ActionTypeEnumElements getActionTypeEnumAccess() {
		return eActionTypeEnum;
	}
	
	public EnumRule getActionTypeEnumRule() {
		return getActionTypeEnumAccess().getRule();
	}
	
	//ConstraintRule AbstractRule:
	//	StepInRule | TrueRule;
	public ConstraintRuleElements getConstraintRuleAccess() {
		return pConstraintRule;
	}
	
	public ParserRule getConstraintRuleRule() {
		return getConstraintRuleAccess().getRule();
	}
	
	//FeatureRule AbstractRule:
	//	IsFeatureRule | TrueRule;
	public FeatureRuleElements getFeatureRuleAccess() {
		return pFeatureRule;
	}
	
	public ParserRule getFeatureRuleRule() {
		return getFeatureRuleAccess().getRule();
	}
	
	//IsFeatureRule Rule:
	//	{Rule} rule=IsFeature;
	public IsFeatureRuleElements getIsFeatureRuleAccess() {
		return pIsFeatureRule;
	}
	
	public ParserRule getIsFeatureRuleRule() {
		return getIsFeatureRuleAccess().getRule();
	}
	
	//IsFeature:
	//	{IsFeature}
	//	'isFeature';
	public IsFeatureElements getIsFeatureAccess() {
		return pIsFeature;
	}
	
	public ParserRule getIsFeatureRule() {
		return getIsFeatureAccess().getRule();
	}
	
	////(IsFeature.name=>FeatureName);
	////enum FeatureNames returns featuremodel::FeatureName:
	////	On_Relationships;
	////enum EnumType returns
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//StepInRule Rule:
	//	{Rule} rule=StepIn;
	public StepInRuleElements getStepInRuleAccess() {
		return pStepInRule;
	}
	
	public ParserRule getStepInRuleRule() {
		return getStepInRuleAccess().getRule();
	}
	
	//StepIn IsStepIn:
	//	{IsStepIn}
	//	'StepIn';
	public StepInElements getStepInAccess() {
		return pStepIn;
	}
	
	public ParserRule getStepInRule() {
		return getStepInAccess().getRule();
	}
	
	//TrueRule:
	//	{TrueRule}
	//	'true';
	public TrueRuleElements getTrueRuleAccess() {
		return pTrueRule;
	}
	
	public ParserRule getTrueRuleRule() {
		return getTrueRuleAccess().getRule();
	}
	
	//FalseRule:
	//	{FalseRule}
	//	'false';
	public FalseRuleElements getFalseRuleAccess() {
		return pFalseRule;
	}
	
	public ParserRule getFalseRuleRule() {
		return getFalseRuleAccess().getRule();
	}
	
	////expression support for Features
	//FeatureExpression AbstractRule:
	//	OrFeature;
	public FeatureExpressionElements getFeatureExpressionAccess() {
		return pFeatureExpression;
	}
	
	public ParserRule getFeatureExpressionRule() {
		return getFeatureExpressionAccess().getRule();
	}
	
	//ImplicationFeature AbstractRule:
	//	OrFeature ({ImplicationRule.leftRule=current} '=>' rightRule=OrFeature)?;
	public ImplicationFeatureElements getImplicationFeatureAccess() {
		return pImplicationFeature;
	}
	
	public ParserRule getImplicationFeatureRule() {
		return getImplicationFeatureAccess().getRule();
	}
	
	//OrFeature AbstractRule:
	//	AndFeature ({OrRule.rules+=current} '||' rules+=AndFeature)*;
	public OrFeatureElements getOrFeatureAccess() {
		return pOrFeature;
	}
	
	public ParserRule getOrFeatureRule() {
		return getOrFeatureAccess().getRule();
	}
	
	//AndFeature AbstractRule:
	//	NotFeatureExpression ({AndRule.rules+=current} '&&' rules+=NotFeatureExpression)*;
	public AndFeatureElements getAndFeatureAccess() {
		return pAndFeature;
	}
	
	public ParserRule getAndFeatureRule() {
		return getAndFeatureAccess().getRule();
	}
	
	//NotFeatureExpression AbstractRule:
	//	PrimaryFeature | '!' {NotRule} rule=PrimaryFeature;
	public NotFeatureExpressionElements getNotFeatureExpressionAccess() {
		return pNotFeatureExpression;
	}
	
	public ParserRule getNotFeatureExpressionRule() {
		return getNotFeatureExpressionAccess().getRule();
	}
	
	//PrimaryFeature AbstractRule:
	//	FeatureRule | '(' FeatureExpression ')';
	public PrimaryFeatureElements getPrimaryFeatureAccess() {
		return pPrimaryFeature;
	}
	
	public ParserRule getPrimaryFeatureRule() {
		return getPrimaryFeatureAccess().getRule();
	}
	
	////expression support for Constraints
	//ConstraintExpression AbstractRule:
	//	ImplicationConstraint;
	public ConstraintExpressionElements getConstraintExpressionAccess() {
		return pConstraintExpression;
	}
	
	public ParserRule getConstraintExpressionRule() {
		return getConstraintExpressionAccess().getRule();
	}
	
	//ImplicationConstraint AbstractRule:
	//	OrConstraint ({ImplicationRule.leftRule=current} '=>' rightRule=OrConstraint)?;
	public ImplicationConstraintElements getImplicationConstraintAccess() {
		return pImplicationConstraint;
	}
	
	public ParserRule getImplicationConstraintRule() {
		return getImplicationConstraintAccess().getRule();
	}
	
	//OrConstraint AbstractRule:
	//	AndConstraint ({OrRule.rules+=current} '||' rules+=AndConstraint)*;
	public OrConstraintElements getOrConstraintAccess() {
		return pOrConstraint;
	}
	
	public ParserRule getOrConstraintRule() {
		return getOrConstraintAccess().getRule();
	}
	
	//AndConstraint AbstractRule:
	//	NotConstraintExpression ({AndRule.rules+=current} '&&' rules+=NotConstraintExpression)*;
	public AndConstraintElements getAndConstraintAccess() {
		return pAndConstraint;
	}
	
	public ParserRule getAndConstraintRule() {
		return getAndConstraintAccess().getRule();
	}
	
	//NotConstraintExpression AbstractRule:
	//	PrimaryConstraint | '!' {NotRule} rule=PrimaryConstraint;
	public NotConstraintExpressionElements getNotConstraintExpressionAccess() {
		return pNotConstraintExpression;
	}
	
	public ParserRule getNotConstraintExpressionRule() {
		return getNotConstraintExpressionAccess().getRule();
	}
	
	//PrimaryConstraint AbstractRule:
	//	ConstraintRule | '(' ConstraintExpression ')';
	public PrimaryConstraintElements getPrimaryConstraintAccess() {
		return pPrimaryConstraint;
	}
	
	public ParserRule getPrimaryConstraintRule() {
		return getPrimaryConstraintAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
