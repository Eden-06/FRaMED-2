/*
 * generated by Xtext 2.13.0
 */
package org.framed.iorm.editpolicydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPoliciesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPoliciesPolicyParserRuleCall_0_0 = (RuleCall)cPoliciesAssignment_0.eContents().get(0);
		private final Assignment cPoliciesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPoliciesPolicyParserRuleCall_1_0 = (RuleCall)cPoliciesAssignment_1.eContents().get(0);
		
		////import "http://iorm/1.0"  as iorm
		////import "http://iorm.featuremodel/1.0" as featuremodel
		//Model:
		//	(policies+=Policy policies+=Policy*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(policies+=Policy policies+=Policy*)?
		public Group getGroup() { return cGroup; }
		
		//policies+=Policy
		public Assignment getPoliciesAssignment_0() { return cPoliciesAssignment_0; }
		
		//Policy
		public RuleCall getPoliciesPolicyParserRuleCall_0_0() { return cPoliciesPolicyParserRuleCall_0_0; }
		
		//policies+=Policy*
		public Assignment getPoliciesAssignment_1() { return cPoliciesAssignment_1; }
		
		//Policy
		public RuleCall getPoliciesPolicyParserRuleCall_1_0() { return cPoliciesPolicyParserRuleCall_1_0; }
	}
	public class PolicyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.Policy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOverrideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOverrideOverrideKeyword_0_0 = (Keyword)cOverrideAssignment_0.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionActionEnumEnumRuleCall_1_0 = (RuleCall)cActionAssignment_1.eContents().get(0);
		private final Assignment cActionTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionTypeFeatureTypeEnumEnumRuleCall_2_0 = (RuleCall)cActionTypeAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeatureRuleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeatureRuleFeatureExpressionParserRuleCall_4_0 = (RuleCall)cFeatureRuleAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cWhenKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cConstraintRuleAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConstraintRuleConstraintExpressionParserRuleCall_7_0 = (RuleCall)cConstraintRuleAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Policy:
		//	override?='override'? action=ActionEnum actionType=FeatureTypeEnum
		//	'(' featureRule=FeatureExpression ')' 'when' constraintRule=ConstraintExpression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//override?='override'? action=ActionEnum actionType=FeatureTypeEnum '(' featureRule=FeatureExpression ')' 'when'
		//constraintRule=ConstraintExpression ';'
		public Group getGroup() { return cGroup; }
		
		//override?='override'?
		public Assignment getOverrideAssignment_0() { return cOverrideAssignment_0; }
		
		//'override'
		public Keyword getOverrideOverrideKeyword_0_0() { return cOverrideOverrideKeyword_0_0; }
		
		//action=ActionEnum
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//ActionEnum
		public RuleCall getActionActionEnumEnumRuleCall_1_0() { return cActionActionEnumEnumRuleCall_1_0; }
		
		//actionType=FeatureTypeEnum
		public Assignment getActionTypeAssignment_2() { return cActionTypeAssignment_2; }
		
		//FeatureTypeEnum
		public RuleCall getActionTypeFeatureTypeEnumEnumRuleCall_2_0() { return cActionTypeFeatureTypeEnumEnumRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//featureRule=FeatureExpression
		public Assignment getFeatureRuleAssignment_4() { return cFeatureRuleAssignment_4; }
		
		//FeatureExpression
		public RuleCall getFeatureRuleFeatureExpressionParserRuleCall_4_0() { return cFeatureRuleFeatureExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'when'
		public Keyword getWhenKeyword_6() { return cWhenKeyword_6; }
		
		//constraintRule=ConstraintExpression
		public Assignment getConstraintRuleAssignment_7() { return cConstraintRuleAssignment_7; }
		
		//ConstraintExpression
		public RuleCall getConstraintRuleConstraintExpressionParserRuleCall_7_0() { return cConstraintRuleConstraintExpressionParserRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class ConstraintRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.ConstraintRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTrueConstraintRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFalseConstraintRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cContainsCompartmentConstrainRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIsTargetConstraintRuleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIsTargetTypeConstraintRuleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIsSourceTypeConstraintRuleParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIsParentConstraintRuleParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSourceEqualsTargetConstraintRuleParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSourceEqualsTargetTypeConstraintRuleParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cInCompartmentConstraintRuleParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//// ----------------- Constraint Rules ------------------------------//
		//ConstraintRule:
		//	TrueConstraintRule | FalseConstraintRule | ContainsCompartmentConstrainRule | IsTargetConstraintRule |
		//	IsTargetTypeConstraintRule | IsSourceTypeConstraintRule | IsParentConstraintRule | SourceEqualsTargetConstraintRule |
		//	SourceEqualsTargetTypeConstraintRule | InCompartmentConstraintRule;
		@Override public ParserRule getRule() { return rule; }
		
		//TrueConstraintRule | FalseConstraintRule | ContainsCompartmentConstrainRule | IsTargetConstraintRule |
		//IsTargetTypeConstraintRule | IsSourceTypeConstraintRule | IsParentConstraintRule | SourceEqualsTargetConstraintRule |
		//SourceEqualsTargetTypeConstraintRule | InCompartmentConstraintRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TrueConstraintRule
		public RuleCall getTrueConstraintRuleParserRuleCall_0() { return cTrueConstraintRuleParserRuleCall_0; }
		
		//FalseConstraintRule
		public RuleCall getFalseConstraintRuleParserRuleCall_1() { return cFalseConstraintRuleParserRuleCall_1; }
		
		//ContainsCompartmentConstrainRule
		public RuleCall getContainsCompartmentConstrainRuleParserRuleCall_2() { return cContainsCompartmentConstrainRuleParserRuleCall_2; }
		
		//IsTargetConstraintRule
		public RuleCall getIsTargetConstraintRuleParserRuleCall_3() { return cIsTargetConstraintRuleParserRuleCall_3; }
		
		//IsTargetTypeConstraintRule
		public RuleCall getIsTargetTypeConstraintRuleParserRuleCall_4() { return cIsTargetTypeConstraintRuleParserRuleCall_4; }
		
		//IsSourceTypeConstraintRule
		public RuleCall getIsSourceTypeConstraintRuleParserRuleCall_5() { return cIsSourceTypeConstraintRuleParserRuleCall_5; }
		
		//IsParentConstraintRule
		public RuleCall getIsParentConstraintRuleParserRuleCall_6() { return cIsParentConstraintRuleParserRuleCall_6; }
		
		//SourceEqualsTargetConstraintRule
		public RuleCall getSourceEqualsTargetConstraintRuleParserRuleCall_7() { return cSourceEqualsTargetConstraintRuleParserRuleCall_7; }
		
		//SourceEqualsTargetTypeConstraintRule
		public RuleCall getSourceEqualsTargetTypeConstraintRuleParserRuleCall_8() { return cSourceEqualsTargetTypeConstraintRuleParserRuleCall_8; }
		
		//InCompartmentConstraintRule
		public RuleCall getInCompartmentConstraintRuleParserRuleCall_9() { return cInCompartmentConstraintRuleParserRuleCall_9; }
	}
	public class ContainsCompartmentConstrainRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.ContainsCompartmentConstrainRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContainsCompartmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContainsCompartmentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ContainsCompartmentConstrainRule ContainsCompartment:
		//	{ContainsCompartment} 'ContainsCompartment' '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ContainsCompartment} 'ContainsCompartment' '(' ')'
		public Group getGroup() { return cGroup; }
		
		//{ContainsCompartment}
		public Action getContainsCompartmentAction_0() { return cContainsCompartmentAction_0; }
		
		//'ContainsCompartment'
		public Keyword getContainsCompartmentKeyword_1() { return cContainsCompartmentKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class IsTargetTypeConstraintRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.IsTargetTypeConstraintRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsTargetTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsTargetTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeFeatureTypeEnumEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IsTargetTypeConstraintRule IsTargetType:
		//	{IsTargetType} 'IsTargetType' '(' type=FeatureTypeEnum ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{IsTargetType} 'IsTargetType' '(' type=FeatureTypeEnum ')'
		public Group getGroup() { return cGroup; }
		
		//{IsTargetType}
		public Action getIsTargetTypeAction_0() { return cIsTargetTypeAction_0; }
		
		//'IsTargetType'
		public Keyword getIsTargetTypeKeyword_1() { return cIsTargetTypeKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//type=FeatureTypeEnum
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//FeatureTypeEnum
		public RuleCall getTypeFeatureTypeEnumEnumRuleCall_3_0() { return cTypeFeatureTypeEnumEnumRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class IsParentConstraintRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.IsParentConstraintRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsParentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsParentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeFeatureTypeEnumEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IsParentConstraintRule IsParent:
		//	{IsParent} 'IsParent' '(' type=FeatureTypeEnum ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{IsParent} 'IsParent' '(' type=FeatureTypeEnum ')'
		public Group getGroup() { return cGroup; }
		
		//{IsParent}
		public Action getIsParentAction_0() { return cIsParentAction_0; }
		
		//'IsParent'
		public Keyword getIsParentKeyword_1() { return cIsParentKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//type=FeatureTypeEnum
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//FeatureTypeEnum
		public RuleCall getTypeFeatureTypeEnumEnumRuleCall_3_0() { return cTypeFeatureTypeEnumEnumRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class IsSourceTypeConstraintRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.IsSourceTypeConstraintRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsSourceTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsSourceTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeFeatureTypeEnumEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IsSourceTypeConstraintRule IsSourceType:
		//	{IsSourceType} 'IsSourceType' '(' type=FeatureTypeEnum ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{IsSourceType} 'IsSourceType' '(' type=FeatureTypeEnum ')'
		public Group getGroup() { return cGroup; }
		
		//{IsSourceType}
		public Action getIsSourceTypeAction_0() { return cIsSourceTypeAction_0; }
		
		//'IsSourceType'
		public Keyword getIsSourceTypeKeyword_1() { return cIsSourceTypeKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//type=FeatureTypeEnum
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//FeatureTypeEnum
		public RuleCall getTypeFeatureTypeEnumEnumRuleCall_3_0() { return cTypeFeatureTypeEnumEnumRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class IsTargetConstraintRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.IsTargetConstraintRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsTargetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsTargetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeFeatureTypeEnumEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IsTargetConstraintRule IsTarget:
		//	{IsTarget} 'IsTarget' '(' type=FeatureTypeEnum ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{IsTarget} 'IsTarget' '(' type=FeatureTypeEnum ')'
		public Group getGroup() { return cGroup; }
		
		//{IsTarget}
		public Action getIsTargetAction_0() { return cIsTargetAction_0; }
		
		//'IsTarget'
		public Keyword getIsTargetKeyword_1() { return cIsTargetKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//type=FeatureTypeEnum
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//FeatureTypeEnum
		public RuleCall getTypeFeatureTypeEnumEnumRuleCall_3_0() { return cTypeFeatureTypeEnumEnumRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class InCompartmentConstraintRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.InCompartmentConstraintRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInCompartmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInCompartmentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InCompartmentConstraintRule InCompartment:
		//	{InCompartment} 'InCompartment' '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{InCompartment} 'InCompartment' '(' ')'
		public Group getGroup() { return cGroup; }
		
		//{InCompartment}
		public Action getInCompartmentAction_0() { return cInCompartmentAction_0; }
		
		//'InCompartment'
		public Keyword getInCompartmentKeyword_1() { return cInCompartmentKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SourceEqualsTargetConstraintRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.SourceEqualsTargetConstraintRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSourceEqualsTargetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSourceEqualsTargetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SourceEqualsTargetConstraintRule SourceEqualsTarget:
		//	{SourceEqualsTarget} 'SourceEqualsTarget' '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{SourceEqualsTarget} 'SourceEqualsTarget' '(' ')'
		public Group getGroup() { return cGroup; }
		
		//{SourceEqualsTarget}
		public Action getSourceEqualsTargetAction_0() { return cSourceEqualsTargetAction_0; }
		
		//'SourceEqualsTarget'
		public Keyword getSourceEqualsTargetKeyword_1() { return cSourceEqualsTargetKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SourceEqualsTargetTypeConstraintRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.SourceEqualsTargetTypeConstraintRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSourceEqualsTargetTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSourceEqualsTargetTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SourceEqualsTargetTypeConstraintRule SourceEqualsTargetType:
		//	{SourceEqualsTargetType} 'SourceEqualsTargetType' '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{SourceEqualsTargetType} 'SourceEqualsTargetType' '(' ')'
		public Group getGroup() { return cGroup; }
		
		//{SourceEqualsTargetType}
		public Action getSourceEqualsTargetTypeAction_0() { return cSourceEqualsTargetTypeAction_0; }
		
		//'SourceEqualsTargetType'
		public Keyword getSourceEqualsTargetTypeKeyword_1() { return cSourceEqualsTargetTypeKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FeatureRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.FeatureRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIsFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTrueFeatureRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFalseFeatureRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// ----------------- Feature Rules ------------------------------//
		//FeatureRule:
		//	IsFeature | TrueFeatureRule | FalseFeatureRule;
		@Override public ParserRule getRule() { return rule; }
		
		//IsFeature | TrueFeatureRule | FalseFeatureRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IsFeature
		public RuleCall getIsFeatureParserRuleCall_0() { return cIsFeatureParserRuleCall_0; }
		
		//TrueFeatureRule
		public RuleCall getTrueFeatureRuleParserRuleCall_1() { return cTrueFeatureRuleParserRuleCall_1; }
		
		//FalseFeatureRule
		public RuleCall getFalseFeatureRuleParserRuleCall_2() { return cFalseFeatureRuleParserRuleCall_2; }
	}
	public class IsFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.IsFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsFeatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFeatureNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureNameFeatureNameEnumEnumRuleCall_1_0 = (RuleCall)cFeatureNameAssignment_1.eContents().get(0);
		
		//IsFeature:
		//	{IsFeature} featureName=FeatureNameEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//{IsFeature} featureName=FeatureNameEnum
		public Group getGroup() { return cGroup; }
		
		//{IsFeature}
		public Action getIsFeatureAction_0() { return cIsFeatureAction_0; }
		
		//featureName=FeatureNameEnum
		public Assignment getFeatureNameAssignment_1() { return cFeatureNameAssignment_1; }
		
		//FeatureNameEnum
		public RuleCall getFeatureNameFeatureNameEnumEnumRuleCall_1_0() { return cFeatureNameFeatureNameEnumEnumRuleCall_1_0; }
	}
	public class TrueFeatureRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.TrueFeatureRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTrueFeatureRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTrueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// ----------------- Logical Rules ------------------------------//
		//TrueFeatureRule:
		//	{TrueFeatureRule}
		//	'true';
		@Override public ParserRule getRule() { return rule; }
		
		//{TrueFeatureRule} 'true'
		public Group getGroup() { return cGroup; }
		
		//{TrueFeatureRule}
		public Action getTrueFeatureRuleAction_0() { return cTrueFeatureRuleAction_0; }
		
		//'true'
		public Keyword getTrueKeyword_1() { return cTrueKeyword_1; }
	}
	public class TrueConstraintRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.TrueConstraintRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTrueConstraintRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTrueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TrueConstraintRule:
		//	{TrueConstraintRule}
		//	'true';
		@Override public ParserRule getRule() { return rule; }
		
		//{TrueConstraintRule} 'true'
		public Group getGroup() { return cGroup; }
		
		//{TrueConstraintRule}
		public Action getTrueConstraintRuleAction_0() { return cTrueConstraintRuleAction_0; }
		
		//'true'
		public Keyword getTrueKeyword_1() { return cTrueKeyword_1; }
	}
	public class FalseFeatureRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.FalseFeatureRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFalseFeatureRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FalseFeatureRule:
		//	{FalseFeatureRule}
		//	'false';
		@Override public ParserRule getRule() { return rule; }
		
		//{FalseFeatureRule} 'false'
		public Group getGroup() { return cGroup; }
		
		//{FalseFeatureRule}
		public Action getFalseFeatureRuleAction_0() { return cFalseFeatureRuleAction_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class FalseConstraintRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.FalseConstraintRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFalseConstraintRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FalseConstraintRule:
		//	{FalseConstraintRule}
		//	'false';
		@Override public ParserRule getRule() { return rule; }
		
		//{FalseConstraintRule} 'false'
		public Group getGroup() { return cGroup; }
		
		//{FalseConstraintRule}
		public Action getFalseConstraintRuleAction_0() { return cFalseConstraintRuleAction_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class FeatureExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.FeatureExpression");
		private final RuleCall cOrFeatureParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////expression support for Features
		//FeatureExpression FeatureRule:
		//	OrFeature;
		@Override public ParserRule getRule() { return rule; }
		
		//OrFeature
		public RuleCall getOrFeatureParserRuleCall() { return cOrFeatureParserRuleCall; }
	}
	public class ImplicationFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.ImplicationFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrFeatureParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cImplicationFeatureRuleLeftRuleAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightRuleAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRuleOrFeatureParserRuleCall_1_2_0 = (RuleCall)cRightRuleAssignment_1_2.eContents().get(0);
		
		//ImplicationFeature FeatureRule:
		//	OrFeature ({ImplicationFeatureRule.leftRule=current} '=>' rightRule=OrFeature)?;
		@Override public ParserRule getRule() { return rule; }
		
		//OrFeature ({ImplicationFeatureRule.leftRule=current} '=>' rightRule=OrFeature)?
		public Group getGroup() { return cGroup; }
		
		//OrFeature
		public RuleCall getOrFeatureParserRuleCall_0() { return cOrFeatureParserRuleCall_0; }
		
		//({ImplicationFeatureRule.leftRule=current} '=>' rightRule=OrFeature)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ImplicationFeatureRule.leftRule=current}
		public Action getImplicationFeatureRuleLeftRuleAction_1_0() { return cImplicationFeatureRuleLeftRuleAction_1_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1() { return cEqualsSignGreaterThanSignKeyword_1_1; }
		
		//rightRule=OrFeature
		public Assignment getRightRuleAssignment_1_2() { return cRightRuleAssignment_1_2; }
		
		//OrFeature
		public RuleCall getRightRuleOrFeatureParserRuleCall_1_2_0() { return cRightRuleOrFeatureParserRuleCall_1_2_0; }
	}
	public class OrFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.OrFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndFeatureParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrFeatureRuleRulesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRulesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRulesAndFeatureParserRuleCall_1_2_0 = (RuleCall)cRulesAssignment_1_2.eContents().get(0);
		
		//OrFeature FeatureRule:
		//	AndFeature ({OrFeatureRule.rules+=current} 'or' rules+=AndFeature)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndFeature ({OrFeatureRule.rules+=current} 'or' rules+=AndFeature)*
		public Group getGroup() { return cGroup; }
		
		//AndFeature
		public RuleCall getAndFeatureParserRuleCall_0() { return cAndFeatureParserRuleCall_0; }
		
		//({OrFeatureRule.rules+=current} 'or' rules+=AndFeature)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrFeatureRule.rules+=current}
		public Action getOrFeatureRuleRulesAction_1_0() { return cOrFeatureRuleRulesAction_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//rules+=AndFeature
		public Assignment getRulesAssignment_1_2() { return cRulesAssignment_1_2; }
		
		//AndFeature
		public RuleCall getRulesAndFeatureParserRuleCall_1_2_0() { return cRulesAndFeatureParserRuleCall_1_2_0; }
	}
	public class AndFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.AndFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotFeatureExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndFeatureRuleRulesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRulesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRulesNotFeatureExpressionParserRuleCall_1_2_0 = (RuleCall)cRulesAssignment_1_2.eContents().get(0);
		
		//AndFeature FeatureRule:
		//	NotFeatureExpression ({AndFeatureRule.rules+=current} 'and' rules+=NotFeatureExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//NotFeatureExpression ({AndFeatureRule.rules+=current} 'and' rules+=NotFeatureExpression)*
		public Group getGroup() { return cGroup; }
		
		//NotFeatureExpression
		public RuleCall getNotFeatureExpressionParserRuleCall_0() { return cNotFeatureExpressionParserRuleCall_0; }
		
		//({AndFeatureRule.rules+=current} 'and' rules+=NotFeatureExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndFeatureRule.rules+=current}
		public Action getAndFeatureRuleRulesAction_1_0() { return cAndFeatureRuleRulesAction_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//rules+=NotFeatureExpression
		public Assignment getRulesAssignment_1_2() { return cRulesAssignment_1_2; }
		
		//NotFeatureExpression
		public RuleCall getRulesNotFeatureExpressionParserRuleCall_1_2_0() { return cRulesNotFeatureExpressionParserRuleCall_1_2_0; }
	}
	public class NotFeatureExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.NotFeatureExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cNotFeatureRuleAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRulePrimaryFeatureParserRuleCall_1_2_0 = (RuleCall)cRuleAssignment_1_2.eContents().get(0);
		
		//NotFeatureExpression FeatureRule:
		//	PrimaryFeature | '!' {NotFeatureRule} rule=PrimaryFeature;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryFeature | '!' {NotFeatureRule} rule=PrimaryFeature
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryFeature
		public RuleCall getPrimaryFeatureParserRuleCall_0() { return cPrimaryFeatureParserRuleCall_0; }
		
		//'!' {NotFeatureRule} rule=PrimaryFeature
		public Group getGroup_1() { return cGroup_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_0() { return cExclamationMarkKeyword_1_0; }
		
		//{NotFeatureRule}
		public Action getNotFeatureRuleAction_1_1() { return cNotFeatureRuleAction_1_1; }
		
		//rule=PrimaryFeature
		public Assignment getRuleAssignment_1_2() { return cRuleAssignment_1_2; }
		
		//PrimaryFeature
		public RuleCall getRulePrimaryFeatureParserRuleCall_1_2_0() { return cRulePrimaryFeatureParserRuleCall_1_2_0; }
	}
	public class PrimaryFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.PrimaryFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cFeatureExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryFeature FeatureRule:
		//	FeatureRule | '(' FeatureExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureRule | '(' FeatureExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FeatureRule
		public RuleCall getFeatureRuleParserRuleCall_0() { return cFeatureRuleParserRuleCall_0; }
		
		//'(' FeatureExpression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//FeatureExpression
		public RuleCall getFeatureExpressionParserRuleCall_1_1() { return cFeatureExpressionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class ConstraintExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.ConstraintExpression");
		private final RuleCall cImplicationConstraintParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////expression support for Constraints
		//ConstraintExpression ConstraintRule:
		//	ImplicationConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		//ImplicationConstraint
		public RuleCall getImplicationConstraintParserRuleCall() { return cImplicationConstraintParserRuleCall; }
	}
	public class ImplicationConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.ImplicationConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrConstraintParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cImplicationConstraintRuleLeftRuleAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightRuleAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRuleOrConstraintParserRuleCall_1_2_0 = (RuleCall)cRightRuleAssignment_1_2.eContents().get(0);
		
		//ImplicationConstraint ConstraintRule:
		//	OrConstraint ({ImplicationConstraintRule.leftRule=current} '=>' rightRule=OrConstraint)?;
		@Override public ParserRule getRule() { return rule; }
		
		//OrConstraint ({ImplicationConstraintRule.leftRule=current} '=>' rightRule=OrConstraint)?
		public Group getGroup() { return cGroup; }
		
		//OrConstraint
		public RuleCall getOrConstraintParserRuleCall_0() { return cOrConstraintParserRuleCall_0; }
		
		//({ImplicationConstraintRule.leftRule=current} '=>' rightRule=OrConstraint)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ImplicationConstraintRule.leftRule=current}
		public Action getImplicationConstraintRuleLeftRuleAction_1_0() { return cImplicationConstraintRuleLeftRuleAction_1_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1() { return cEqualsSignGreaterThanSignKeyword_1_1; }
		
		//rightRule=OrConstraint
		public Assignment getRightRuleAssignment_1_2() { return cRightRuleAssignment_1_2; }
		
		//OrConstraint
		public RuleCall getRightRuleOrConstraintParserRuleCall_1_2_0() { return cRightRuleOrConstraintParserRuleCall_1_2_0; }
	}
	public class OrConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.OrConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndConstraintParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrConstraintRuleRulesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRulesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRulesAndConstraintParserRuleCall_1_2_0 = (RuleCall)cRulesAssignment_1_2.eContents().get(0);
		
		//OrConstraint ConstraintRule:
		//	AndConstraint ({OrConstraintRule.rules+=current} 'or' rules+=AndConstraint)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndConstraint ({OrConstraintRule.rules+=current} 'or' rules+=AndConstraint)*
		public Group getGroup() { return cGroup; }
		
		//AndConstraint
		public RuleCall getAndConstraintParserRuleCall_0() { return cAndConstraintParserRuleCall_0; }
		
		//({OrConstraintRule.rules+=current} 'or' rules+=AndConstraint)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrConstraintRule.rules+=current}
		public Action getOrConstraintRuleRulesAction_1_0() { return cOrConstraintRuleRulesAction_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//rules+=AndConstraint
		public Assignment getRulesAssignment_1_2() { return cRulesAssignment_1_2; }
		
		//AndConstraint
		public RuleCall getRulesAndConstraintParserRuleCall_1_2_0() { return cRulesAndConstraintParserRuleCall_1_2_0; }
	}
	public class AndConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.AndConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotConstraintExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndConstraintRuleRulesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRulesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRulesNotConstraintExpressionParserRuleCall_1_2_0 = (RuleCall)cRulesAssignment_1_2.eContents().get(0);
		
		//AndConstraint ConstraintRule:
		//	NotConstraintExpression ({AndConstraintRule.rules+=current} 'and' rules+=NotConstraintExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//NotConstraintExpression ({AndConstraintRule.rules+=current} 'and' rules+=NotConstraintExpression)*
		public Group getGroup() { return cGroup; }
		
		//NotConstraintExpression
		public RuleCall getNotConstraintExpressionParserRuleCall_0() { return cNotConstraintExpressionParserRuleCall_0; }
		
		//({AndConstraintRule.rules+=current} 'and' rules+=NotConstraintExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndConstraintRule.rules+=current}
		public Action getAndConstraintRuleRulesAction_1_0() { return cAndConstraintRuleRulesAction_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//rules+=NotConstraintExpression
		public Assignment getRulesAssignment_1_2() { return cRulesAssignment_1_2; }
		
		//NotConstraintExpression
		public RuleCall getRulesNotConstraintExpressionParserRuleCall_1_2_0() { return cRulesNotConstraintExpressionParserRuleCall_1_2_0; }
	}
	public class NotConstraintExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.NotConstraintExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cNotConstraintRuleAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRulePrimaryConstraintParserRuleCall_1_2_0 = (RuleCall)cRuleAssignment_1_2.eContents().get(0);
		
		//NotConstraintExpression ConstraintRule:
		//	PrimaryConstraint | '!' {NotConstraintRule} rule=PrimaryConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryConstraint | '!' {NotConstraintRule} rule=PrimaryConstraint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryConstraint
		public RuleCall getPrimaryConstraintParserRuleCall_0() { return cPrimaryConstraintParserRuleCall_0; }
		
		//'!' {NotConstraintRule} rule=PrimaryConstraint
		public Group getGroup_1() { return cGroup_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_0() { return cExclamationMarkKeyword_1_0; }
		
		//{NotConstraintRule}
		public Action getNotConstraintRuleAction_1_1() { return cNotConstraintRuleAction_1_1; }
		
		//rule=PrimaryConstraint
		public Assignment getRuleAssignment_1_2() { return cRuleAssignment_1_2; }
		
		//PrimaryConstraint
		public RuleCall getRulePrimaryConstraintParserRuleCall_1_2_0() { return cRulePrimaryConstraintParserRuleCall_1_2_0; }
	}
	public class PrimaryConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.PrimaryConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstraintRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cConstraintExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryConstraint ConstraintRule:
		//	ConstraintRule | '(' ConstraintExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//ConstraintRule | '(' ConstraintExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConstraintRule
		public RuleCall getConstraintRuleParserRuleCall_0() { return cConstraintRuleParserRuleCall_0; }
		
		//'(' ConstraintExpression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//ConstraintExpression
		public RuleCall getConstraintExpressionParserRuleCall_1_1() { return cConstraintExpressionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	
	public class ActionEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.ActionEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAddEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAddAddKeyword_0_0 = (Keyword)cAddEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cReconnectEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cReconnectReconnectKeyword_1_0 = (Keyword)cReconnectEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCreateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCreateCreateKeyword_2_0 = (Keyword)cCreateEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cStartEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cStartStartKeyword_3_0 = (Keyword)cStartEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cExecuteEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cExecuteExecuteKeyword_4_0 = (Keyword)cExecuteEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDirect_EditEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDirect_EditDirect_EditKeyword_5_0 = (Keyword)cDirect_EditEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cAdd_PropertyEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cAdd_PropertyAdd_PropertyKeyword_6_0 = (Keyword)cAdd_PropertyEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cCreate_AttributeEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cCreate_AttributeCreate_AttributeKeyword_7_0 = (Keyword)cCreate_AttributeEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cCreate_OperationEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cCreate_OperationCreate_OperationKeyword_8_0 = (Keyword)cCreate_OperationEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cCreate_PropertyEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cCreate_PropertyCreate_PropertyKeyword_9_0 = (Keyword)cCreate_PropertyEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum ActionEnum:
		//	Add | Reconnect | Create | Start | Execute | Direct_Edit | Add_Property | Create_Attribute | Create_Operation |
		//	Create_Property;
		public EnumRule getRule() { return rule; }
		
		//Add | Reconnect | Create | Start | Execute | Direct_Edit | Add_Property | Create_Attribute | Create_Operation |
		//Create_Property
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Add
		public EnumLiteralDeclaration getAddEnumLiteralDeclaration_0() { return cAddEnumLiteralDeclaration_0; }
		
		//"Add"
		public Keyword getAddAddKeyword_0_0() { return cAddAddKeyword_0_0; }
		
		//Reconnect
		public EnumLiteralDeclaration getReconnectEnumLiteralDeclaration_1() { return cReconnectEnumLiteralDeclaration_1; }
		
		//"Reconnect"
		public Keyword getReconnectReconnectKeyword_1_0() { return cReconnectReconnectKeyword_1_0; }
		
		//Create
		public EnumLiteralDeclaration getCreateEnumLiteralDeclaration_2() { return cCreateEnumLiteralDeclaration_2; }
		
		//"Create"
		public Keyword getCreateCreateKeyword_2_0() { return cCreateCreateKeyword_2_0; }
		
		//Start
		public EnumLiteralDeclaration getStartEnumLiteralDeclaration_3() { return cStartEnumLiteralDeclaration_3; }
		
		//"Start"
		public Keyword getStartStartKeyword_3_0() { return cStartStartKeyword_3_0; }
		
		//Execute
		public EnumLiteralDeclaration getExecuteEnumLiteralDeclaration_4() { return cExecuteEnumLiteralDeclaration_4; }
		
		//"Execute"
		public Keyword getExecuteExecuteKeyword_4_0() { return cExecuteExecuteKeyword_4_0; }
		
		//Direct_Edit
		public EnumLiteralDeclaration getDirect_EditEnumLiteralDeclaration_5() { return cDirect_EditEnumLiteralDeclaration_5; }
		
		//"Direct_Edit"
		public Keyword getDirect_EditDirect_EditKeyword_5_0() { return cDirect_EditDirect_EditKeyword_5_0; }
		
		//Add_Property
		public EnumLiteralDeclaration getAdd_PropertyEnumLiteralDeclaration_6() { return cAdd_PropertyEnumLiteralDeclaration_6; }
		
		//"Add_Property"
		public Keyword getAdd_PropertyAdd_PropertyKeyword_6_0() { return cAdd_PropertyAdd_PropertyKeyword_6_0; }
		
		//Create_Attribute
		public EnumLiteralDeclaration getCreate_AttributeEnumLiteralDeclaration_7() { return cCreate_AttributeEnumLiteralDeclaration_7; }
		
		//"Create_Attribute"
		public Keyword getCreate_AttributeCreate_AttributeKeyword_7_0() { return cCreate_AttributeCreate_AttributeKeyword_7_0; }
		
		//Create_Operation
		public EnumLiteralDeclaration getCreate_OperationEnumLiteralDeclaration_8() { return cCreate_OperationEnumLiteralDeclaration_8; }
		
		//"Create_Operation"
		public Keyword getCreate_OperationCreate_OperationKeyword_8_0() { return cCreate_OperationCreate_OperationKeyword_8_0; }
		
		//Create_Property
		public EnumLiteralDeclaration getCreate_PropertyEnumLiteralDeclaration_9() { return cCreate_PropertyEnumLiteralDeclaration_9; }
		
		//"Create_Property"
		public Keyword getCreate_PropertyCreate_PropertyKeyword_9_0() { return cCreate_PropertyCreate_PropertyKeyword_9_0; }
	}
	public class FeatureTypeEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.FeatureTypeEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAcyclicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAcyclicAcyclicKeyword_0_0 = (Keyword)cAcyclicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCompartmentTypeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCompartmentTypeCompartmentTypeKeyword_1_0 = (Keyword)cCompartmentTypeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCyclicEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCyclicCyclicKeyword_2_0 = (Keyword)cCyclicEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDataTypeEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDataTypeDataTypeKeyword_3_0 = (Keyword)cDataTypeEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFulfillmentEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFulfillmentFulfillmentKeyword_4_0 = (Keyword)cFulfillmentEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cInheritanceEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cInheritanceInheritanceKeyword_5_0 = (Keyword)cInheritanceEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cGroupEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cGroupGroupKeyword_6_0 = (Keyword)cGroupEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cReflexiveEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cReflexiveReflexiveKeyword_7_0 = (Keyword)cReflexiveEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cRelationshipEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cRelationshipRelationshipKeyword_8_0 = (Keyword)cRelationshipEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cRelationshipExclusionEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cRelationshipExclusionRelationshipExclusionKeyword_9_0 = (Keyword)cRelationshipExclusionEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cRelationshipImplicationEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cRelationshipImplicationRelationshipImplicationKeyword_10_0 = (Keyword)cRelationshipImplicationEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cRoleTypeEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cRoleTypeRoleTypeKeyword_11_0 = (Keyword)cRoleTypeEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cRoleEquivalenceEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cRoleEquivalenceRoleEquivalenceKeyword_12_0 = (Keyword)cRoleEquivalenceEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cRoleGroupEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cRoleGroupRoleGroupKeyword_13_0 = (Keyword)cRoleGroupEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cRoleImplicationEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cRoleImplicationRoleImplicationKeyword_14_0 = (Keyword)cRoleImplicationEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cRoleProhibitionEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cRoleProhibitionRoleProhibitionKeyword_15_0 = (Keyword)cRoleProhibitionEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cIrreflexiveEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cIrreflexiveIrreflexiveKeyword_16_0 = (Keyword)cIrreflexiveEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cNaturalTypeEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cNaturalTypeNaturalTypeKeyword_17_0 = (Keyword)cNaturalTypeEnumLiteralDeclaration_17.eContents().get(0);
		
		//enum FeatureTypeEnum returns TypeEnum:
		//	Acyclic | CompartmentType | Cyclic | DataType | Fulfillment | Inheritance |
		//	Group | Reflexive | Relationship | RelationshipExclusion | RelationshipImplication |
		//	RoleType | RoleEquivalence | RoleGroup | RoleImplication | RoleProhibition |
		//	Irreflexive | NaturalType;
		public EnumRule getRule() { return rule; }
		
		//Acyclic | CompartmentType | Cyclic | DataType | Fulfillment | Inheritance | Group | Reflexive | Relationship |
		//RelationshipExclusion | RelationshipImplication | RoleType | RoleEquivalence | RoleGroup | RoleImplication |
		//RoleProhibition | Irreflexive | NaturalType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Acyclic
		public EnumLiteralDeclaration getAcyclicEnumLiteralDeclaration_0() { return cAcyclicEnumLiteralDeclaration_0; }
		
		//"Acyclic"
		public Keyword getAcyclicAcyclicKeyword_0_0() { return cAcyclicAcyclicKeyword_0_0; }
		
		//CompartmentType
		public EnumLiteralDeclaration getCompartmentTypeEnumLiteralDeclaration_1() { return cCompartmentTypeEnumLiteralDeclaration_1; }
		
		//"CompartmentType"
		public Keyword getCompartmentTypeCompartmentTypeKeyword_1_0() { return cCompartmentTypeCompartmentTypeKeyword_1_0; }
		
		//Cyclic
		public EnumLiteralDeclaration getCyclicEnumLiteralDeclaration_2() { return cCyclicEnumLiteralDeclaration_2; }
		
		//"Cyclic"
		public Keyword getCyclicCyclicKeyword_2_0() { return cCyclicCyclicKeyword_2_0; }
		
		//DataType
		public EnumLiteralDeclaration getDataTypeEnumLiteralDeclaration_3() { return cDataTypeEnumLiteralDeclaration_3; }
		
		//"DataType"
		public Keyword getDataTypeDataTypeKeyword_3_0() { return cDataTypeDataTypeKeyword_3_0; }
		
		//Fulfillment
		public EnumLiteralDeclaration getFulfillmentEnumLiteralDeclaration_4() { return cFulfillmentEnumLiteralDeclaration_4; }
		
		//"Fulfillment"
		public Keyword getFulfillmentFulfillmentKeyword_4_0() { return cFulfillmentFulfillmentKeyword_4_0; }
		
		//Inheritance
		public EnumLiteralDeclaration getInheritanceEnumLiteralDeclaration_5() { return cInheritanceEnumLiteralDeclaration_5; }
		
		//"Inheritance"
		public Keyword getInheritanceInheritanceKeyword_5_0() { return cInheritanceInheritanceKeyword_5_0; }
		
		//Group
		public EnumLiteralDeclaration getGroupEnumLiteralDeclaration_6() { return cGroupEnumLiteralDeclaration_6; }
		
		//"Group"
		public Keyword getGroupGroupKeyword_6_0() { return cGroupGroupKeyword_6_0; }
		
		//Reflexive
		public EnumLiteralDeclaration getReflexiveEnumLiteralDeclaration_7() { return cReflexiveEnumLiteralDeclaration_7; }
		
		//"Reflexive"
		public Keyword getReflexiveReflexiveKeyword_7_0() { return cReflexiveReflexiveKeyword_7_0; }
		
		//Relationship
		public EnumLiteralDeclaration getRelationshipEnumLiteralDeclaration_8() { return cRelationshipEnumLiteralDeclaration_8; }
		
		//"Relationship"
		public Keyword getRelationshipRelationshipKeyword_8_0() { return cRelationshipRelationshipKeyword_8_0; }
		
		//RelationshipExclusion
		public EnumLiteralDeclaration getRelationshipExclusionEnumLiteralDeclaration_9() { return cRelationshipExclusionEnumLiteralDeclaration_9; }
		
		//"RelationshipExclusion"
		public Keyword getRelationshipExclusionRelationshipExclusionKeyword_9_0() { return cRelationshipExclusionRelationshipExclusionKeyword_9_0; }
		
		//RelationshipImplication
		public EnumLiteralDeclaration getRelationshipImplicationEnumLiteralDeclaration_10() { return cRelationshipImplicationEnumLiteralDeclaration_10; }
		
		//"RelationshipImplication"
		public Keyword getRelationshipImplicationRelationshipImplicationKeyword_10_0() { return cRelationshipImplicationRelationshipImplicationKeyword_10_0; }
		
		//RoleType
		public EnumLiteralDeclaration getRoleTypeEnumLiteralDeclaration_11() { return cRoleTypeEnumLiteralDeclaration_11; }
		
		//"RoleType"
		public Keyword getRoleTypeRoleTypeKeyword_11_0() { return cRoleTypeRoleTypeKeyword_11_0; }
		
		//RoleEquivalence
		public EnumLiteralDeclaration getRoleEquivalenceEnumLiteralDeclaration_12() { return cRoleEquivalenceEnumLiteralDeclaration_12; }
		
		//"RoleEquivalence"
		public Keyword getRoleEquivalenceRoleEquivalenceKeyword_12_0() { return cRoleEquivalenceRoleEquivalenceKeyword_12_0; }
		
		//RoleGroup
		public EnumLiteralDeclaration getRoleGroupEnumLiteralDeclaration_13() { return cRoleGroupEnumLiteralDeclaration_13; }
		
		//"RoleGroup"
		public Keyword getRoleGroupRoleGroupKeyword_13_0() { return cRoleGroupRoleGroupKeyword_13_0; }
		
		//RoleImplication
		public EnumLiteralDeclaration getRoleImplicationEnumLiteralDeclaration_14() { return cRoleImplicationEnumLiteralDeclaration_14; }
		
		//"RoleImplication"
		public Keyword getRoleImplicationRoleImplicationKeyword_14_0() { return cRoleImplicationRoleImplicationKeyword_14_0; }
		
		//RoleProhibition
		public EnumLiteralDeclaration getRoleProhibitionEnumLiteralDeclaration_15() { return cRoleProhibitionEnumLiteralDeclaration_15; }
		
		//"RoleProhibition"
		public Keyword getRoleProhibitionRoleProhibitionKeyword_15_0() { return cRoleProhibitionRoleProhibitionKeyword_15_0; }
		
		//Irreflexive
		public EnumLiteralDeclaration getIrreflexiveEnumLiteralDeclaration_16() { return cIrreflexiveEnumLiteralDeclaration_16; }
		
		//"Irreflexive"
		public Keyword getIrreflexiveIrreflexiveKeyword_16_0() { return cIrreflexiveIrreflexiveKeyword_16_0; }
		
		//NaturalType
		public EnumLiteralDeclaration getNaturalTypeEnumLiteralDeclaration_17() { return cNaturalTypeEnumLiteralDeclaration_17; }
		
		//"NaturalType"
		public Keyword getNaturalTypeNaturalTypeKeyword_17_0() { return cNaturalTypeNaturalTypeKeyword_17_0; }
	}
	public class FeatureNameEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.iorm.editpolicydsl.Dsl.FeatureNameEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCompartment_BehaviorEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCompartment_BehaviorCompartment_BehaviorKeyword_0_0 = (Keyword)cCompartment_BehaviorEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCompartment_InheritanceEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCompartment_InheritanceCompartment_InheritanceKeyword_1_0 = (Keyword)cCompartment_InheritanceEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCompartment_PropertiesEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCompartment_PropertiesCompartment_PropertiesKeyword_2_0 = (Keyword)cCompartment_PropertiesEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCompartment_StructureEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCompartment_StructureCompartment_StructureKeyword_3_0 = (Keyword)cCompartment_StructureEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCompartment_TypesEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCompartment_TypesCompartment_TypesKeyword_4_0 = (Keyword)cCompartment_TypesEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cContains_CompartmentsEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cContains_CompartmentsContains_CompartmentsKeyword_5_0 = (Keyword)cContains_CompartmentsEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cCompartmentsEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cCompartmentsCompartmentsKeyword_6_0 = (Keyword)cCompartmentsEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cData_Type_InheritanceEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cData_Type_InheritanceData_Type_InheritanceKeyword_7_0 = (Keyword)cData_Type_InheritanceEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cData_TypesEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cData_TypesData_TypesKeyword_8_0 = (Keyword)cData_TypesEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cDatesEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cDatesDatesKeyword_9_0 = (Keyword)cDatesEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cDependentEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cDependentDependentKeyword_10_0 = (Keyword)cDependentEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cGroup_ConstraintsEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cGroup_ConstraintsGroup_ConstraintsKeyword_11_0 = (Keyword)cGroup_ConstraintsEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cInter_Relationship_ConstraintsEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cInter_Relationship_ConstraintsInter_Relationship_ConstraintsKeyword_12_0 = (Keyword)cInter_Relationship_ConstraintsEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cIntra_Relationship_ConstraintsEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cIntra_Relationship_ConstraintsIntra_Relationship_ConstraintsKeyword_13_0 = (Keyword)cIntra_Relationship_ConstraintsEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cNaturalsEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cNaturalsNaturalsKeyword_14_0 = (Keyword)cNaturalsEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cOccurrence_ConstraintsEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cOccurrence_ConstraintsOccurrence_ConstraintsKeyword_15_0 = (Keyword)cOccurrence_ConstraintsEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cOn_CompartmentsEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cOn_CompartmentsOn_CompartmentsKeyword_16_0 = (Keyword)cOn_CompartmentsEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cOn_RelationshipsEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cOn_RelationshipsOn_RelationshipsKeyword_17_0 = (Keyword)cOn_RelationshipsEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cParthood_ConstraintsEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cParthood_ConstraintsParthood_ConstraintsKeyword_18_0 = (Keyword)cParthood_ConstraintsEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cParticipantsEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cParticipantsParticipantsKeyword_19_0 = (Keyword)cParticipantsEnumLiteralDeclaration_19.eContents().get(0);
		private final EnumLiteralDeclaration cPlayableEnumLiteralDeclaration_20 = (EnumLiteralDeclaration)cAlternatives.eContents().get(20);
		private final Keyword cPlayablePlayableKeyword_20_0 = (Keyword)cPlayableEnumLiteralDeclaration_20.eContents().get(0);
		private final EnumLiteralDeclaration cPlayable_by_Defining_CompartmentEnumLiteralDeclaration_21 = (EnumLiteralDeclaration)cAlternatives.eContents().get(21);
		private final Keyword cPlayable_by_Defining_CompartmentPlayable_by_Defining_CompartmentKeyword_21_0 = (Keyword)cPlayable_by_Defining_CompartmentEnumLiteralDeclaration_21.eContents().get(0);
		private final EnumLiteralDeclaration cPlayersEnumLiteralDeclaration_22 = (EnumLiteralDeclaration)cAlternatives.eContents().get(22);
		private final Keyword cPlayersPlayersKeyword_22_0 = (Keyword)cPlayersEnumLiteralDeclaration_22.eContents().get(0);
		private final EnumLiteralDeclaration cRelationship_CardinalityEnumLiteralDeclaration_23 = (EnumLiteralDeclaration)cAlternatives.eContents().get(23);
		private final Keyword cRelationship_CardinalityRelationship_CardinalityKeyword_23_0 = (Keyword)cRelationship_CardinalityEnumLiteralDeclaration_23.eContents().get(0);
		private final EnumLiteralDeclaration cRelationship_ConstraintsEnumLiteralDeclaration_24 = (EnumLiteralDeclaration)cAlternatives.eContents().get(24);
		private final Keyword cRelationship_ConstraintsRelationship_ConstraintsKeyword_24_0 = (Keyword)cRelationship_ConstraintsEnumLiteralDeclaration_24.eContents().get(0);
		private final EnumLiteralDeclaration cRelationshipsEnumLiteralDeclaration_25 = (EnumLiteralDeclaration)cAlternatives.eContents().get(25);
		private final Keyword cRelationshipsRelationshipsKeyword_25_0 = (Keyword)cRelationshipsEnumLiteralDeclaration_25.eContents().get(0);
		private final EnumLiteralDeclaration cRML_Feature_ModelEnumLiteralDeclaration_26 = (EnumLiteralDeclaration)cAlternatives.eContents().get(26);
		private final Keyword cRML_Feature_ModelRML_Feature_ModelKeyword_26_0 = (Keyword)cRML_Feature_ModelEnumLiteralDeclaration_26.eContents().get(0);
		private final EnumLiteralDeclaration cRole_BehaviorEnumLiteralDeclaration_27 = (EnumLiteralDeclaration)cAlternatives.eContents().get(27);
		private final Keyword cRole_BehaviorRole_BehaviorKeyword_27_0 = (Keyword)cRole_BehaviorEnumLiteralDeclaration_27.eContents().get(0);
		private final EnumLiteralDeclaration cRole_ConstraintsEnumLiteralDeclaration_28 = (EnumLiteralDeclaration)cAlternatives.eContents().get(28);
		private final Keyword cRole_ConstraintsRole_ConstraintsKeyword_28_0 = (Keyword)cRole_ConstraintsEnumLiteralDeclaration_28.eContents().get(0);
		private final EnumLiteralDeclaration cRole_EquivalenceEnumLiteralDeclaration_29 = (EnumLiteralDeclaration)cAlternatives.eContents().get(29);
		private final Keyword cRole_EquivalenceRole_EquivalenceKeyword_29_0 = (Keyword)cRole_EquivalenceEnumLiteralDeclaration_29.eContents().get(0);
		private final EnumLiteralDeclaration cRole_ImplicationEnumLiteralDeclaration_30 = (EnumLiteralDeclaration)cAlternatives.eContents().get(30);
		private final Keyword cRole_ImplicationRole_ImplicationKeyword_30_0 = (Keyword)cRole_ImplicationEnumLiteralDeclaration_30.eContents().get(0);
		private final EnumLiteralDeclaration cRole_InheritanceEnumLiteralDeclaration_31 = (EnumLiteralDeclaration)cAlternatives.eContents().get(31);
		private final Keyword cRole_InheritanceRole_InheritanceKeyword_31_0 = (Keyword)cRole_InheritanceEnumLiteralDeclaration_31.eContents().get(0);
		private final EnumLiteralDeclaration cRole_ProhibitionEnumLiteralDeclaration_32 = (EnumLiteralDeclaration)cAlternatives.eContents().get(32);
		private final Keyword cRole_ProhibitionRole_ProhibitionKeyword_32_0 = (Keyword)cRole_ProhibitionEnumLiteralDeclaration_32.eContents().get(0);
		private final EnumLiteralDeclaration cRole_PropertiesEnumLiteralDeclaration_33 = (EnumLiteralDeclaration)cAlternatives.eContents().get(33);
		private final Keyword cRole_PropertiesRole_PropertiesKeyword_33_0 = (Keyword)cRole_PropertiesEnumLiteralDeclaration_33.eContents().get(0);
		private final EnumLiteralDeclaration cRole_StructureEnumLiteralDeclaration_34 = (EnumLiteralDeclaration)cAlternatives.eContents().get(34);
		private final Keyword cRole_StructureRole_StructureKeyword_34_0 = (Keyword)cRole_StructureEnumLiteralDeclaration_34.eContents().get(0);
		private final EnumLiteralDeclaration cRole_TypesEnumLiteralDeclaration_35 = (EnumLiteralDeclaration)cAlternatives.eContents().get(35);
		private final Keyword cRole_TypesRole_TypesKeyword_35_0 = (Keyword)cRole_TypesEnumLiteralDeclaration_35.eContents().get(0);
		private final EnumLiteralDeclaration cRolesEnumLiteralDeclaration_36 = (EnumLiteralDeclaration)cAlternatives.eContents().get(36);
		private final Keyword cRolesRolesKeyword_36_0 = (Keyword)cRolesEnumLiteralDeclaration_36.eContents().get(0);
		
		//enum FeatureNameEnum:
		//	Compartment_Behavior | Compartment_Inheritance | Compartment_Properties | Compartment_Structure |
		//	Compartment_Types | Contains_Compartments | Compartments |
		//	Data_Type_Inheritance | Data_Types | Dates | Dependent |
		//	Group_Constraints | Inter_Relationship_Constraints | Intra_Relationship_Constraints |
		//	Naturals | Occurrence_Constraints | On_Compartments | On_Relationships |
		//	Parthood_Constraints | Participants | Playable | Playable_by_Defining_Compartment | Players |
		//	Relationship_Cardinality | Relationship_Constraints | Relationships | RML_Feature_Model |
		//	Role_Behavior | Role_Constraints | Role_Equivalence | Role_Implication | Role_Inheritance |
		//	Role_Prohibition | Role_Properties | Role_Structure | Role_Types | Roles;
		public EnumRule getRule() { return rule; }
		
		//Compartment_Behavior | Compartment_Inheritance | Compartment_Properties | Compartment_Structure | Compartment_Types |
		//Contains_Compartments | Compartments | Data_Type_Inheritance | Data_Types | Dates | Dependent | Group_Constraints |
		//Inter_Relationship_Constraints | Intra_Relationship_Constraints | Naturals | Occurrence_Constraints | On_Compartments |
		//On_Relationships | Parthood_Constraints | Participants | Playable | Playable_by_Defining_Compartment | Players |
		//Relationship_Cardinality | Relationship_Constraints | Relationships | RML_Feature_Model | Role_Behavior |
		//Role_Constraints | Role_Equivalence | Role_Implication | Role_Inheritance | Role_Prohibition | Role_Properties |
		//Role_Structure | Role_Types | Roles
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Compartment_Behavior
		public EnumLiteralDeclaration getCompartment_BehaviorEnumLiteralDeclaration_0() { return cCompartment_BehaviorEnumLiteralDeclaration_0; }
		
		//"Compartment_Behavior"
		public Keyword getCompartment_BehaviorCompartment_BehaviorKeyword_0_0() { return cCompartment_BehaviorCompartment_BehaviorKeyword_0_0; }
		
		//Compartment_Inheritance
		public EnumLiteralDeclaration getCompartment_InheritanceEnumLiteralDeclaration_1() { return cCompartment_InheritanceEnumLiteralDeclaration_1; }
		
		//"Compartment_Inheritance"
		public Keyword getCompartment_InheritanceCompartment_InheritanceKeyword_1_0() { return cCompartment_InheritanceCompartment_InheritanceKeyword_1_0; }
		
		//Compartment_Properties
		public EnumLiteralDeclaration getCompartment_PropertiesEnumLiteralDeclaration_2() { return cCompartment_PropertiesEnumLiteralDeclaration_2; }
		
		//"Compartment_Properties"
		public Keyword getCompartment_PropertiesCompartment_PropertiesKeyword_2_0() { return cCompartment_PropertiesCompartment_PropertiesKeyword_2_0; }
		
		//Compartment_Structure
		public EnumLiteralDeclaration getCompartment_StructureEnumLiteralDeclaration_3() { return cCompartment_StructureEnumLiteralDeclaration_3; }
		
		//"Compartment_Structure"
		public Keyword getCompartment_StructureCompartment_StructureKeyword_3_0() { return cCompartment_StructureCompartment_StructureKeyword_3_0; }
		
		//Compartment_Types
		public EnumLiteralDeclaration getCompartment_TypesEnumLiteralDeclaration_4() { return cCompartment_TypesEnumLiteralDeclaration_4; }
		
		//"Compartment_Types"
		public Keyword getCompartment_TypesCompartment_TypesKeyword_4_0() { return cCompartment_TypesCompartment_TypesKeyword_4_0; }
		
		//Contains_Compartments
		public EnumLiteralDeclaration getContains_CompartmentsEnumLiteralDeclaration_5() { return cContains_CompartmentsEnumLiteralDeclaration_5; }
		
		//"Contains_Compartments"
		public Keyword getContains_CompartmentsContains_CompartmentsKeyword_5_0() { return cContains_CompartmentsContains_CompartmentsKeyword_5_0; }
		
		//Compartments
		public EnumLiteralDeclaration getCompartmentsEnumLiteralDeclaration_6() { return cCompartmentsEnumLiteralDeclaration_6; }
		
		//"Compartments"
		public Keyword getCompartmentsCompartmentsKeyword_6_0() { return cCompartmentsCompartmentsKeyword_6_0; }
		
		//Data_Type_Inheritance
		public EnumLiteralDeclaration getData_Type_InheritanceEnumLiteralDeclaration_7() { return cData_Type_InheritanceEnumLiteralDeclaration_7; }
		
		//"Data_Type_Inheritance"
		public Keyword getData_Type_InheritanceData_Type_InheritanceKeyword_7_0() { return cData_Type_InheritanceData_Type_InheritanceKeyword_7_0; }
		
		//Data_Types
		public EnumLiteralDeclaration getData_TypesEnumLiteralDeclaration_8() { return cData_TypesEnumLiteralDeclaration_8; }
		
		//"Data_Types"
		public Keyword getData_TypesData_TypesKeyword_8_0() { return cData_TypesData_TypesKeyword_8_0; }
		
		//Dates
		public EnumLiteralDeclaration getDatesEnumLiteralDeclaration_9() { return cDatesEnumLiteralDeclaration_9; }
		
		//"Dates"
		public Keyword getDatesDatesKeyword_9_0() { return cDatesDatesKeyword_9_0; }
		
		//Dependent
		public EnumLiteralDeclaration getDependentEnumLiteralDeclaration_10() { return cDependentEnumLiteralDeclaration_10; }
		
		//"Dependent"
		public Keyword getDependentDependentKeyword_10_0() { return cDependentDependentKeyword_10_0; }
		
		//Group_Constraints
		public EnumLiteralDeclaration getGroup_ConstraintsEnumLiteralDeclaration_11() { return cGroup_ConstraintsEnumLiteralDeclaration_11; }
		
		//"Group_Constraints"
		public Keyword getGroup_ConstraintsGroup_ConstraintsKeyword_11_0() { return cGroup_ConstraintsGroup_ConstraintsKeyword_11_0; }
		
		//Inter_Relationship_Constraints
		public EnumLiteralDeclaration getInter_Relationship_ConstraintsEnumLiteralDeclaration_12() { return cInter_Relationship_ConstraintsEnumLiteralDeclaration_12; }
		
		//"Inter_Relationship_Constraints"
		public Keyword getInter_Relationship_ConstraintsInter_Relationship_ConstraintsKeyword_12_0() { return cInter_Relationship_ConstraintsInter_Relationship_ConstraintsKeyword_12_0; }
		
		//Intra_Relationship_Constraints
		public EnumLiteralDeclaration getIntra_Relationship_ConstraintsEnumLiteralDeclaration_13() { return cIntra_Relationship_ConstraintsEnumLiteralDeclaration_13; }
		
		//"Intra_Relationship_Constraints"
		public Keyword getIntra_Relationship_ConstraintsIntra_Relationship_ConstraintsKeyword_13_0() { return cIntra_Relationship_ConstraintsIntra_Relationship_ConstraintsKeyword_13_0; }
		
		//Naturals
		public EnumLiteralDeclaration getNaturalsEnumLiteralDeclaration_14() { return cNaturalsEnumLiteralDeclaration_14; }
		
		//"Naturals"
		public Keyword getNaturalsNaturalsKeyword_14_0() { return cNaturalsNaturalsKeyword_14_0; }
		
		//Occurrence_Constraints
		public EnumLiteralDeclaration getOccurrence_ConstraintsEnumLiteralDeclaration_15() { return cOccurrence_ConstraintsEnumLiteralDeclaration_15; }
		
		//"Occurrence_Constraints"
		public Keyword getOccurrence_ConstraintsOccurrence_ConstraintsKeyword_15_0() { return cOccurrence_ConstraintsOccurrence_ConstraintsKeyword_15_0; }
		
		//On_Compartments
		public EnumLiteralDeclaration getOn_CompartmentsEnumLiteralDeclaration_16() { return cOn_CompartmentsEnumLiteralDeclaration_16; }
		
		//"On_Compartments"
		public Keyword getOn_CompartmentsOn_CompartmentsKeyword_16_0() { return cOn_CompartmentsOn_CompartmentsKeyword_16_0; }
		
		//On_Relationships
		public EnumLiteralDeclaration getOn_RelationshipsEnumLiteralDeclaration_17() { return cOn_RelationshipsEnumLiteralDeclaration_17; }
		
		//"On_Relationships"
		public Keyword getOn_RelationshipsOn_RelationshipsKeyword_17_0() { return cOn_RelationshipsOn_RelationshipsKeyword_17_0; }
		
		//Parthood_Constraints
		public EnumLiteralDeclaration getParthood_ConstraintsEnumLiteralDeclaration_18() { return cParthood_ConstraintsEnumLiteralDeclaration_18; }
		
		//"Parthood_Constraints"
		public Keyword getParthood_ConstraintsParthood_ConstraintsKeyword_18_0() { return cParthood_ConstraintsParthood_ConstraintsKeyword_18_0; }
		
		//Participants
		public EnumLiteralDeclaration getParticipantsEnumLiteralDeclaration_19() { return cParticipantsEnumLiteralDeclaration_19; }
		
		//"Participants"
		public Keyword getParticipantsParticipantsKeyword_19_0() { return cParticipantsParticipantsKeyword_19_0; }
		
		//Playable
		public EnumLiteralDeclaration getPlayableEnumLiteralDeclaration_20() { return cPlayableEnumLiteralDeclaration_20; }
		
		//"Playable"
		public Keyword getPlayablePlayableKeyword_20_0() { return cPlayablePlayableKeyword_20_0; }
		
		//Playable_by_Defining_Compartment
		public EnumLiteralDeclaration getPlayable_by_Defining_CompartmentEnumLiteralDeclaration_21() { return cPlayable_by_Defining_CompartmentEnumLiteralDeclaration_21; }
		
		//"Playable_by_Defining_Compartment"
		public Keyword getPlayable_by_Defining_CompartmentPlayable_by_Defining_CompartmentKeyword_21_0() { return cPlayable_by_Defining_CompartmentPlayable_by_Defining_CompartmentKeyword_21_0; }
		
		//Players
		public EnumLiteralDeclaration getPlayersEnumLiteralDeclaration_22() { return cPlayersEnumLiteralDeclaration_22; }
		
		//"Players"
		public Keyword getPlayersPlayersKeyword_22_0() { return cPlayersPlayersKeyword_22_0; }
		
		//Relationship_Cardinality
		public EnumLiteralDeclaration getRelationship_CardinalityEnumLiteralDeclaration_23() { return cRelationship_CardinalityEnumLiteralDeclaration_23; }
		
		//"Relationship_Cardinality"
		public Keyword getRelationship_CardinalityRelationship_CardinalityKeyword_23_0() { return cRelationship_CardinalityRelationship_CardinalityKeyword_23_0; }
		
		//Relationship_Constraints
		public EnumLiteralDeclaration getRelationship_ConstraintsEnumLiteralDeclaration_24() { return cRelationship_ConstraintsEnumLiteralDeclaration_24; }
		
		//"Relationship_Constraints"
		public Keyword getRelationship_ConstraintsRelationship_ConstraintsKeyword_24_0() { return cRelationship_ConstraintsRelationship_ConstraintsKeyword_24_0; }
		
		//Relationships
		public EnumLiteralDeclaration getRelationshipsEnumLiteralDeclaration_25() { return cRelationshipsEnumLiteralDeclaration_25; }
		
		//"Relationships"
		public Keyword getRelationshipsRelationshipsKeyword_25_0() { return cRelationshipsRelationshipsKeyword_25_0; }
		
		//RML_Feature_Model
		public EnumLiteralDeclaration getRML_Feature_ModelEnumLiteralDeclaration_26() { return cRML_Feature_ModelEnumLiteralDeclaration_26; }
		
		//"RML_Feature_Model"
		public Keyword getRML_Feature_ModelRML_Feature_ModelKeyword_26_0() { return cRML_Feature_ModelRML_Feature_ModelKeyword_26_0; }
		
		//Role_Behavior
		public EnumLiteralDeclaration getRole_BehaviorEnumLiteralDeclaration_27() { return cRole_BehaviorEnumLiteralDeclaration_27; }
		
		//"Role_Behavior"
		public Keyword getRole_BehaviorRole_BehaviorKeyword_27_0() { return cRole_BehaviorRole_BehaviorKeyword_27_0; }
		
		//Role_Constraints
		public EnumLiteralDeclaration getRole_ConstraintsEnumLiteralDeclaration_28() { return cRole_ConstraintsEnumLiteralDeclaration_28; }
		
		//"Role_Constraints"
		public Keyword getRole_ConstraintsRole_ConstraintsKeyword_28_0() { return cRole_ConstraintsRole_ConstraintsKeyword_28_0; }
		
		//Role_Equivalence
		public EnumLiteralDeclaration getRole_EquivalenceEnumLiteralDeclaration_29() { return cRole_EquivalenceEnumLiteralDeclaration_29; }
		
		//"Role_Equivalence"
		public Keyword getRole_EquivalenceRole_EquivalenceKeyword_29_0() { return cRole_EquivalenceRole_EquivalenceKeyword_29_0; }
		
		//Role_Implication
		public EnumLiteralDeclaration getRole_ImplicationEnumLiteralDeclaration_30() { return cRole_ImplicationEnumLiteralDeclaration_30; }
		
		//"Role_Implication"
		public Keyword getRole_ImplicationRole_ImplicationKeyword_30_0() { return cRole_ImplicationRole_ImplicationKeyword_30_0; }
		
		//Role_Inheritance
		public EnumLiteralDeclaration getRole_InheritanceEnumLiteralDeclaration_31() { return cRole_InheritanceEnumLiteralDeclaration_31; }
		
		//"Role_Inheritance"
		public Keyword getRole_InheritanceRole_InheritanceKeyword_31_0() { return cRole_InheritanceRole_InheritanceKeyword_31_0; }
		
		//Role_Prohibition
		public EnumLiteralDeclaration getRole_ProhibitionEnumLiteralDeclaration_32() { return cRole_ProhibitionEnumLiteralDeclaration_32; }
		
		//"Role_Prohibition"
		public Keyword getRole_ProhibitionRole_ProhibitionKeyword_32_0() { return cRole_ProhibitionRole_ProhibitionKeyword_32_0; }
		
		//Role_Properties
		public EnumLiteralDeclaration getRole_PropertiesEnumLiteralDeclaration_33() { return cRole_PropertiesEnumLiteralDeclaration_33; }
		
		//"Role_Properties"
		public Keyword getRole_PropertiesRole_PropertiesKeyword_33_0() { return cRole_PropertiesRole_PropertiesKeyword_33_0; }
		
		//Role_Structure
		public EnumLiteralDeclaration getRole_StructureEnumLiteralDeclaration_34() { return cRole_StructureEnumLiteralDeclaration_34; }
		
		//"Role_Structure"
		public Keyword getRole_StructureRole_StructureKeyword_34_0() { return cRole_StructureRole_StructureKeyword_34_0; }
		
		//Role_Types
		public EnumLiteralDeclaration getRole_TypesEnumLiteralDeclaration_35() { return cRole_TypesEnumLiteralDeclaration_35; }
		
		//"Role_Types"
		public Keyword getRole_TypesRole_TypesKeyword_35_0() { return cRole_TypesRole_TypesKeyword_35_0; }
		
		//Roles
		public EnumLiteralDeclaration getRolesEnumLiteralDeclaration_36() { return cRolesEnumLiteralDeclaration_36; }
		
		//"Roles"
		public Keyword getRolesRolesKeyword_36_0() { return cRolesRolesKeyword_36_0; }
	}
	
	private final ModelElements pModel;
	private final PolicyElements pPolicy;
	private final ActionEnumElements eActionEnum;
	private final FeatureTypeEnumElements eFeatureTypeEnum;
	private final FeatureNameEnumElements eFeatureNameEnum;
	private final ConstraintRuleElements pConstraintRule;
	private final ContainsCompartmentConstrainRuleElements pContainsCompartmentConstrainRule;
	private final IsTargetTypeConstraintRuleElements pIsTargetTypeConstraintRule;
	private final IsParentConstraintRuleElements pIsParentConstraintRule;
	private final IsSourceTypeConstraintRuleElements pIsSourceTypeConstraintRule;
	private final IsTargetConstraintRuleElements pIsTargetConstraintRule;
	private final InCompartmentConstraintRuleElements pInCompartmentConstraintRule;
	private final SourceEqualsTargetConstraintRuleElements pSourceEqualsTargetConstraintRule;
	private final SourceEqualsTargetTypeConstraintRuleElements pSourceEqualsTargetTypeConstraintRule;
	private final FeatureRuleElements pFeatureRule;
	private final IsFeatureElements pIsFeature;
	private final TrueFeatureRuleElements pTrueFeatureRule;
	private final TrueConstraintRuleElements pTrueConstraintRule;
	private final FalseFeatureRuleElements pFalseFeatureRule;
	private final FalseConstraintRuleElements pFalseConstraintRule;
	private final EStringElements pEString;
	private final FeatureExpressionElements pFeatureExpression;
	private final ImplicationFeatureElements pImplicationFeature;
	private final OrFeatureElements pOrFeature;
	private final AndFeatureElements pAndFeature;
	private final NotFeatureExpressionElements pNotFeatureExpression;
	private final PrimaryFeatureElements pPrimaryFeature;
	private final ConstraintExpressionElements pConstraintExpression;
	private final ImplicationConstraintElements pImplicationConstraint;
	private final OrConstraintElements pOrConstraint;
	private final AndConstraintElements pAndConstraint;
	private final NotConstraintExpressionElements pNotConstraintExpression;
	private final PrimaryConstraintElements pPrimaryConstraint;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPolicy = new PolicyElements();
		this.eActionEnum = new ActionEnumElements();
		this.eFeatureTypeEnum = new FeatureTypeEnumElements();
		this.eFeatureNameEnum = new FeatureNameEnumElements();
		this.pConstraintRule = new ConstraintRuleElements();
		this.pContainsCompartmentConstrainRule = new ContainsCompartmentConstrainRuleElements();
		this.pIsTargetTypeConstraintRule = new IsTargetTypeConstraintRuleElements();
		this.pIsParentConstraintRule = new IsParentConstraintRuleElements();
		this.pIsSourceTypeConstraintRule = new IsSourceTypeConstraintRuleElements();
		this.pIsTargetConstraintRule = new IsTargetConstraintRuleElements();
		this.pInCompartmentConstraintRule = new InCompartmentConstraintRuleElements();
		this.pSourceEqualsTargetConstraintRule = new SourceEqualsTargetConstraintRuleElements();
		this.pSourceEqualsTargetTypeConstraintRule = new SourceEqualsTargetTypeConstraintRuleElements();
		this.pFeatureRule = new FeatureRuleElements();
		this.pIsFeature = new IsFeatureElements();
		this.pTrueFeatureRule = new TrueFeatureRuleElements();
		this.pTrueConstraintRule = new TrueConstraintRuleElements();
		this.pFalseFeatureRule = new FalseFeatureRuleElements();
		this.pFalseConstraintRule = new FalseConstraintRuleElements();
		this.pEString = new EStringElements();
		this.pFeatureExpression = new FeatureExpressionElements();
		this.pImplicationFeature = new ImplicationFeatureElements();
		this.pOrFeature = new OrFeatureElements();
		this.pAndFeature = new AndFeatureElements();
		this.pNotFeatureExpression = new NotFeatureExpressionElements();
		this.pPrimaryFeature = new PrimaryFeatureElements();
		this.pConstraintExpression = new ConstraintExpressionElements();
		this.pImplicationConstraint = new ImplicationConstraintElements();
		this.pOrConstraint = new OrConstraintElements();
		this.pAndConstraint = new AndConstraintElements();
		this.pNotConstraintExpression = new NotConstraintExpressionElements();
		this.pPrimaryConstraint = new PrimaryConstraintElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.framed.iorm.editpolicydsl.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////import "http://iorm/1.0"  as iorm
	////import "http://iorm.featuremodel/1.0" as featuremodel
	//Model:
	//	(policies+=Policy policies+=Policy*)?;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Policy:
	//	override?='override'? action=ActionEnum actionType=FeatureTypeEnum
	//	'(' featureRule=FeatureExpression ')' 'when' constraintRule=ConstraintExpression ';';
	public PolicyElements getPolicyAccess() {
		return pPolicy;
	}
	
	public ParserRule getPolicyRule() {
		return getPolicyAccess().getRule();
	}
	
	//enum ActionEnum:
	//	Add | Reconnect | Create | Start | Execute | Direct_Edit | Add_Property | Create_Attribute | Create_Operation |
	//	Create_Property;
	public ActionEnumElements getActionEnumAccess() {
		return eActionEnum;
	}
	
	public EnumRule getActionEnumRule() {
		return getActionEnumAccess().getRule();
	}
	
	//enum FeatureTypeEnum returns TypeEnum:
	//	Acyclic | CompartmentType | Cyclic | DataType | Fulfillment | Inheritance |
	//	Group | Reflexive | Relationship | RelationshipExclusion | RelationshipImplication |
	//	RoleType | RoleEquivalence | RoleGroup | RoleImplication | RoleProhibition |
	//	Irreflexive | NaturalType;
	public FeatureTypeEnumElements getFeatureTypeEnumAccess() {
		return eFeatureTypeEnum;
	}
	
	public EnumRule getFeatureTypeEnumRule() {
		return getFeatureTypeEnumAccess().getRule();
	}
	
	//enum FeatureNameEnum:
	//	Compartment_Behavior | Compartment_Inheritance | Compartment_Properties | Compartment_Structure |
	//	Compartment_Types | Contains_Compartments | Compartments |
	//	Data_Type_Inheritance | Data_Types | Dates | Dependent |
	//	Group_Constraints | Inter_Relationship_Constraints | Intra_Relationship_Constraints |
	//	Naturals | Occurrence_Constraints | On_Compartments | On_Relationships |
	//	Parthood_Constraints | Participants | Playable | Playable_by_Defining_Compartment | Players |
	//	Relationship_Cardinality | Relationship_Constraints | Relationships | RML_Feature_Model |
	//	Role_Behavior | Role_Constraints | Role_Equivalence | Role_Implication | Role_Inheritance |
	//	Role_Prohibition | Role_Properties | Role_Structure | Role_Types | Roles;
	public FeatureNameEnumElements getFeatureNameEnumAccess() {
		return eFeatureNameEnum;
	}
	
	public EnumRule getFeatureNameEnumRule() {
		return getFeatureNameEnumAccess().getRule();
	}
	
	//// ----------------- Constraint Rules ------------------------------//
	//ConstraintRule:
	//	TrueConstraintRule | FalseConstraintRule | ContainsCompartmentConstrainRule | IsTargetConstraintRule |
	//	IsTargetTypeConstraintRule | IsSourceTypeConstraintRule | IsParentConstraintRule | SourceEqualsTargetConstraintRule |
	//	SourceEqualsTargetTypeConstraintRule | InCompartmentConstraintRule;
	public ConstraintRuleElements getConstraintRuleAccess() {
		return pConstraintRule;
	}
	
	public ParserRule getConstraintRuleRule() {
		return getConstraintRuleAccess().getRule();
	}
	
	//ContainsCompartmentConstrainRule ContainsCompartment:
	//	{ContainsCompartment} 'ContainsCompartment' '(' ')';
	public ContainsCompartmentConstrainRuleElements getContainsCompartmentConstrainRuleAccess() {
		return pContainsCompartmentConstrainRule;
	}
	
	public ParserRule getContainsCompartmentConstrainRuleRule() {
		return getContainsCompartmentConstrainRuleAccess().getRule();
	}
	
	//IsTargetTypeConstraintRule IsTargetType:
	//	{IsTargetType} 'IsTargetType' '(' type=FeatureTypeEnum ')';
	public IsTargetTypeConstraintRuleElements getIsTargetTypeConstraintRuleAccess() {
		return pIsTargetTypeConstraintRule;
	}
	
	public ParserRule getIsTargetTypeConstraintRuleRule() {
		return getIsTargetTypeConstraintRuleAccess().getRule();
	}
	
	//IsParentConstraintRule IsParent:
	//	{IsParent} 'IsParent' '(' type=FeatureTypeEnum ')';
	public IsParentConstraintRuleElements getIsParentConstraintRuleAccess() {
		return pIsParentConstraintRule;
	}
	
	public ParserRule getIsParentConstraintRuleRule() {
		return getIsParentConstraintRuleAccess().getRule();
	}
	
	//IsSourceTypeConstraintRule IsSourceType:
	//	{IsSourceType} 'IsSourceType' '(' type=FeatureTypeEnum ')';
	public IsSourceTypeConstraintRuleElements getIsSourceTypeConstraintRuleAccess() {
		return pIsSourceTypeConstraintRule;
	}
	
	public ParserRule getIsSourceTypeConstraintRuleRule() {
		return getIsSourceTypeConstraintRuleAccess().getRule();
	}
	
	//IsTargetConstraintRule IsTarget:
	//	{IsTarget} 'IsTarget' '(' type=FeatureTypeEnum ')';
	public IsTargetConstraintRuleElements getIsTargetConstraintRuleAccess() {
		return pIsTargetConstraintRule;
	}
	
	public ParserRule getIsTargetConstraintRuleRule() {
		return getIsTargetConstraintRuleAccess().getRule();
	}
	
	//InCompartmentConstraintRule InCompartment:
	//	{InCompartment} 'InCompartment' '(' ')';
	public InCompartmentConstraintRuleElements getInCompartmentConstraintRuleAccess() {
		return pInCompartmentConstraintRule;
	}
	
	public ParserRule getInCompartmentConstraintRuleRule() {
		return getInCompartmentConstraintRuleAccess().getRule();
	}
	
	//SourceEqualsTargetConstraintRule SourceEqualsTarget:
	//	{SourceEqualsTarget} 'SourceEqualsTarget' '(' ')';
	public SourceEqualsTargetConstraintRuleElements getSourceEqualsTargetConstraintRuleAccess() {
		return pSourceEqualsTargetConstraintRule;
	}
	
	public ParserRule getSourceEqualsTargetConstraintRuleRule() {
		return getSourceEqualsTargetConstraintRuleAccess().getRule();
	}
	
	//SourceEqualsTargetTypeConstraintRule SourceEqualsTargetType:
	//	{SourceEqualsTargetType} 'SourceEqualsTargetType' '(' ')';
	public SourceEqualsTargetTypeConstraintRuleElements getSourceEqualsTargetTypeConstraintRuleAccess() {
		return pSourceEqualsTargetTypeConstraintRule;
	}
	
	public ParserRule getSourceEqualsTargetTypeConstraintRuleRule() {
		return getSourceEqualsTargetTypeConstraintRuleAccess().getRule();
	}
	
	//// ----------------- Feature Rules ------------------------------//
	//FeatureRule:
	//	IsFeature | TrueFeatureRule | FalseFeatureRule;
	public FeatureRuleElements getFeatureRuleAccess() {
		return pFeatureRule;
	}
	
	public ParserRule getFeatureRuleRule() {
		return getFeatureRuleAccess().getRule();
	}
	
	//IsFeature:
	//	{IsFeature} featureName=FeatureNameEnum;
	public IsFeatureElements getIsFeatureAccess() {
		return pIsFeature;
	}
	
	public ParserRule getIsFeatureRule() {
		return getIsFeatureAccess().getRule();
	}
	
	//// ----------------- Logical Rules ------------------------------//
	//TrueFeatureRule:
	//	{TrueFeatureRule}
	//	'true';
	public TrueFeatureRuleElements getTrueFeatureRuleAccess() {
		return pTrueFeatureRule;
	}
	
	public ParserRule getTrueFeatureRuleRule() {
		return getTrueFeatureRuleAccess().getRule();
	}
	
	//TrueConstraintRule:
	//	{TrueConstraintRule}
	//	'true';
	public TrueConstraintRuleElements getTrueConstraintRuleAccess() {
		return pTrueConstraintRule;
	}
	
	public ParserRule getTrueConstraintRuleRule() {
		return getTrueConstraintRuleAccess().getRule();
	}
	
	//FalseFeatureRule:
	//	{FalseFeatureRule}
	//	'false';
	public FalseFeatureRuleElements getFalseFeatureRuleAccess() {
		return pFalseFeatureRule;
	}
	
	public ParserRule getFalseFeatureRuleRule() {
		return getFalseFeatureRuleAccess().getRule();
	}
	
	//FalseConstraintRule:
	//	{FalseConstraintRule}
	//	'false';
	public FalseConstraintRuleElements getFalseConstraintRuleAccess() {
		return pFalseConstraintRule;
	}
	
	public ParserRule getFalseConstraintRuleRule() {
		return getFalseConstraintRuleAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	////expression support for Features
	//FeatureExpression FeatureRule:
	//	OrFeature;
	public FeatureExpressionElements getFeatureExpressionAccess() {
		return pFeatureExpression;
	}
	
	public ParserRule getFeatureExpressionRule() {
		return getFeatureExpressionAccess().getRule();
	}
	
	//ImplicationFeature FeatureRule:
	//	OrFeature ({ImplicationFeatureRule.leftRule=current} '=>' rightRule=OrFeature)?;
	public ImplicationFeatureElements getImplicationFeatureAccess() {
		return pImplicationFeature;
	}
	
	public ParserRule getImplicationFeatureRule() {
		return getImplicationFeatureAccess().getRule();
	}
	
	//OrFeature FeatureRule:
	//	AndFeature ({OrFeatureRule.rules+=current} 'or' rules+=AndFeature)*;
	public OrFeatureElements getOrFeatureAccess() {
		return pOrFeature;
	}
	
	public ParserRule getOrFeatureRule() {
		return getOrFeatureAccess().getRule();
	}
	
	//AndFeature FeatureRule:
	//	NotFeatureExpression ({AndFeatureRule.rules+=current} 'and' rules+=NotFeatureExpression)*;
	public AndFeatureElements getAndFeatureAccess() {
		return pAndFeature;
	}
	
	public ParserRule getAndFeatureRule() {
		return getAndFeatureAccess().getRule();
	}
	
	//NotFeatureExpression FeatureRule:
	//	PrimaryFeature | '!' {NotFeatureRule} rule=PrimaryFeature;
	public NotFeatureExpressionElements getNotFeatureExpressionAccess() {
		return pNotFeatureExpression;
	}
	
	public ParserRule getNotFeatureExpressionRule() {
		return getNotFeatureExpressionAccess().getRule();
	}
	
	//PrimaryFeature FeatureRule:
	//	FeatureRule | '(' FeatureExpression ')';
	public PrimaryFeatureElements getPrimaryFeatureAccess() {
		return pPrimaryFeature;
	}
	
	public ParserRule getPrimaryFeatureRule() {
		return getPrimaryFeatureAccess().getRule();
	}
	
	////expression support for Constraints
	//ConstraintExpression ConstraintRule:
	//	ImplicationConstraint;
	public ConstraintExpressionElements getConstraintExpressionAccess() {
		return pConstraintExpression;
	}
	
	public ParserRule getConstraintExpressionRule() {
		return getConstraintExpressionAccess().getRule();
	}
	
	//ImplicationConstraint ConstraintRule:
	//	OrConstraint ({ImplicationConstraintRule.leftRule=current} '=>' rightRule=OrConstraint)?;
	public ImplicationConstraintElements getImplicationConstraintAccess() {
		return pImplicationConstraint;
	}
	
	public ParserRule getImplicationConstraintRule() {
		return getImplicationConstraintAccess().getRule();
	}
	
	//OrConstraint ConstraintRule:
	//	AndConstraint ({OrConstraintRule.rules+=current} 'or' rules+=AndConstraint)*;
	public OrConstraintElements getOrConstraintAccess() {
		return pOrConstraint;
	}
	
	public ParserRule getOrConstraintRule() {
		return getOrConstraintAccess().getRule();
	}
	
	//AndConstraint ConstraintRule:
	//	NotConstraintExpression ({AndConstraintRule.rules+=current} 'and' rules+=NotConstraintExpression)*;
	public AndConstraintElements getAndConstraintAccess() {
		return pAndConstraint;
	}
	
	public ParserRule getAndConstraintRule() {
		return getAndConstraintAccess().getRule();
	}
	
	//NotConstraintExpression ConstraintRule:
	//	PrimaryConstraint | '!' {NotConstraintRule} rule=PrimaryConstraint;
	public NotConstraintExpressionElements getNotConstraintExpressionAccess() {
		return pNotConstraintExpression;
	}
	
	public ParserRule getNotConstraintExpressionRule() {
		return getNotConstraintExpressionAccess().getRule();
	}
	
	//PrimaryConstraint ConstraintRule:
	//	ConstraintRule | '(' ConstraintExpression ')';
	public PrimaryConstraintElements getPrimaryConstraintAccess() {
		return pPrimaryConstraint;
	}
	
	public ParserRule getPrimaryConstraintRule() {
		return getPrimaryConstraintAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
