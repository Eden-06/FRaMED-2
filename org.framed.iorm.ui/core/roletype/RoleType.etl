import "../CardinalityParser.eol";

/*
 * The abstract rule for role types executes all actions done for all role types with and without 
 * attributes/operations.
 */
@abstract
rule RoleType
	transform s : source!Shape
	to t : target!RoleType {
		guard : s.getType==(source!Type#RoleType) 	
		//set name 
		t.name = s.name;
		//only transform if the role type is in a compartment type
		if(s.getContainer().getParent().getType==(source!Type#CompartmentType)) {
			//get the crom equivalent to compartment type the role type is in
			var compartmentType = s.getContainer.getParent().equivalent();
			//create a new part with the role
			var part = new target!Part;
			part.role = t;
			part.whole = compartmentType;
			//parse the lower and upper bound from the role
			var desc = s.description;
			if (not (desc == null) and s.~features.get("Occurrence_Constraints")) {
				var card = desc.name;
				var cards = parseCardinality(card);
				//set lower and upper bound
				if(cards.size()>0) {
					part.lower = cards[0];
					if(cards.size()>1) {
						part.upper = cards[1];
			}	}	}
			//add the part to the compartment type the role type is in
			compartmentType.getParts().add(part);
		}
}


