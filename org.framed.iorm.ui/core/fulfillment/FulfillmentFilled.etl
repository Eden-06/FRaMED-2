import "Fulfillment.etl";

/**
 * deletes the fulfillments with a inner compartment type (in another compartment type) as a filled object if 
 * inner compartment types aren't transformed
 */
@lazy
rule FulfillmentNoContainsCompartment
	transform s : source!Relation
	to t : Sequence(target!Fulfillment)
	extends Fulfillment {
		guard : s.target.getType==(source!Type#CompartmentType) and 
				not(s.target.getContainer().getParent() == null) and
				s.target.getContainer().getParent().getType()==(source!Type#CompartmentType) and
				not(s.~features.get("Contains_Compartments"))
		
		for(fulfillment : target!Fulfillment in s.~transformed) {
			delete(fulfillment);
		}	
		s.~transformed.clear();
}

/**
 * TODO
 * deletes the fulfillments with a inner compartment type (in another compartment type) as a filled object if 
 * inner compartment types aren't transformed
 */
@lazy
rule FulfillmentNoRoleGroups
	transform s : source!Relation
	to t : Sequence(target!Fulfillment)
	extends Fulfillment {
		guard : s.target.getType==(source!Type#CompartmentType) and 
				fulfillmentFillsRoleGroup(s) and
				not(s.~features.get("Group_Constraints"))
		
		var fulfillmentsToDelete : OrderedSet(target!Fulfillment);
		for(fulfillment : target!Fulfillment in s.~transformed) {
			if(fulfillment.filled.instanceOf(target!RoleGroup))
				fulfillmentsToDelete.add(fulfillment); 
		}	
		for(fulfillment : target!Fulfillment in fulfillmentsToDelete) {
			delete(fulfillment);
			s.~transformed.remove(fulfillment);
		}
}

@lazy
rule FulfillmentWithOutFiller
	transform s : source!Relation
	to t : Sequence(target!Fulfillment)
	extends Fulfillment {
		guard : s.target.getType==(source!Type#CompartmentType)
		
		var fulfillmentsToDelete : OrderedSet(target!Fulfillment);
		for(fulfillment : target!Fulfillment in s.~transformed) {
			if(fulfillment.filled == null) {
				fulfillment.filled.println();
				fulfillmentsToDelete.add(fulfillment); }
				
		}	
		for(fulfillment : target!Fulfillment in fulfillmentsToDelete) {
			delete(fulfillment);
			s.~transformed.remove(fulfillment);
		}
}			

operation fulfillmentFillsRoleGroup(s: source!Relation):Boolean {
	for(roles : source!Shape in s.getReferencedRoles) {
		if(roles.getType==source!Type#RoleGroup)
			return true;
	}
	return false;
}

