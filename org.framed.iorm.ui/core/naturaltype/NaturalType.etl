import "Type.etl";

pre NaturalType {
	var naturalTypes : OrderedSet(source!Shape);
}

/**
 * Transforms a shape with type NATURAL_TYPE.
 */
 @lazy 
rule NaturalType
	transform s : source!Shape
	to t : target!NaturalType {
	guard : s.getType==(source!Type#NaturalType)
	
	t.name = s.name;
	
	naturalTypes.add(s);	
}

/**
 * Add operations and attributes in the post processing step. 
 *
 * This separation is necessary as the type references in attributes and operations may form cycles between 
 * types/shapes. The post block ensures that these cycles can be resolved.
 */
post NaturalType {
	for (s : source!Shape in naturalTypes) {		
		var t = s.equivalent();
		
		//TODO fix test better
		if (not t.isDefined() or not s.isDefined()) {
			continue;
		}
		
		s.addAttributes(t);
		s.addOperations(t);		
	}
}
