import "Type.etl";

//creates a set used for iorm shapes later in the rule
pre DataType {
	var dataTypes : OrderedSet(source!Shape);
}

/**
 * Transforms a shape with type DATA_TYPE.
 */
@lazy 
rule DataType
	transform s : source!Shape
	to t : target!DataType {
		guard : s.getType==(source!Type#DataType) and 
				s.~features.get("Data_Types")
		
		//set name
		t.name = s.name;
		dataTypes.add(s);
}

/**
 * Add operations and attributes in the post processing step.
 *
 * This separation is necessary as the type references in attributes and operations may form cycles between
 * types/shapes. The post block ensures that these cycles can be resolved.
 */
post DataType {
	for (s : source!Shape in dataTypes) {
		var t = s.equivalent();
		if (t.isDefined() and s.isDefined()) {
			s.addAttributes(t);
			s.addOperations(t);
	}	}
}