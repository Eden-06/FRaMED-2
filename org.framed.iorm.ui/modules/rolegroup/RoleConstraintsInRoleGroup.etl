/**
 * the abstract rule for role constraints executes all actions done for all types of role constraints
 */
@abstract 
rule RoleConstraintInRG
	transform s : source!Relation
	to t : target!RoleConstraint {	
		//feature Group_Constraints implies feature Role_Constraints (not to check)
		guard: s.~features.get("Group_Constraints") and
			   (s.getType==(source!Type#RoleImplication) or
			    s.getType==(source!Type#RoleProhibition) or
			    s.getType==(source!Type#RoleEquivalence)) and
			   associatedWithRoleGroup(s)
		
		//only transform if the role type is in a compartment type
		if(s.getContainer().getParent().getType==(source!Type#CompartmentType)) {
			//get the crom equivalent to compartment type the role type is in
			var compartmentType = s.getContainer.getParent().equivalent();
			//set the roles of the constraint
			s.source.~features=s.~features;
			t.first ::= s.source;
			s.target.~features=s.~features;
			t.second ::= s.target;	
			//add constraint to the compartment type it is in
			compartmentType.getConstraints().add(t);
}	 	}

operation associatedWithRoleGroup(s:source!Relation) : Boolean {
	//source or target is a role group
	if(s.getSource().getType()==(source!Type#RoleGroup) or
	   s.getTarget().getType()==(source!Type#RoleGroup))
	   return true;
	//if the role constraint is between two roles in a rolegroup
	if(s.getSource().getContainer().getParent().getType()==(source!Type#RoleGroup)) 
		return true;
	return false;	   
}

// transforms role implications
@lazy 
rule RoleImplicationInRG
	transform s : source!Relation
	to t : target!RoleImplication 
	extends RoleConstraintInRG {
		guard : s.getType==(source!Type#RoleImplication) and
	 			s.~features.get("Role_Implication") 
}

// transforms role prohibitions
@lazy 
rule RoleProhibitionInRG
	transform s : source!Relation
	to t : target!RoleProhibition 
	extends RoleConstraintInRG {
		guard : s.getType==(source!Type#RoleProhibition) and
				s.~features.get("Role_Prohibition") 
}

// transforms role equivalences
@lazy 
rule RoleEquivalenceInRG
	transform s : source!Relation
	to t : target!RoleEquivalence 
	extends RoleConstraintInRG {
		guard : s.getType==(source!Type#RoleEquivalence) and 
				s.~features.get("Role_Equivalence")
}