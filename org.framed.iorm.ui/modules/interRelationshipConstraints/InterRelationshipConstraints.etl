/*
 * The abstract rule for inter rel cons executes all actions done for all types of inter rel cons.
 */
@abstract 
rule InterRelationshipConstraint
	transform s : source!Relation
	to t : target!RelationshipExclusion {
		guard : s.~features.get("Inter_Relationship_Constraints")
		
		//only transform if the inter relationship constraint is in a compartment type
		if(s.getContainer().getParent().getType==(source!Type#CompartmentType)) {
			//get the crom equivalent to compartment type the inter relationship constraint is in
			var compartmentType = s.getContainer.getParent().equivalent();
			//set the relationships of the constraint
			s.source.~features = s.~features;
			t.first ::= s.source;
			s.target.~features = s.~features;
			t.second ::= s.target;
			//add the inter relationship constraint to the compartment type it is in
			compartmentType.getConstraints().add(t);
}		}

//transforms relationship implications 
@lazy 
rule RelationshipImplication
	transform s : source!Relation
	to t : target!RelationshipImplication
	extends InterRelationshipConstraint {
		guard : s.getType==(source!Type#RelationshipImplication)
}

//transforms relations exclusions
@lazy 
rule RelationshipExclusion
	transform s : source!Relation
	to t : target!RelationshipExclusion 
	extends InterRelationshipConstraint {
		guard : s.getType==(source!Type#RelationshipExclusion)
}