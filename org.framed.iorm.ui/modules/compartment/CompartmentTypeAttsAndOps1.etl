import "CompartmentType1.etl";

/**
 * Transforms a compartment type when attributes and operation are not enabled
 */
@lazy 
rule CompartmentTypeWithoutAttAndOps1
	transform s : source!Shape
	to t : target!CompartmentType
	extends CompartmentType1 {
		//feature Compartment_Behavior implies feature Compartment_Properties and Compartment_Structure (not to check)	
		guard : not(s.~features.get("Compartment_Behavior"))
		
		//deletes the own transformed shaped if its not the same as the one of the super rule
		if(not(s.~transformed == t)) delete(t);
}

//creates a set used for iorm shapes later in the post rule
pre CompartmentTypeWithAttAndOps1 {
	var compartmentTypes : OrderedSet(source!Shape);
}

/**
 * Transforms a compartment type when attributes and operation are enabled
 */
@lazy 
rule CompartmentTypeWithAttAndOps1
	transform s : source!Shape
	to t : target!CompartmentType
	extends CompartmentType1 {
		//feature Compartment_Behavior implies feature Compartment_Properties and Compartment_Structure (not to check)	
		guard : s.~features.get("Compartment_Behavior")
		
		compartmentTypes.add(s);
		//deletes the own transformed shaped if its not the same as the one of the super rule
		if(not(s.~transformed == t)) delete(t);
}

/**
 * Add operations and attributes in the post processing step.
 *
 * This separation is necessary as the type references in attributes and operations may form cycles between
 * types/shapes. The post block ensures that these cycles can be resolved.
 */
post CompartmentTypeWithAttAndOps1 {
	for (s : source!Shape in compartmentTypes) {
		if (s.isDefined()) {
			s.addAttributes(s.~transformed);
		    s.addOperations(s.~transformed);
	}	}	
}