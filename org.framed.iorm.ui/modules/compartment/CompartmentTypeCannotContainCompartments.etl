import "CompartmentTypeWithAttsAndOps.etl";
import "CompartmentTypeWithoutAttsAndOps.etl";

/**
 * The abstract rule for compartment type executes actions for kinds compartment types. 
 */
@lazy
rule CompartmentTypeCannotContainCompartments1
	transform s : source!Shape
	to t : target!CompartmentType 
	extends CompartmentTypeWithAttAndOps {
		guard : not(s.~features.get("Contains_Compartments"))
 		
 		if(not(s.getModel() == null)) {
 			for (elem : source!ModelElement in s.getModel().elements) {	
				//if the children is another compartment type
				if(elem.getType==(source!Type#CompartmentType)) {
					var e = elem.equivalent();
					if(not(e == null)) {
						delete(e);
		}	}	}	}
}

/**
 * The abstract rule for compartment type executes actions for kinds compartment types. 
 */
@lazy
rule CompartmentTypeCannotContainCompartments2
	transform s : source!Shape
	to t : target!CompartmentType 
	extends CompartmentTypeWithoutAttAndOps {
		guard : not(s.~features.get("Contains_Compartments"))
 		
 		if(not(s.getModel() == null)) {
 			for (elem : source!ModelElement in s.getModel().elements) {	
				//if the children is another compartment type
				if(elem.getType==(source!Type#CompartmentType)) {
					var e = elem.equivalent();
					if(not(e == null)) {
						delete(e);
		}	}	}	}
}
