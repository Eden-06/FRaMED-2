import "CompartmentType.etl";

/**
 * Transforms a compartment type when attributes and operation are not enabled
 */
@abstract 
rule CompartmentTypeWithoutAttAndOps
	transform s : source!Shape
	to t : target!CompartmentType
	extends CompartmentType {
		//feature Compartment_Behavior implies feature Compartment_Properties and Compartment_Structure (not to check)	
		guard : not(s.~features.get("Compartment_Behavior"))
}

//creates a set used for iorm shapes later in the post rule
pre CompartmentTypeWithAttAndOps {
	var compartmentTypes : OrderedSet(source!Shape);
}

/**
 * Transforms a compartment type when attributes and operation are enabled
 */
@abstract 
rule CompartmentTypeWithAttAndOps
	transform s : source!Shape
	to t : target!CompartmentType
	extends CompartmentType {
		//feature Compartment_Behavior implies feature Compartment_Properties and Compartment_Structure (not to check)	
		guard : s.~features.get("Compartment_Behavior")
		
		compartmentTypes.add(s);
}

/**
 * Add operations and attributes in the post processing step.
 *
 * This separation is necessary as the type references in attributes and operations may form cycles between
 * types/shapes. The post block ensures that these cycles can be resolved.
 */
post CompartmentTypeWithAttAndOps {
	for (s : source!Shape in compartmentTypes) {
		var t = s.equivalent();
		if (t.isDefined() and s.isDefined()) {
			s.addAttributes(t);
		    s.addOperations(t);
	}	}	
}