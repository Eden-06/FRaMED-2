/*
 * generated by Xtext 2.13.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.framed.iorm.editpolicydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.framed.iorm.editpolicydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.framed.iorm.editpolicydsl.services.DslGrammarAccess;

}
@parser::members {
	private DslGrammarAccess grammarAccess;

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)?
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePolicy
entryRulePolicy
:
{ before(grammarAccess.getPolicyRule()); }
	 rulePolicy
{ after(grammarAccess.getPolicyRule()); } 
	 EOF 
;

// Rule Policy
rulePolicy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPolicyAccess().getGroup()); }
		(rule__Policy__Group__0)
		{ after(grammarAccess.getPolicyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraintRule
entryRuleConstraintRule
:
{ before(grammarAccess.getConstraintRuleRule()); }
	 ruleConstraintRule
{ after(grammarAccess.getConstraintRuleRule()); } 
	 EOF 
;

// Rule ConstraintRule
ruleConstraintRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintRuleAccess().getAlternatives()); }
		(rule__ConstraintRule__Alternatives)
		{ after(grammarAccess.getConstraintRuleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeatureRule
entryRuleFeatureRule
:
{ before(grammarAccess.getFeatureRuleRule()); }
	 ruleFeatureRule
{ after(grammarAccess.getFeatureRuleRule()); } 
	 EOF 
;

// Rule FeatureRule
ruleFeatureRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureRuleAccess().getAlternatives()); }
		(rule__FeatureRule__Alternatives)
		{ after(grammarAccess.getFeatureRuleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIsFeatureRule
entryRuleIsFeatureRule
:
{ before(grammarAccess.getIsFeatureRuleRule()); }
	 ruleIsFeatureRule
{ after(grammarAccess.getIsFeatureRuleRule()); } 
	 EOF 
;

// Rule IsFeatureRule
ruleIsFeatureRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIsFeatureRuleAccess().getGroup()); }
		(rule__IsFeatureRule__Group__0)
		{ after(grammarAccess.getIsFeatureRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIsFeature
entryRuleIsFeature
:
{ before(grammarAccess.getIsFeatureRule()); }
	 ruleIsFeature
{ after(grammarAccess.getIsFeatureRule()); } 
	 EOF 
;

// Rule IsFeature
ruleIsFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIsFeatureAccess().getGroup()); }
		(rule__IsFeature__Group__0)
		{ after(grammarAccess.getIsFeatureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStepInRule
entryRuleStepInRule
:
{ before(grammarAccess.getStepInRuleRule()); }
	 ruleStepInRule
{ after(grammarAccess.getStepInRuleRule()); } 
	 EOF 
;

// Rule StepInRule
ruleStepInRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStepInRuleAccess().getGroup()); }
		(rule__StepInRule__Group__0)
		{ after(grammarAccess.getStepInRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStepIn
entryRuleStepIn
:
{ before(grammarAccess.getStepInRule()); }
	 ruleStepIn
{ after(grammarAccess.getStepInRule()); } 
	 EOF 
;

// Rule StepIn
ruleStepIn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStepInAccess().getGroup()); }
		(rule__StepIn__Group__0)
		{ after(grammarAccess.getStepInAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTrueRule
entryRuleTrueRule
:
{ before(grammarAccess.getTrueRuleRule()); }
	 ruleTrueRule
{ after(grammarAccess.getTrueRuleRule()); } 
	 EOF 
;

// Rule TrueRule
ruleTrueRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTrueRuleAccess().getGroup()); }
		(rule__TrueRule__Group__0)
		{ after(grammarAccess.getTrueRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeatureExpression
entryRuleFeatureExpression
:
{ before(grammarAccess.getFeatureExpressionRule()); }
	 ruleFeatureExpression
{ after(grammarAccess.getFeatureExpressionRule()); } 
	 EOF 
;

// Rule FeatureExpression
ruleFeatureExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureExpressionAccess().getOrFeatureParserRuleCall()); }
		ruleOrFeature
		{ after(grammarAccess.getFeatureExpressionAccess().getOrFeatureParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrFeature
entryRuleOrFeature
:
{ before(grammarAccess.getOrFeatureRule()); }
	 ruleOrFeature
{ after(grammarAccess.getOrFeatureRule()); } 
	 EOF 
;

// Rule OrFeature
ruleOrFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrFeatureAccess().getGroup()); }
		(rule__OrFeature__Group__0)
		{ after(grammarAccess.getOrFeatureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndFeature
entryRuleAndFeature
:
{ before(grammarAccess.getAndFeatureRule()); }
	 ruleAndFeature
{ after(grammarAccess.getAndFeatureRule()); } 
	 EOF 
;

// Rule AndFeature
ruleAndFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndFeatureAccess().getGroup()); }
		(rule__AndFeature__Group__0)
		{ after(grammarAccess.getAndFeatureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNotFeatureExpression
entryRuleNotFeatureExpression
:
{ before(grammarAccess.getNotFeatureExpressionRule()); }
	 ruleNotFeatureExpression
{ after(grammarAccess.getNotFeatureExpressionRule()); } 
	 EOF 
;

// Rule NotFeatureExpression
ruleNotFeatureExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotFeatureExpressionAccess().getAlternatives()); }
		(rule__NotFeatureExpression__Alternatives)
		{ after(grammarAccess.getNotFeatureExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryFeature
entryRulePrimaryFeature
:
{ before(grammarAccess.getPrimaryFeatureRule()); }
	 rulePrimaryFeature
{ after(grammarAccess.getPrimaryFeatureRule()); } 
	 EOF 
;

// Rule PrimaryFeature
rulePrimaryFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryFeatureAccess().getAlternatives()); }
		(rule__PrimaryFeature__Alternatives)
		{ after(grammarAccess.getPrimaryFeatureAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraintExpression
entryRuleConstraintExpression
:
{ before(grammarAccess.getConstraintExpressionRule()); }
	 ruleConstraintExpression
{ after(grammarAccess.getConstraintExpressionRule()); } 
	 EOF 
;

// Rule ConstraintExpression
ruleConstraintExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintExpressionAccess().getImplicationConstraintParserRuleCall()); }
		ruleImplicationConstraint
		{ after(grammarAccess.getConstraintExpressionAccess().getImplicationConstraintParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImplicationConstraint
entryRuleImplicationConstraint
:
{ before(grammarAccess.getImplicationConstraintRule()); }
	 ruleImplicationConstraint
{ after(grammarAccess.getImplicationConstraintRule()); } 
	 EOF 
;

// Rule ImplicationConstraint
ruleImplicationConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImplicationConstraintAccess().getGroup()); }
		(rule__ImplicationConstraint__Group__0)
		{ after(grammarAccess.getImplicationConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrConstraint
entryRuleOrConstraint
:
{ before(grammarAccess.getOrConstraintRule()); }
	 ruleOrConstraint
{ after(grammarAccess.getOrConstraintRule()); } 
	 EOF 
;

// Rule OrConstraint
ruleOrConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrConstraintAccess().getGroup()); }
		(rule__OrConstraint__Group__0)
		{ after(grammarAccess.getOrConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndConstraint
entryRuleAndConstraint
:
{ before(grammarAccess.getAndConstraintRule()); }
	 ruleAndConstraint
{ after(grammarAccess.getAndConstraintRule()); } 
	 EOF 
;

// Rule AndConstraint
ruleAndConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndConstraintAccess().getGroup()); }
		(rule__AndConstraint__Group__0)
		{ after(grammarAccess.getAndConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNotConstraintExpression
entryRuleNotConstraintExpression
:
{ before(grammarAccess.getNotConstraintExpressionRule()); }
	 ruleNotConstraintExpression
{ after(grammarAccess.getNotConstraintExpressionRule()); } 
	 EOF 
;

// Rule NotConstraintExpression
ruleNotConstraintExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotConstraintExpressionAccess().getAlternatives()); }
		(rule__NotConstraintExpression__Alternatives)
		{ after(grammarAccess.getNotConstraintExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryConstraint
entryRulePrimaryConstraint
:
{ before(grammarAccess.getPrimaryConstraintRule()); }
	 rulePrimaryConstraint
{ after(grammarAccess.getPrimaryConstraintRule()); } 
	 EOF 
;

// Rule PrimaryConstraint
rulePrimaryConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryConstraintAccess().getAlternatives()); }
		(rule__PrimaryConstraint__Alternatives)
		{ after(grammarAccess.getPrimaryConstraintAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ActionEnum
ruleActionEnum
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionEnumAccess().getAlternatives()); }
		(rule__ActionEnum__Alternatives)
		{ after(grammarAccess.getActionEnumAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ActionTypeEnum
ruleActionTypeEnum
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionTypeEnumAccess().getAlternatives()); }
		(rule__ActionTypeEnum__Alternatives)
		{ after(grammarAccess.getActionTypeEnumAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintRule__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintRuleAccess().getStepInRuleParserRuleCall_0()); }
		ruleStepInRule
		{ after(grammarAccess.getConstraintRuleAccess().getStepInRuleParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstraintRuleAccess().getTrueRuleParserRuleCall_1()); }
		ruleTrueRule
		{ after(grammarAccess.getConstraintRuleAccess().getTrueRuleParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureRule__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureRuleAccess().getIsFeatureRuleParserRuleCall_0()); }
		ruleIsFeatureRule
		{ after(grammarAccess.getFeatureRuleAccess().getIsFeatureRuleParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureRuleAccess().getTrueRuleParserRuleCall_1()); }
		ruleTrueRule
		{ after(grammarAccess.getFeatureRuleAccess().getTrueRuleParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotFeatureExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotFeatureExpressionAccess().getPrimaryFeatureParserRuleCall_0()); }
		rulePrimaryFeature
		{ after(grammarAccess.getNotFeatureExpressionAccess().getPrimaryFeatureParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotFeatureExpressionAccess().getGroup_1()); }
		(rule__NotFeatureExpression__Group_1__0)
		{ after(grammarAccess.getNotFeatureExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryFeature__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryFeatureAccess().getFeatureRuleParserRuleCall_0()); }
		ruleFeatureRule
		{ after(grammarAccess.getPrimaryFeatureAccess().getFeatureRuleParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryFeatureAccess().getGroup_1()); }
		(rule__PrimaryFeature__Group_1__0)
		{ after(grammarAccess.getPrimaryFeatureAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotConstraintExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotConstraintExpressionAccess().getPrimaryConstraintParserRuleCall_0()); }
		rulePrimaryConstraint
		{ after(grammarAccess.getNotConstraintExpressionAccess().getPrimaryConstraintParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotConstraintExpressionAccess().getGroup_1()); }
		(rule__NotConstraintExpression__Group_1__0)
		{ after(grammarAccess.getNotConstraintExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryConstraint__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryConstraintAccess().getConstraintRuleParserRuleCall_0()); }
		ruleConstraintRule
		{ after(grammarAccess.getPrimaryConstraintAccess().getConstraintRuleParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryConstraintAccess().getGroup_1()); }
		(rule__PrimaryConstraint__Group_1__0)
		{ after(grammarAccess.getPrimaryConstraintAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionEnum__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionEnumAccess().getAddEnumLiteralDeclaration_0()); }
		('Add')
		{ after(grammarAccess.getActionEnumAccess().getAddEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionEnumAccess().getReconnectEnumLiteralDeclaration_1()); }
		('Reconnect')
		{ after(grammarAccess.getActionEnumAccess().getReconnectEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionEnumAccess().getCreateEnumLiteralDeclaration_2()); }
		('Create')
		{ after(grammarAccess.getActionEnumAccess().getCreateEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getActionEnumAccess().getStartEnumLiteralDeclaration_3()); }
		('Start')
		{ after(grammarAccess.getActionEnumAccess().getStartEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionTypeEnum__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionTypeEnumAccess().getAcyclicEnumLiteralDeclaration_0()); }
		('Acyclic')
		{ after(grammarAccess.getActionTypeEnumAccess().getAcyclicEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionTypeEnumAccess().getCompartmentTypeEnumLiteralDeclaration_1()); }
		('CompartmentType')
		{ after(grammarAccess.getActionTypeEnumAccess().getCompartmentTypeEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionTypeEnumAccess().getCyclicEnumLiteralDeclaration_2()); }
		('Cyclic')
		{ after(grammarAccess.getActionTypeEnumAccess().getCyclicEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getActionTypeEnumAccess().getDataTypeEnumLiteralDeclaration_3()); }
		('DataType')
		{ after(grammarAccess.getActionTypeEnumAccess().getDataTypeEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getActionTypeEnumAccess().getFulfillmentEnumLiteralDeclaration_4()); }
		('Fulfillment')
		{ after(grammarAccess.getActionTypeEnumAccess().getFulfillmentEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getActionTypeEnumAccess().getInheritanceEnumLiteralDeclaration_5()); }
		('Inheritance')
		{ after(grammarAccess.getActionTypeEnumAccess().getInheritanceEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getActionTypeEnumAccess().getGroupEnumLiteralDeclaration_6()); }
		('Group')
		{ after(grammarAccess.getActionTypeEnumAccess().getGroupEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getActionTypeEnumAccess().getReflexiveEnumLiteralDeclaration_7()); }
		('Reflexive')
		{ after(grammarAccess.getActionTypeEnumAccess().getReflexiveEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getActionTypeEnumAccess().getRelationshipEnumLiteralDeclaration_8()); }
		('Relationship')
		{ after(grammarAccess.getActionTypeEnumAccess().getRelationshipEnumLiteralDeclaration_8()); }
	)
	|
	(
		{ before(grammarAccess.getActionTypeEnumAccess().getRelationshipExclusionEnumLiteralDeclaration_9()); }
		('RelationshipExclusion')
		{ after(grammarAccess.getActionTypeEnumAccess().getRelationshipExclusionEnumLiteralDeclaration_9()); }
	)
	|
	(
		{ before(grammarAccess.getActionTypeEnumAccess().getRelationshipImplicationEnumLiteralDeclaration_10()); }
		('RelationshipImplication')
		{ after(grammarAccess.getActionTypeEnumAccess().getRelationshipImplicationEnumLiteralDeclaration_10()); }
	)
	|
	(
		{ before(grammarAccess.getActionTypeEnumAccess().getRoleTypeEnumLiteralDeclaration_11()); }
		('RoleType')
		{ after(grammarAccess.getActionTypeEnumAccess().getRoleTypeEnumLiteralDeclaration_11()); }
	)
	|
	(
		{ before(grammarAccess.getActionTypeEnumAccess().getRoleEquivalenceEnumLiteralDeclaration_12()); }
		('RoleEquivalence')
		{ after(grammarAccess.getActionTypeEnumAccess().getRoleEquivalenceEnumLiteralDeclaration_12()); }
	)
	|
	(
		{ before(grammarAccess.getActionTypeEnumAccess().getRoleGroupEnumLiteralDeclaration_13()); }
		('RoleGroup')
		{ after(grammarAccess.getActionTypeEnumAccess().getRoleGroupEnumLiteralDeclaration_13()); }
	)
	|
	(
		{ before(grammarAccess.getActionTypeEnumAccess().getRoleImplicationEnumLiteralDeclaration_14()); }
		('RoleImplication')
		{ after(grammarAccess.getActionTypeEnumAccess().getRoleImplicationEnumLiteralDeclaration_14()); }
	)
	|
	(
		{ before(grammarAccess.getActionTypeEnumAccess().getRoleProhibitionEnumLiteralDeclaration_15()); }
		('RoleProhibition')
		{ after(grammarAccess.getActionTypeEnumAccess().getRoleProhibitionEnumLiteralDeclaration_15()); }
	)
	|
	(
		{ before(grammarAccess.getActionTypeEnumAccess().getIrreflexiveEnumLiteralDeclaration_16()); }
		('Irreflexive')
		{ after(grammarAccess.getActionTypeEnumAccess().getIrreflexiveEnumLiteralDeclaration_16()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getPoliciesAssignment_0()); }
	(rule__Model__PoliciesAssignment_0)
	{ after(grammarAccess.getModelAccess().getPoliciesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getPoliciesAssignment_1()); }
	(rule__Model__PoliciesAssignment_1)*
	{ after(grammarAccess.getModelAccess().getPoliciesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Policy__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__0__Impl
	rule__Policy__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getOverrideAssignment_0()); }
	(rule__Policy__OverrideAssignment_0)
	{ after(grammarAccess.getPolicyAccess().getOverrideAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__1__Impl
	rule__Policy__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getActionAssignment_1()); }
	(rule__Policy__ActionAssignment_1)
	{ after(grammarAccess.getPolicyAccess().getActionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__2__Impl
	rule__Policy__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getActionTypeAssignment_2()); }
	(rule__Policy__ActionTypeAssignment_2)
	{ after(grammarAccess.getPolicyAccess().getActionTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__3__Impl
	rule__Policy__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getPolicyAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__4__Impl
	rule__Policy__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getFeatureRuleAssignment_4()); }
	(rule__Policy__FeatureRuleAssignment_4)
	{ after(grammarAccess.getPolicyAccess().getFeatureRuleAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__5__Impl
	rule__Policy__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getEqualsSignGreaterThanSignKeyword_5()); }
	'=>'
	{ after(grammarAccess.getPolicyAccess().getEqualsSignGreaterThanSignKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__6__Impl
	rule__Policy__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getConstraintRuleAssignment_6()); }
	(rule__Policy__ConstraintRuleAssignment_6)
	{ after(grammarAccess.getPolicyAccess().getConstraintRuleAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getPolicyAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IsFeatureRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsFeatureRule__Group__0__Impl
	rule__IsFeatureRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IsFeatureRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsFeatureRuleAccess().getRuleAction_0()); }
	()
	{ after(grammarAccess.getIsFeatureRuleAccess().getRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsFeatureRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsFeatureRule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IsFeatureRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsFeatureRuleAccess().getRuleAssignment_1()); }
	(rule__IsFeatureRule__RuleAssignment_1)
	{ after(grammarAccess.getIsFeatureRuleAccess().getRuleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IsFeature__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsFeature__Group__0__Impl
	rule__IsFeature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IsFeature__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsFeatureAccess().getIsFeatureAction_0()); }
	()
	{ after(grammarAccess.getIsFeatureAccess().getIsFeatureAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsFeature__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsFeature__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IsFeature__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsFeatureAccess().getIsFeatureKeyword_1()); }
	'isFeature'
	{ after(grammarAccess.getIsFeatureAccess().getIsFeatureKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StepInRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepInRule__Group__0__Impl
	rule__StepInRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StepInRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepInRuleAccess().getRuleAction_0()); }
	()
	{ after(grammarAccess.getStepInRuleAccess().getRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepInRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepInRule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StepInRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepInRuleAccess().getRuleAssignment_1()); }
	(rule__StepInRule__RuleAssignment_1)
	{ after(grammarAccess.getStepInRuleAccess().getRuleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StepIn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepIn__Group__0__Impl
	rule__StepIn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StepIn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepInAccess().getIsStepInAction_0()); }
	()
	{ after(grammarAccess.getStepInAccess().getIsStepInAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepIn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepIn__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StepIn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepInAccess().getStepInKeyword_1()); }
	'StepIn'
	{ after(grammarAccess.getStepInAccess().getStepInKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TrueRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrueRule__Group__0__Impl
	rule__TrueRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrueRuleAccess().getTrueRuleAction_0()); }
	()
	{ after(grammarAccess.getTrueRuleAccess().getTrueRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrueRule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrueRuleAccess().getTrueKeyword_1()); }
	'true'
	{ after(grammarAccess.getTrueRuleAccess().getTrueKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrFeature__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrFeature__Group__0__Impl
	rule__OrFeature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrFeature__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrFeatureAccess().getAndFeatureParserRuleCall_0()); }
	ruleAndFeature
	{ after(grammarAccess.getOrFeatureAccess().getAndFeatureParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrFeature__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrFeature__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrFeature__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrFeatureAccess().getGroup_1()); }
	(rule__OrFeature__Group_1__0)*
	{ after(grammarAccess.getOrFeatureAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrFeature__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrFeature__Group_1__0__Impl
	rule__OrFeature__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrFeature__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrFeatureAccess().getOrRuleRulesAction_1_0()); }
	()
	{ after(grammarAccess.getOrFeatureAccess().getOrRuleRulesAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrFeature__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrFeature__Group_1__1__Impl
	rule__OrFeature__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrFeature__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrFeatureAccess().getVerticalLineVerticalLineKeyword_1_1()); }
	'||'
	{ after(grammarAccess.getOrFeatureAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrFeature__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrFeature__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrFeature__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrFeatureAccess().getRulesAssignment_1_2()); }
	(rule__OrFeature__RulesAssignment_1_2)
	{ after(grammarAccess.getOrFeatureAccess().getRulesAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndFeature__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndFeature__Group__0__Impl
	rule__AndFeature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndFeature__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndFeatureAccess().getNotFeatureExpressionParserRuleCall_0()); }
	ruleNotFeatureExpression
	{ after(grammarAccess.getAndFeatureAccess().getNotFeatureExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndFeature__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndFeature__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndFeature__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndFeatureAccess().getGroup_1()); }
	(rule__AndFeature__Group_1__0)*
	{ after(grammarAccess.getAndFeatureAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndFeature__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndFeature__Group_1__0__Impl
	rule__AndFeature__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndFeature__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndFeatureAccess().getAndRuleRulesAction_1_0()); }
	()
	{ after(grammarAccess.getAndFeatureAccess().getAndRuleRulesAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndFeature__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndFeature__Group_1__1__Impl
	rule__AndFeature__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndFeature__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndFeatureAccess().getAmpersandAmpersandKeyword_1_1()); }
	'&&'
	{ after(grammarAccess.getAndFeatureAccess().getAmpersandAmpersandKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndFeature__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndFeature__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndFeature__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndFeatureAccess().getRulesAssignment_1_2()); }
	(rule__AndFeature__RulesAssignment_1_2)
	{ after(grammarAccess.getAndFeatureAccess().getRulesAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NotFeatureExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotFeatureExpression__Group_1__0__Impl
	rule__NotFeatureExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotFeatureExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotFeatureExpressionAccess().getExclamationMarkKeyword_1_0()); }
	'!'
	{ after(grammarAccess.getNotFeatureExpressionAccess().getExclamationMarkKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotFeatureExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotFeatureExpression__Group_1__1__Impl
	rule__NotFeatureExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotFeatureExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotFeatureExpressionAccess().getNotRuleAction_1_1()); }
	()
	{ after(grammarAccess.getNotFeatureExpressionAccess().getNotRuleAction_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotFeatureExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotFeatureExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotFeatureExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotFeatureExpressionAccess().getRuleAssignment_1_2()); }
	(rule__NotFeatureExpression__RuleAssignment_1_2)
	{ after(grammarAccess.getNotFeatureExpressionAccess().getRuleAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryFeature__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryFeature__Group_1__0__Impl
	rule__PrimaryFeature__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryFeature__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryFeatureAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getPrimaryFeatureAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryFeature__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryFeature__Group_1__1__Impl
	rule__PrimaryFeature__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryFeature__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryFeatureAccess().getFeatureExpressionParserRuleCall_1_1()); }
	ruleFeatureExpression
	{ after(grammarAccess.getPrimaryFeatureAccess().getFeatureExpressionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryFeature__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryFeature__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryFeature__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryFeatureAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getPrimaryFeatureAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImplicationConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicationConstraint__Group__0__Impl
	rule__ImplicationConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationConstraintAccess().getOrConstraintParserRuleCall_0()); }
	ruleOrConstraint
	{ after(grammarAccess.getImplicationConstraintAccess().getOrConstraintParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicationConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationConstraintAccess().getGroup_1()); }
	(rule__ImplicationConstraint__Group_1__0)?
	{ after(grammarAccess.getImplicationConstraintAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImplicationConstraint__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicationConstraint__Group_1__0__Impl
	rule__ImplicationConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationConstraint__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationConstraintAccess().getImplicationRuleLeftRuleAction_1_0()); }
	()
	{ after(grammarAccess.getImplicationConstraintAccess().getImplicationRuleLeftRuleAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationConstraint__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicationConstraint__Group_1__1__Impl
	rule__ImplicationConstraint__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationConstraint__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationConstraintAccess().getEqualsSignGreaterThanSignKeyword_1_1()); }
	'=>'
	{ after(grammarAccess.getImplicationConstraintAccess().getEqualsSignGreaterThanSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationConstraint__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicationConstraint__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationConstraint__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationConstraintAccess().getRightRuleAssignment_1_2()); }
	(rule__ImplicationConstraint__RightRuleAssignment_1_2)
	{ after(grammarAccess.getImplicationConstraintAccess().getRightRuleAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrConstraint__Group__0__Impl
	rule__OrConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrConstraintAccess().getAndConstraintParserRuleCall_0()); }
	ruleAndConstraint
	{ after(grammarAccess.getOrConstraintAccess().getAndConstraintParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrConstraintAccess().getGroup_1()); }
	(rule__OrConstraint__Group_1__0)*
	{ after(grammarAccess.getOrConstraintAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrConstraint__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrConstraint__Group_1__0__Impl
	rule__OrConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrConstraint__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrConstraintAccess().getOrRuleRulesAction_1_0()); }
	()
	{ after(grammarAccess.getOrConstraintAccess().getOrRuleRulesAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrConstraint__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrConstraint__Group_1__1__Impl
	rule__OrConstraint__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrConstraint__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrConstraintAccess().getVerticalLineVerticalLineKeyword_1_1()); }
	'||'
	{ after(grammarAccess.getOrConstraintAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrConstraint__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrConstraint__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrConstraint__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrConstraintAccess().getRulesAssignment_1_2()); }
	(rule__OrConstraint__RulesAssignment_1_2)
	{ after(grammarAccess.getOrConstraintAccess().getRulesAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndConstraint__Group__0__Impl
	rule__AndConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndConstraintAccess().getNotConstraintExpressionParserRuleCall_0()); }
	ruleNotConstraintExpression
	{ after(grammarAccess.getAndConstraintAccess().getNotConstraintExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndConstraintAccess().getGroup_1()); }
	(rule__AndConstraint__Group_1__0)*
	{ after(grammarAccess.getAndConstraintAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndConstraint__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndConstraint__Group_1__0__Impl
	rule__AndConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndConstraint__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndConstraintAccess().getAndRuleRulesAction_1_0()); }
	()
	{ after(grammarAccess.getAndConstraintAccess().getAndRuleRulesAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndConstraint__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndConstraint__Group_1__1__Impl
	rule__AndConstraint__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndConstraint__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndConstraintAccess().getAmpersandAmpersandKeyword_1_1()); }
	'&&'
	{ after(grammarAccess.getAndConstraintAccess().getAmpersandAmpersandKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndConstraint__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndConstraint__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndConstraint__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndConstraintAccess().getRulesAssignment_1_2()); }
	(rule__AndConstraint__RulesAssignment_1_2)
	{ after(grammarAccess.getAndConstraintAccess().getRulesAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NotConstraintExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotConstraintExpression__Group_1__0__Impl
	rule__NotConstraintExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotConstraintExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotConstraintExpressionAccess().getExclamationMarkKeyword_1_0()); }
	'!'
	{ after(grammarAccess.getNotConstraintExpressionAccess().getExclamationMarkKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotConstraintExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotConstraintExpression__Group_1__1__Impl
	rule__NotConstraintExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotConstraintExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotConstraintExpressionAccess().getNotRuleAction_1_1()); }
	()
	{ after(grammarAccess.getNotConstraintExpressionAccess().getNotRuleAction_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotConstraintExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotConstraintExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotConstraintExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotConstraintExpressionAccess().getRuleAssignment_1_2()); }
	(rule__NotConstraintExpression__RuleAssignment_1_2)
	{ after(grammarAccess.getNotConstraintExpressionAccess().getRuleAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryConstraint__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryConstraint__Group_1__0__Impl
	rule__PrimaryConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryConstraint__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryConstraintAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getPrimaryConstraintAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryConstraint__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryConstraint__Group_1__1__Impl
	rule__PrimaryConstraint__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryConstraint__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryConstraintAccess().getConstraintExpressionParserRuleCall_1_1()); }
	ruleConstraintExpression
	{ after(grammarAccess.getPrimaryConstraintAccess().getConstraintExpressionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryConstraint__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryConstraint__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryConstraint__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryConstraintAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getPrimaryConstraintAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__PoliciesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getPoliciesPolicyParserRuleCall_0_0()); }
		rulePolicy
		{ after(grammarAccess.getModelAccess().getPoliciesPolicyParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__PoliciesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getPoliciesPolicyParserRuleCall_1_0()); }
		rulePolicy
		{ after(grammarAccess.getModelAccess().getPoliciesPolicyParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__OverrideAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolicyAccess().getOverrideOverrideKeyword_0_0()); }
		(
			{ before(grammarAccess.getPolicyAccess().getOverrideOverrideKeyword_0_0()); }
			'override'
			{ after(grammarAccess.getPolicyAccess().getOverrideOverrideKeyword_0_0()); }
		)
		{ after(grammarAccess.getPolicyAccess().getOverrideOverrideKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__ActionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolicyAccess().getActionActionEnumEnumRuleCall_1_0()); }
		ruleActionEnum
		{ after(grammarAccess.getPolicyAccess().getActionActionEnumEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__ActionTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolicyAccess().getActionTypeActionTypeEnumEnumRuleCall_2_0()); }
		ruleActionTypeEnum
		{ after(grammarAccess.getPolicyAccess().getActionTypeActionTypeEnumEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__FeatureRuleAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolicyAccess().getFeatureRuleFeatureExpressionParserRuleCall_4_0()); }
		ruleFeatureExpression
		{ after(grammarAccess.getPolicyAccess().getFeatureRuleFeatureExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__ConstraintRuleAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolicyAccess().getConstraintRuleConstraintExpressionParserRuleCall_6_0()); }
		ruleConstraintExpression
		{ after(grammarAccess.getPolicyAccess().getConstraintRuleConstraintExpressionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsFeatureRule__RuleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIsFeatureRuleAccess().getRuleIsFeatureParserRuleCall_1_0()); }
		ruleIsFeature
		{ after(grammarAccess.getIsFeatureRuleAccess().getRuleIsFeatureParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepInRule__RuleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepInRuleAccess().getRuleStepInParserRuleCall_1_0()); }
		ruleStepIn
		{ after(grammarAccess.getStepInRuleAccess().getRuleStepInParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrFeature__RulesAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrFeatureAccess().getRulesAndFeatureParserRuleCall_1_2_0()); }
		ruleAndFeature
		{ after(grammarAccess.getOrFeatureAccess().getRulesAndFeatureParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndFeature__RulesAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndFeatureAccess().getRulesNotFeatureExpressionParserRuleCall_1_2_0()); }
		ruleNotFeatureExpression
		{ after(grammarAccess.getAndFeatureAccess().getRulesNotFeatureExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotFeatureExpression__RuleAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotFeatureExpressionAccess().getRulePrimaryFeatureParserRuleCall_1_2_0()); }
		rulePrimaryFeature
		{ after(grammarAccess.getNotFeatureExpressionAccess().getRulePrimaryFeatureParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationConstraint__RightRuleAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImplicationConstraintAccess().getRightRuleOrConstraintParserRuleCall_1_2_0()); }
		ruleOrConstraint
		{ after(grammarAccess.getImplicationConstraintAccess().getRightRuleOrConstraintParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrConstraint__RulesAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrConstraintAccess().getRulesAndConstraintParserRuleCall_1_2_0()); }
		ruleAndConstraint
		{ after(grammarAccess.getOrConstraintAccess().getRulesAndConstraintParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndConstraint__RulesAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndConstraintAccess().getRulesNotConstraintExpressionParserRuleCall_1_2_0()); }
		ruleNotConstraintExpression
		{ after(grammarAccess.getAndConstraintAccess().getRulesNotConstraintExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotConstraintExpression__RuleAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotConstraintExpressionAccess().getRulePrimaryConstraintParserRuleCall_1_2_0()); }
		rulePrimaryConstraint
		{ after(grammarAccess.getNotConstraintExpressionAccess().getRulePrimaryConstraintParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
