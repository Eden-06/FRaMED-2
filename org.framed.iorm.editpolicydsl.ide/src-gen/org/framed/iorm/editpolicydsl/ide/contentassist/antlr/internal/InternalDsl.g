/*
 * generated by Xtext 2.13.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.framed.iorm.editpolicydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.framed.iorm.editpolicydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.framed.iorm.editpolicydsl.services.DslGrammarAccess;

}
@parser::members {
	private DslGrammarAccess grammarAccess;

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)?
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePolicy
entryRulePolicy
:
{ before(grammarAccess.getPolicyRule()); }
	 rulePolicy
{ after(grammarAccess.getPolicyRule()); } 
	 EOF 
;

// Rule Policy
rulePolicy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPolicyAccess().getGroup()); }
		(rule__Policy__Group__0)
		{ after(grammarAccess.getPolicyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraintRule
entryRuleConstraintRule
:
{ before(grammarAccess.getConstraintRuleRule()); }
	 ruleConstraintRule
{ after(grammarAccess.getConstraintRuleRule()); } 
	 EOF 
;

// Rule ConstraintRule
ruleConstraintRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintRuleAccess().getAlternatives()); }
		(rule__ConstraintRule__Alternatives)
		{ after(grammarAccess.getConstraintRuleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContainsCompartmentConstrainRule
entryRuleContainsCompartmentConstrainRule
:
{ before(grammarAccess.getContainsCompartmentConstrainRuleRule()); }
	 ruleContainsCompartmentConstrainRule
{ after(grammarAccess.getContainsCompartmentConstrainRuleRule()); } 
	 EOF 
;

// Rule ContainsCompartmentConstrainRule
ruleContainsCompartmentConstrainRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContainsCompartmentConstrainRuleAccess().getGroup()); }
		(rule__ContainsCompartmentConstrainRule__Group__0)
		{ after(grammarAccess.getContainsCompartmentConstrainRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIsTargetTypeConstraintRule
entryRuleIsTargetTypeConstraintRule
:
{ before(grammarAccess.getIsTargetTypeConstraintRuleRule()); }
	 ruleIsTargetTypeConstraintRule
{ after(grammarAccess.getIsTargetTypeConstraintRuleRule()); } 
	 EOF 
;

// Rule IsTargetTypeConstraintRule
ruleIsTargetTypeConstraintRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIsTargetTypeConstraintRuleAccess().getGroup()); }
		(rule__IsTargetTypeConstraintRule__Group__0)
		{ after(grammarAccess.getIsTargetTypeConstraintRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIsParentConstraintRule
entryRuleIsParentConstraintRule
:
{ before(grammarAccess.getIsParentConstraintRuleRule()); }
	 ruleIsParentConstraintRule
{ after(grammarAccess.getIsParentConstraintRuleRule()); } 
	 EOF 
;

// Rule IsParentConstraintRule
ruleIsParentConstraintRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIsParentConstraintRuleAccess().getGroup()); }
		(rule__IsParentConstraintRule__Group__0)
		{ after(grammarAccess.getIsParentConstraintRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIsSourceTypeConstraintRule
entryRuleIsSourceTypeConstraintRule
:
{ before(grammarAccess.getIsSourceTypeConstraintRuleRule()); }
	 ruleIsSourceTypeConstraintRule
{ after(grammarAccess.getIsSourceTypeConstraintRuleRule()); } 
	 EOF 
;

// Rule IsSourceTypeConstraintRule
ruleIsSourceTypeConstraintRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIsSourceTypeConstraintRuleAccess().getGroup()); }
		(rule__IsSourceTypeConstraintRule__Group__0)
		{ after(grammarAccess.getIsSourceTypeConstraintRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIsTargetConstraintRule
entryRuleIsTargetConstraintRule
:
{ before(grammarAccess.getIsTargetConstraintRuleRule()); }
	 ruleIsTargetConstraintRule
{ after(grammarAccess.getIsTargetConstraintRuleRule()); } 
	 EOF 
;

// Rule IsTargetConstraintRule
ruleIsTargetConstraintRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIsTargetConstraintRuleAccess().getGroup()); }
		(rule__IsTargetConstraintRule__Group__0)
		{ after(grammarAccess.getIsTargetConstraintRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInCompartmentConstraintRule
entryRuleInCompartmentConstraintRule
:
{ before(grammarAccess.getInCompartmentConstraintRuleRule()); }
	 ruleInCompartmentConstraintRule
{ after(grammarAccess.getInCompartmentConstraintRuleRule()); } 
	 EOF 
;

// Rule InCompartmentConstraintRule
ruleInCompartmentConstraintRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInCompartmentConstraintRuleAccess().getGroup()); }
		(rule__InCompartmentConstraintRule__Group__0)
		{ after(grammarAccess.getInCompartmentConstraintRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSourceEqualsTargetConstraintRule
entryRuleSourceEqualsTargetConstraintRule
:
{ before(grammarAccess.getSourceEqualsTargetConstraintRuleRule()); }
	 ruleSourceEqualsTargetConstraintRule
{ after(grammarAccess.getSourceEqualsTargetConstraintRuleRule()); } 
	 EOF 
;

// Rule SourceEqualsTargetConstraintRule
ruleSourceEqualsTargetConstraintRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSourceEqualsTargetConstraintRuleAccess().getGroup()); }
		(rule__SourceEqualsTargetConstraintRule__Group__0)
		{ after(grammarAccess.getSourceEqualsTargetConstraintRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSourceEqualsTargetTypeConstraintRule
entryRuleSourceEqualsTargetTypeConstraintRule
:
{ before(grammarAccess.getSourceEqualsTargetTypeConstraintRuleRule()); }
	 ruleSourceEqualsTargetTypeConstraintRule
{ after(grammarAccess.getSourceEqualsTargetTypeConstraintRuleRule()); } 
	 EOF 
;

// Rule SourceEqualsTargetTypeConstraintRule
ruleSourceEqualsTargetTypeConstraintRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSourceEqualsTargetTypeConstraintRuleAccess().getGroup()); }
		(rule__SourceEqualsTargetTypeConstraintRule__Group__0)
		{ after(grammarAccess.getSourceEqualsTargetTypeConstraintRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeatureRule
entryRuleFeatureRule
:
{ before(grammarAccess.getFeatureRuleRule()); }
	 ruleFeatureRule
{ after(grammarAccess.getFeatureRuleRule()); } 
	 EOF 
;

// Rule FeatureRule
ruleFeatureRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureRuleAccess().getAlternatives()); }
		(rule__FeatureRule__Alternatives)
		{ after(grammarAccess.getFeatureRuleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIsFeature
entryRuleIsFeature
:
{ before(grammarAccess.getIsFeatureRule()); }
	 ruleIsFeature
{ after(grammarAccess.getIsFeatureRule()); } 
	 EOF 
;

// Rule IsFeature
ruleIsFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIsFeatureAccess().getGroup()); }
		(rule__IsFeature__Group__0)
		{ after(grammarAccess.getIsFeatureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTrueFeatureRule
entryRuleTrueFeatureRule
:
{ before(grammarAccess.getTrueFeatureRuleRule()); }
	 ruleTrueFeatureRule
{ after(grammarAccess.getTrueFeatureRuleRule()); } 
	 EOF 
;

// Rule TrueFeatureRule
ruleTrueFeatureRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTrueFeatureRuleAccess().getGroup()); }
		(rule__TrueFeatureRule__Group__0)
		{ after(grammarAccess.getTrueFeatureRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTrueConstraintRule
entryRuleTrueConstraintRule
:
{ before(grammarAccess.getTrueConstraintRuleRule()); }
	 ruleTrueConstraintRule
{ after(grammarAccess.getTrueConstraintRuleRule()); } 
	 EOF 
;

// Rule TrueConstraintRule
ruleTrueConstraintRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTrueConstraintRuleAccess().getGroup()); }
		(rule__TrueConstraintRule__Group__0)
		{ after(grammarAccess.getTrueConstraintRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFalseFeatureRule
entryRuleFalseFeatureRule
:
{ before(grammarAccess.getFalseFeatureRuleRule()); }
	 ruleFalseFeatureRule
{ after(grammarAccess.getFalseFeatureRuleRule()); } 
	 EOF 
;

// Rule FalseFeatureRule
ruleFalseFeatureRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFalseFeatureRuleAccess().getGroup()); }
		(rule__FalseFeatureRule__Group__0)
		{ after(grammarAccess.getFalseFeatureRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFalseConstraintRule
entryRuleFalseConstraintRule
:
{ before(grammarAccess.getFalseConstraintRuleRule()); }
	 ruleFalseConstraintRule
{ after(grammarAccess.getFalseConstraintRuleRule()); } 
	 EOF 
;

// Rule FalseConstraintRule
ruleFalseConstraintRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFalseConstraintRuleAccess().getGroup()); }
		(rule__FalseConstraintRule__Group__0)
		{ after(grammarAccess.getFalseConstraintRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeatureExpression
entryRuleFeatureExpression
:
{ before(grammarAccess.getFeatureExpressionRule()); }
	 ruleFeatureExpression
{ after(grammarAccess.getFeatureExpressionRule()); } 
	 EOF 
;

// Rule FeatureExpression
ruleFeatureExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureExpressionAccess().getOrFeatureParserRuleCall()); }
		ruleOrFeature
		{ after(grammarAccess.getFeatureExpressionAccess().getOrFeatureParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrFeature
entryRuleOrFeature
:
{ before(grammarAccess.getOrFeatureRule()); }
	 ruleOrFeature
{ after(grammarAccess.getOrFeatureRule()); } 
	 EOF 
;

// Rule OrFeature
ruleOrFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrFeatureAccess().getGroup()); }
		(rule__OrFeature__Group__0)
		{ after(grammarAccess.getOrFeatureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndFeature
entryRuleAndFeature
:
{ before(grammarAccess.getAndFeatureRule()); }
	 ruleAndFeature
{ after(grammarAccess.getAndFeatureRule()); } 
	 EOF 
;

// Rule AndFeature
ruleAndFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndFeatureAccess().getGroup()); }
		(rule__AndFeature__Group__0)
		{ after(grammarAccess.getAndFeatureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNotFeatureExpression
entryRuleNotFeatureExpression
:
{ before(grammarAccess.getNotFeatureExpressionRule()); }
	 ruleNotFeatureExpression
{ after(grammarAccess.getNotFeatureExpressionRule()); } 
	 EOF 
;

// Rule NotFeatureExpression
ruleNotFeatureExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotFeatureExpressionAccess().getAlternatives()); }
		(rule__NotFeatureExpression__Alternatives)
		{ after(grammarAccess.getNotFeatureExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryFeature
entryRulePrimaryFeature
:
{ before(grammarAccess.getPrimaryFeatureRule()); }
	 rulePrimaryFeature
{ after(grammarAccess.getPrimaryFeatureRule()); } 
	 EOF 
;

// Rule PrimaryFeature
rulePrimaryFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryFeatureAccess().getAlternatives()); }
		(rule__PrimaryFeature__Alternatives)
		{ after(grammarAccess.getPrimaryFeatureAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraintExpression
entryRuleConstraintExpression
:
{ before(grammarAccess.getConstraintExpressionRule()); }
	 ruleConstraintExpression
{ after(grammarAccess.getConstraintExpressionRule()); } 
	 EOF 
;

// Rule ConstraintExpression
ruleConstraintExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintExpressionAccess().getImplicationConstraintParserRuleCall()); }
		ruleImplicationConstraint
		{ after(grammarAccess.getConstraintExpressionAccess().getImplicationConstraintParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImplicationConstraint
entryRuleImplicationConstraint
:
{ before(grammarAccess.getImplicationConstraintRule()); }
	 ruleImplicationConstraint
{ after(grammarAccess.getImplicationConstraintRule()); } 
	 EOF 
;

// Rule ImplicationConstraint
ruleImplicationConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImplicationConstraintAccess().getGroup()); }
		(rule__ImplicationConstraint__Group__0)
		{ after(grammarAccess.getImplicationConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrConstraint
entryRuleOrConstraint
:
{ before(grammarAccess.getOrConstraintRule()); }
	 ruleOrConstraint
{ after(grammarAccess.getOrConstraintRule()); } 
	 EOF 
;

// Rule OrConstraint
ruleOrConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrConstraintAccess().getGroup()); }
		(rule__OrConstraint__Group__0)
		{ after(grammarAccess.getOrConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndConstraint
entryRuleAndConstraint
:
{ before(grammarAccess.getAndConstraintRule()); }
	 ruleAndConstraint
{ after(grammarAccess.getAndConstraintRule()); } 
	 EOF 
;

// Rule AndConstraint
ruleAndConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndConstraintAccess().getGroup()); }
		(rule__AndConstraint__Group__0)
		{ after(grammarAccess.getAndConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNotConstraintExpression
entryRuleNotConstraintExpression
:
{ before(grammarAccess.getNotConstraintExpressionRule()); }
	 ruleNotConstraintExpression
{ after(grammarAccess.getNotConstraintExpressionRule()); } 
	 EOF 
;

// Rule NotConstraintExpression
ruleNotConstraintExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotConstraintExpressionAccess().getAlternatives()); }
		(rule__NotConstraintExpression__Alternatives)
		{ after(grammarAccess.getNotConstraintExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryConstraint
entryRulePrimaryConstraint
:
{ before(grammarAccess.getPrimaryConstraintRule()); }
	 rulePrimaryConstraint
{ after(grammarAccess.getPrimaryConstraintRule()); } 
	 EOF 
;

// Rule PrimaryConstraint
rulePrimaryConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryConstraintAccess().getAlternatives()); }
		(rule__PrimaryConstraint__Alternatives)
		{ after(grammarAccess.getPrimaryConstraintAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ActionEnum
ruleActionEnum
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionEnumAccess().getAlternatives()); }
		(rule__ActionEnum__Alternatives)
		{ after(grammarAccess.getActionEnumAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule FeatureTypeEnum
ruleFeatureTypeEnum
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureTypeEnumAccess().getAlternatives()); }
		(rule__FeatureTypeEnum__Alternatives)
		{ after(grammarAccess.getFeatureTypeEnumAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule FeatureNameEnum
ruleFeatureNameEnum
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getAlternatives()); }
		(rule__FeatureNameEnum__Alternatives)
		{ after(grammarAccess.getFeatureNameEnumAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintRule__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintRuleAccess().getTrueConstraintRuleParserRuleCall_0()); }
		ruleTrueConstraintRule
		{ after(grammarAccess.getConstraintRuleAccess().getTrueConstraintRuleParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstraintRuleAccess().getFalseConstraintRuleParserRuleCall_1()); }
		ruleFalseConstraintRule
		{ after(grammarAccess.getConstraintRuleAccess().getFalseConstraintRuleParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getConstraintRuleAccess().getContainsCompartmentConstrainRuleParserRuleCall_2()); }
		ruleContainsCompartmentConstrainRule
		{ after(grammarAccess.getConstraintRuleAccess().getContainsCompartmentConstrainRuleParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getConstraintRuleAccess().getIsTargetConstraintRuleParserRuleCall_3()); }
		ruleIsTargetConstraintRule
		{ after(grammarAccess.getConstraintRuleAccess().getIsTargetConstraintRuleParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getConstraintRuleAccess().getIsTargetTypeConstraintRuleParserRuleCall_4()); }
		ruleIsTargetTypeConstraintRule
		{ after(grammarAccess.getConstraintRuleAccess().getIsTargetTypeConstraintRuleParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getConstraintRuleAccess().getIsSourceTypeConstraintRuleParserRuleCall_5()); }
		ruleIsSourceTypeConstraintRule
		{ after(grammarAccess.getConstraintRuleAccess().getIsSourceTypeConstraintRuleParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getConstraintRuleAccess().getIsParentConstraintRuleParserRuleCall_6()); }
		ruleIsParentConstraintRule
		{ after(grammarAccess.getConstraintRuleAccess().getIsParentConstraintRuleParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getConstraintRuleAccess().getSourceEqualsTargetConstraintRuleParserRuleCall_7()); }
		ruleSourceEqualsTargetConstraintRule
		{ after(grammarAccess.getConstraintRuleAccess().getSourceEqualsTargetConstraintRuleParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getConstraintRuleAccess().getSourceEqualsTargetTypeConstraintRuleParserRuleCall_8()); }
		ruleSourceEqualsTargetTypeConstraintRule
		{ after(grammarAccess.getConstraintRuleAccess().getSourceEqualsTargetTypeConstraintRuleParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getConstraintRuleAccess().getInCompartmentConstraintRuleParserRuleCall_9()); }
		ruleInCompartmentConstraintRule
		{ after(grammarAccess.getConstraintRuleAccess().getInCompartmentConstraintRuleParserRuleCall_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureRule__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureRuleAccess().getIsFeatureParserRuleCall_0()); }
		ruleIsFeature
		{ after(grammarAccess.getFeatureRuleAccess().getIsFeatureParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureRuleAccess().getTrueFeatureRuleParserRuleCall_1()); }
		ruleTrueFeatureRule
		{ after(grammarAccess.getFeatureRuleAccess().getTrueFeatureRuleParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureRuleAccess().getFalseFeatureRuleParserRuleCall_2()); }
		ruleFalseFeatureRule
		{ after(grammarAccess.getFeatureRuleAccess().getFalseFeatureRuleParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotFeatureExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotFeatureExpressionAccess().getPrimaryFeatureParserRuleCall_0()); }
		rulePrimaryFeature
		{ after(grammarAccess.getNotFeatureExpressionAccess().getPrimaryFeatureParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotFeatureExpressionAccess().getGroup_1()); }
		(rule__NotFeatureExpression__Group_1__0)
		{ after(grammarAccess.getNotFeatureExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryFeature__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryFeatureAccess().getFeatureRuleParserRuleCall_0()); }
		ruleFeatureRule
		{ after(grammarAccess.getPrimaryFeatureAccess().getFeatureRuleParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryFeatureAccess().getGroup_1()); }
		(rule__PrimaryFeature__Group_1__0)
		{ after(grammarAccess.getPrimaryFeatureAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotConstraintExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotConstraintExpressionAccess().getPrimaryConstraintParserRuleCall_0()); }
		rulePrimaryConstraint
		{ after(grammarAccess.getNotConstraintExpressionAccess().getPrimaryConstraintParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotConstraintExpressionAccess().getGroup_1()); }
		(rule__NotConstraintExpression__Group_1__0)
		{ after(grammarAccess.getNotConstraintExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryConstraint__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryConstraintAccess().getConstraintRuleParserRuleCall_0()); }
		ruleConstraintRule
		{ after(grammarAccess.getPrimaryConstraintAccess().getConstraintRuleParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryConstraintAccess().getGroup_1()); }
		(rule__PrimaryConstraint__Group_1__0)
		{ after(grammarAccess.getPrimaryConstraintAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionEnum__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionEnumAccess().getAddEnumLiteralDeclaration_0()); }
		('Add')
		{ after(grammarAccess.getActionEnumAccess().getAddEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionEnumAccess().getReconnectEnumLiteralDeclaration_1()); }
		('Reconnect')
		{ after(grammarAccess.getActionEnumAccess().getReconnectEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionEnumAccess().getCreateEnumLiteralDeclaration_2()); }
		('Create')
		{ after(grammarAccess.getActionEnumAccess().getCreateEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getActionEnumAccess().getStartEnumLiteralDeclaration_3()); }
		('Start')
		{ after(grammarAccess.getActionEnumAccess().getStartEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getActionEnumAccess().getExecuteEnumLiteralDeclaration_4()); }
		('Execute')
		{ after(grammarAccess.getActionEnumAccess().getExecuteEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getActionEnumAccess().getDirect_EditEnumLiteralDeclaration_5()); }
		('Direct_Edit')
		{ after(grammarAccess.getActionEnumAccess().getDirect_EditEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getActionEnumAccess().getAdd_PropertyEnumLiteralDeclaration_6()); }
		('Add_Property')
		{ after(grammarAccess.getActionEnumAccess().getAdd_PropertyEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getActionEnumAccess().getCreate_AttributeEnumLiteralDeclaration_7()); }
		('Create_Attribute')
		{ after(grammarAccess.getActionEnumAccess().getCreate_AttributeEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getActionEnumAccess().getCreate_OperationEnumLiteralDeclaration_8()); }
		('Create_Operation')
		{ after(grammarAccess.getActionEnumAccess().getCreate_OperationEnumLiteralDeclaration_8()); }
	)
	|
	(
		{ before(grammarAccess.getActionEnumAccess().getCreate_PropertyEnumLiteralDeclaration_9()); }
		('Create_Property')
		{ after(grammarAccess.getActionEnumAccess().getCreate_PropertyEnumLiteralDeclaration_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureTypeEnum__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureTypeEnumAccess().getAcyclicEnumLiteralDeclaration_0()); }
		('Acyclic')
		{ after(grammarAccess.getFeatureTypeEnumAccess().getAcyclicEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureTypeEnumAccess().getCompartmentTypeEnumLiteralDeclaration_1()); }
		('CompartmentType')
		{ after(grammarAccess.getFeatureTypeEnumAccess().getCompartmentTypeEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureTypeEnumAccess().getCyclicEnumLiteralDeclaration_2()); }
		('Cyclic')
		{ after(grammarAccess.getFeatureTypeEnumAccess().getCyclicEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureTypeEnumAccess().getDataTypeEnumLiteralDeclaration_3()); }
		('DataType')
		{ after(grammarAccess.getFeatureTypeEnumAccess().getDataTypeEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureTypeEnumAccess().getFulfillmentEnumLiteralDeclaration_4()); }
		('Fulfillment')
		{ after(grammarAccess.getFeatureTypeEnumAccess().getFulfillmentEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureTypeEnumAccess().getInheritanceEnumLiteralDeclaration_5()); }
		('Inheritance')
		{ after(grammarAccess.getFeatureTypeEnumAccess().getInheritanceEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureTypeEnumAccess().getGroupEnumLiteralDeclaration_6()); }
		('Group')
		{ after(grammarAccess.getFeatureTypeEnumAccess().getGroupEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureTypeEnumAccess().getReflexiveEnumLiteralDeclaration_7()); }
		('Reflexive')
		{ after(grammarAccess.getFeatureTypeEnumAccess().getReflexiveEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureTypeEnumAccess().getRelationshipEnumLiteralDeclaration_8()); }
		('Relationship')
		{ after(grammarAccess.getFeatureTypeEnumAccess().getRelationshipEnumLiteralDeclaration_8()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureTypeEnumAccess().getRelationshipExclusionEnumLiteralDeclaration_9()); }
		('RelationshipExclusion')
		{ after(grammarAccess.getFeatureTypeEnumAccess().getRelationshipExclusionEnumLiteralDeclaration_9()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureTypeEnumAccess().getRelationshipImplicationEnumLiteralDeclaration_10()); }
		('RelationshipImplication')
		{ after(grammarAccess.getFeatureTypeEnumAccess().getRelationshipImplicationEnumLiteralDeclaration_10()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureTypeEnumAccess().getRoleTypeEnumLiteralDeclaration_11()); }
		('RoleType')
		{ after(grammarAccess.getFeatureTypeEnumAccess().getRoleTypeEnumLiteralDeclaration_11()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureTypeEnumAccess().getRoleEquivalenceEnumLiteralDeclaration_12()); }
		('RoleEquivalence')
		{ after(grammarAccess.getFeatureTypeEnumAccess().getRoleEquivalenceEnumLiteralDeclaration_12()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureTypeEnumAccess().getRoleGroupEnumLiteralDeclaration_13()); }
		('RoleGroup')
		{ after(grammarAccess.getFeatureTypeEnumAccess().getRoleGroupEnumLiteralDeclaration_13()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureTypeEnumAccess().getRoleImplicationEnumLiteralDeclaration_14()); }
		('RoleImplication')
		{ after(grammarAccess.getFeatureTypeEnumAccess().getRoleImplicationEnumLiteralDeclaration_14()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureTypeEnumAccess().getRoleProhibitionEnumLiteralDeclaration_15()); }
		('RoleProhibition')
		{ after(grammarAccess.getFeatureTypeEnumAccess().getRoleProhibitionEnumLiteralDeclaration_15()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureTypeEnumAccess().getIrreflexiveEnumLiteralDeclaration_16()); }
		('Irreflexive')
		{ after(grammarAccess.getFeatureTypeEnumAccess().getIrreflexiveEnumLiteralDeclaration_16()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureTypeEnumAccess().getNaturalTypeEnumLiteralDeclaration_17()); }
		('NaturalType')
		{ after(grammarAccess.getFeatureTypeEnumAccess().getNaturalTypeEnumLiteralDeclaration_17()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureNameEnum__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getCompartment_BehaviorEnumLiteralDeclaration_0()); }
		('Compartment_Behavior')
		{ after(grammarAccess.getFeatureNameEnumAccess().getCompartment_BehaviorEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getCompartment_InheritanceEnumLiteralDeclaration_1()); }
		('Compartment_Inheritance')
		{ after(grammarAccess.getFeatureNameEnumAccess().getCompartment_InheritanceEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getCompartment_PropertiesEnumLiteralDeclaration_2()); }
		('Compartment_Properties')
		{ after(grammarAccess.getFeatureNameEnumAccess().getCompartment_PropertiesEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getCompartment_StructureEnumLiteralDeclaration_3()); }
		('Compartment_Structure')
		{ after(grammarAccess.getFeatureNameEnumAccess().getCompartment_StructureEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getCompartment_TypesEnumLiteralDeclaration_4()); }
		('Compartment_Types')
		{ after(grammarAccess.getFeatureNameEnumAccess().getCompartment_TypesEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getContains_CompartmentsEnumLiteralDeclaration_5()); }
		('Contains_Compartments')
		{ after(grammarAccess.getFeatureNameEnumAccess().getContains_CompartmentsEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getCompartmentsEnumLiteralDeclaration_6()); }
		('Compartments')
		{ after(grammarAccess.getFeatureNameEnumAccess().getCompartmentsEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getData_Type_InheritanceEnumLiteralDeclaration_7()); }
		('Data_Type_Inheritance')
		{ after(grammarAccess.getFeatureNameEnumAccess().getData_Type_InheritanceEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getData_TypesEnumLiteralDeclaration_8()); }
		('Data_Types')
		{ after(grammarAccess.getFeatureNameEnumAccess().getData_TypesEnumLiteralDeclaration_8()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getDatesEnumLiteralDeclaration_9()); }
		('Dates')
		{ after(grammarAccess.getFeatureNameEnumAccess().getDatesEnumLiteralDeclaration_9()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getDependentEnumLiteralDeclaration_10()); }
		('Dependent')
		{ after(grammarAccess.getFeatureNameEnumAccess().getDependentEnumLiteralDeclaration_10()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getGroup_ConstraintsEnumLiteralDeclaration_11()); }
		('Group_Constraints')
		{ after(grammarAccess.getFeatureNameEnumAccess().getGroup_ConstraintsEnumLiteralDeclaration_11()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getInter_Relationship_ConstraintsEnumLiteralDeclaration_12()); }
		('Inter_Relationship_Constraints')
		{ after(grammarAccess.getFeatureNameEnumAccess().getInter_Relationship_ConstraintsEnumLiteralDeclaration_12()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getIntra_Relationship_ConstraintsEnumLiteralDeclaration_13()); }
		('Intra_Relationship_Constraints')
		{ after(grammarAccess.getFeatureNameEnumAccess().getIntra_Relationship_ConstraintsEnumLiteralDeclaration_13()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getNaturalsEnumLiteralDeclaration_14()); }
		('Naturals')
		{ after(grammarAccess.getFeatureNameEnumAccess().getNaturalsEnumLiteralDeclaration_14()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getOccurrence_ConstraintsEnumLiteralDeclaration_15()); }
		('Occurrence_Constraints')
		{ after(grammarAccess.getFeatureNameEnumAccess().getOccurrence_ConstraintsEnumLiteralDeclaration_15()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getOn_CompartmentsEnumLiteralDeclaration_16()); }
		('On_Compartments')
		{ after(grammarAccess.getFeatureNameEnumAccess().getOn_CompartmentsEnumLiteralDeclaration_16()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getOn_RelationshipsEnumLiteralDeclaration_17()); }
		('On_Relationships')
		{ after(grammarAccess.getFeatureNameEnumAccess().getOn_RelationshipsEnumLiteralDeclaration_17()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getParthood_ConstraintsEnumLiteralDeclaration_18()); }
		('Parthood_Constraints')
		{ after(grammarAccess.getFeatureNameEnumAccess().getParthood_ConstraintsEnumLiteralDeclaration_18()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getParticipantsEnumLiteralDeclaration_19()); }
		('Participants')
		{ after(grammarAccess.getFeatureNameEnumAccess().getParticipantsEnumLiteralDeclaration_19()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getPlayableEnumLiteralDeclaration_20()); }
		('Playable')
		{ after(grammarAccess.getFeatureNameEnumAccess().getPlayableEnumLiteralDeclaration_20()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getPlayable_by_Defining_CompartmentEnumLiteralDeclaration_21()); }
		('Playable_by_Defining_Compartment')
		{ after(grammarAccess.getFeatureNameEnumAccess().getPlayable_by_Defining_CompartmentEnumLiteralDeclaration_21()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getPlayersEnumLiteralDeclaration_22()); }
		('Players')
		{ after(grammarAccess.getFeatureNameEnumAccess().getPlayersEnumLiteralDeclaration_22()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getRelationship_CardinalityEnumLiteralDeclaration_23()); }
		('Relationship_Cardinality')
		{ after(grammarAccess.getFeatureNameEnumAccess().getRelationship_CardinalityEnumLiteralDeclaration_23()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getRelationship_ConstraintsEnumLiteralDeclaration_24()); }
		('Relationship_Constraints')
		{ after(grammarAccess.getFeatureNameEnumAccess().getRelationship_ConstraintsEnumLiteralDeclaration_24()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getRelationshipsEnumLiteralDeclaration_25()); }
		('Relationships')
		{ after(grammarAccess.getFeatureNameEnumAccess().getRelationshipsEnumLiteralDeclaration_25()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getRML_Feature_ModelEnumLiteralDeclaration_26()); }
		('RML_Feature_Model')
		{ after(grammarAccess.getFeatureNameEnumAccess().getRML_Feature_ModelEnumLiteralDeclaration_26()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getRole_BehaviorEnumLiteralDeclaration_27()); }
		('Role_Behavior')
		{ after(grammarAccess.getFeatureNameEnumAccess().getRole_BehaviorEnumLiteralDeclaration_27()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getRole_ConstraintsEnumLiteralDeclaration_28()); }
		('Role_Constraints')
		{ after(grammarAccess.getFeatureNameEnumAccess().getRole_ConstraintsEnumLiteralDeclaration_28()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getRole_EquivalenceEnumLiteralDeclaration_29()); }
		('Role_Equivalence')
		{ after(grammarAccess.getFeatureNameEnumAccess().getRole_EquivalenceEnumLiteralDeclaration_29()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getRole_ImplicationEnumLiteralDeclaration_30()); }
		('Role_Implication')
		{ after(grammarAccess.getFeatureNameEnumAccess().getRole_ImplicationEnumLiteralDeclaration_30()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getRole_InheritanceEnumLiteralDeclaration_31()); }
		('Role_Inheritance')
		{ after(grammarAccess.getFeatureNameEnumAccess().getRole_InheritanceEnumLiteralDeclaration_31()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getRole_ProhibitionEnumLiteralDeclaration_32()); }
		('Role_Prohibition')
		{ after(grammarAccess.getFeatureNameEnumAccess().getRole_ProhibitionEnumLiteralDeclaration_32()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getRole_PropertiesEnumLiteralDeclaration_33()); }
		('Role_Properties')
		{ after(grammarAccess.getFeatureNameEnumAccess().getRole_PropertiesEnumLiteralDeclaration_33()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getRole_StructureEnumLiteralDeclaration_34()); }
		('Role_Structure')
		{ after(grammarAccess.getFeatureNameEnumAccess().getRole_StructureEnumLiteralDeclaration_34()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getRole_TypesEnumLiteralDeclaration_35()); }
		('Role_Types')
		{ after(grammarAccess.getFeatureNameEnumAccess().getRole_TypesEnumLiteralDeclaration_35()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureNameEnumAccess().getRolesEnumLiteralDeclaration_36()); }
		('Roles')
		{ after(grammarAccess.getFeatureNameEnumAccess().getRolesEnumLiteralDeclaration_36()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getPoliciesAssignment_0()); }
	(rule__Model__PoliciesAssignment_0)
	{ after(grammarAccess.getModelAccess().getPoliciesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getPoliciesAssignment_1()); }
	(rule__Model__PoliciesAssignment_1)*
	{ after(grammarAccess.getModelAccess().getPoliciesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Policy__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__0__Impl
	rule__Policy__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getOverrideAssignment_0()); }
	(rule__Policy__OverrideAssignment_0)?
	{ after(grammarAccess.getPolicyAccess().getOverrideAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__1__Impl
	rule__Policy__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getActionAssignment_1()); }
	(rule__Policy__ActionAssignment_1)
	{ after(grammarAccess.getPolicyAccess().getActionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__2__Impl
	rule__Policy__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getActionTypeAssignment_2()); }
	(rule__Policy__ActionTypeAssignment_2)
	{ after(grammarAccess.getPolicyAccess().getActionTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__3__Impl
	rule__Policy__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getLeftParenthesisKeyword_3()); }
	'('
	{ after(grammarAccess.getPolicyAccess().getLeftParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__4__Impl
	rule__Policy__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getFeatureRuleAssignment_4()); }
	(rule__Policy__FeatureRuleAssignment_4)
	{ after(grammarAccess.getPolicyAccess().getFeatureRuleAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__5__Impl
	rule__Policy__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getPolicyAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__6__Impl
	rule__Policy__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getWhenKeyword_6()); }
	'when'
	{ after(grammarAccess.getPolicyAccess().getWhenKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__7__Impl
	rule__Policy__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getConstraintRuleAssignment_7()); }
	(rule__Policy__ConstraintRuleAssignment_7)
	{ after(grammarAccess.getPolicyAccess().getConstraintRuleAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getSemicolonKeyword_8()); }
	';'
	{ after(grammarAccess.getPolicyAccess().getSemicolonKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ContainsCompartmentConstrainRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContainsCompartmentConstrainRule__Group__0__Impl
	rule__ContainsCompartmentConstrainRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainsCompartmentConstrainRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainsCompartmentConstrainRuleAccess().getContainsCompartmentAction_0()); }
	()
	{ after(grammarAccess.getContainsCompartmentConstrainRuleAccess().getContainsCompartmentAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainsCompartmentConstrainRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContainsCompartmentConstrainRule__Group__1__Impl
	rule__ContainsCompartmentConstrainRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainsCompartmentConstrainRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainsCompartmentConstrainRuleAccess().getContainsCompartmentKeyword_1()); }
	'ContainsCompartment'
	{ after(grammarAccess.getContainsCompartmentConstrainRuleAccess().getContainsCompartmentKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainsCompartmentConstrainRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContainsCompartmentConstrainRule__Group__2__Impl
	rule__ContainsCompartmentConstrainRule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainsCompartmentConstrainRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainsCompartmentConstrainRuleAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getContainsCompartmentConstrainRuleAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainsCompartmentConstrainRule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContainsCompartmentConstrainRule__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainsCompartmentConstrainRule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainsCompartmentConstrainRuleAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getContainsCompartmentConstrainRuleAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IsTargetTypeConstraintRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsTargetTypeConstraintRule__Group__0__Impl
	rule__IsTargetTypeConstraintRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IsTargetTypeConstraintRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsTargetTypeConstraintRuleAccess().getIsTargetTypeAction_0()); }
	()
	{ after(grammarAccess.getIsTargetTypeConstraintRuleAccess().getIsTargetTypeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsTargetTypeConstraintRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsTargetTypeConstraintRule__Group__1__Impl
	rule__IsTargetTypeConstraintRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IsTargetTypeConstraintRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsTargetTypeConstraintRuleAccess().getIsTargetTypeKeyword_1()); }
	'IsTargetType'
	{ after(grammarAccess.getIsTargetTypeConstraintRuleAccess().getIsTargetTypeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsTargetTypeConstraintRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsTargetTypeConstraintRule__Group__2__Impl
	rule__IsTargetTypeConstraintRule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IsTargetTypeConstraintRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsTargetTypeConstraintRuleAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getIsTargetTypeConstraintRuleAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsTargetTypeConstraintRule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsTargetTypeConstraintRule__Group__3__Impl
	rule__IsTargetTypeConstraintRule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IsTargetTypeConstraintRule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsTargetTypeConstraintRuleAccess().getTypeAssignment_3()); }
	(rule__IsTargetTypeConstraintRule__TypeAssignment_3)
	{ after(grammarAccess.getIsTargetTypeConstraintRuleAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsTargetTypeConstraintRule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsTargetTypeConstraintRule__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IsTargetTypeConstraintRule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsTargetTypeConstraintRuleAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getIsTargetTypeConstraintRuleAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IsParentConstraintRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsParentConstraintRule__Group__0__Impl
	rule__IsParentConstraintRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IsParentConstraintRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsParentConstraintRuleAccess().getIsParentAction_0()); }
	()
	{ after(grammarAccess.getIsParentConstraintRuleAccess().getIsParentAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsParentConstraintRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsParentConstraintRule__Group__1__Impl
	rule__IsParentConstraintRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IsParentConstraintRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsParentConstraintRuleAccess().getIsParentKeyword_1()); }
	'IsParent'
	{ after(grammarAccess.getIsParentConstraintRuleAccess().getIsParentKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsParentConstraintRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsParentConstraintRule__Group__2__Impl
	rule__IsParentConstraintRule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IsParentConstraintRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsParentConstraintRuleAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getIsParentConstraintRuleAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsParentConstraintRule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsParentConstraintRule__Group__3__Impl
	rule__IsParentConstraintRule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IsParentConstraintRule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsParentConstraintRuleAccess().getTypeAssignment_3()); }
	(rule__IsParentConstraintRule__TypeAssignment_3)
	{ after(grammarAccess.getIsParentConstraintRuleAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsParentConstraintRule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsParentConstraintRule__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IsParentConstraintRule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsParentConstraintRuleAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getIsParentConstraintRuleAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IsSourceTypeConstraintRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsSourceTypeConstraintRule__Group__0__Impl
	rule__IsSourceTypeConstraintRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IsSourceTypeConstraintRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsSourceTypeConstraintRuleAccess().getIsSourceTypeAction_0()); }
	()
	{ after(grammarAccess.getIsSourceTypeConstraintRuleAccess().getIsSourceTypeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsSourceTypeConstraintRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsSourceTypeConstraintRule__Group__1__Impl
	rule__IsSourceTypeConstraintRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IsSourceTypeConstraintRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsSourceTypeConstraintRuleAccess().getIsSourceTypeKeyword_1()); }
	'IsSourceType'
	{ after(grammarAccess.getIsSourceTypeConstraintRuleAccess().getIsSourceTypeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsSourceTypeConstraintRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsSourceTypeConstraintRule__Group__2__Impl
	rule__IsSourceTypeConstraintRule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IsSourceTypeConstraintRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsSourceTypeConstraintRuleAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getIsSourceTypeConstraintRuleAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsSourceTypeConstraintRule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsSourceTypeConstraintRule__Group__3__Impl
	rule__IsSourceTypeConstraintRule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IsSourceTypeConstraintRule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsSourceTypeConstraintRuleAccess().getTypeAssignment_3()); }
	(rule__IsSourceTypeConstraintRule__TypeAssignment_3)
	{ after(grammarAccess.getIsSourceTypeConstraintRuleAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsSourceTypeConstraintRule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsSourceTypeConstraintRule__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IsSourceTypeConstraintRule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsSourceTypeConstraintRuleAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getIsSourceTypeConstraintRuleAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IsTargetConstraintRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsTargetConstraintRule__Group__0__Impl
	rule__IsTargetConstraintRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IsTargetConstraintRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsTargetConstraintRuleAccess().getIsTargetAction_0()); }
	()
	{ after(grammarAccess.getIsTargetConstraintRuleAccess().getIsTargetAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsTargetConstraintRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsTargetConstraintRule__Group__1__Impl
	rule__IsTargetConstraintRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IsTargetConstraintRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsTargetConstraintRuleAccess().getIsTargetKeyword_1()); }
	'IsTarget'
	{ after(grammarAccess.getIsTargetConstraintRuleAccess().getIsTargetKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsTargetConstraintRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsTargetConstraintRule__Group__2__Impl
	rule__IsTargetConstraintRule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IsTargetConstraintRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsTargetConstraintRuleAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getIsTargetConstraintRuleAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsTargetConstraintRule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsTargetConstraintRule__Group__3__Impl
	rule__IsTargetConstraintRule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IsTargetConstraintRule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsTargetConstraintRuleAccess().getTypeAssignment_3()); }
	(rule__IsTargetConstraintRule__TypeAssignment_3)
	{ after(grammarAccess.getIsTargetConstraintRuleAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsTargetConstraintRule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsTargetConstraintRule__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IsTargetConstraintRule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsTargetConstraintRuleAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getIsTargetConstraintRuleAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InCompartmentConstraintRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InCompartmentConstraintRule__Group__0__Impl
	rule__InCompartmentConstraintRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InCompartmentConstraintRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInCompartmentConstraintRuleAccess().getInCompartmentAction_0()); }
	()
	{ after(grammarAccess.getInCompartmentConstraintRuleAccess().getInCompartmentAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InCompartmentConstraintRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InCompartmentConstraintRule__Group__1__Impl
	rule__InCompartmentConstraintRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InCompartmentConstraintRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInCompartmentConstraintRuleAccess().getInCompartmentKeyword_1()); }
	'InCompartment'
	{ after(grammarAccess.getInCompartmentConstraintRuleAccess().getInCompartmentKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InCompartmentConstraintRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InCompartmentConstraintRule__Group__2__Impl
	rule__InCompartmentConstraintRule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InCompartmentConstraintRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInCompartmentConstraintRuleAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getInCompartmentConstraintRuleAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InCompartmentConstraintRule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InCompartmentConstraintRule__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InCompartmentConstraintRule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInCompartmentConstraintRuleAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getInCompartmentConstraintRuleAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SourceEqualsTargetConstraintRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceEqualsTargetConstraintRule__Group__0__Impl
	rule__SourceEqualsTargetConstraintRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceEqualsTargetConstraintRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceEqualsTargetConstraintRuleAccess().getSourceEqualsTargetAction_0()); }
	()
	{ after(grammarAccess.getSourceEqualsTargetConstraintRuleAccess().getSourceEqualsTargetAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceEqualsTargetConstraintRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceEqualsTargetConstraintRule__Group__1__Impl
	rule__SourceEqualsTargetConstraintRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceEqualsTargetConstraintRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceEqualsTargetConstraintRuleAccess().getSourceEqualsTargetKeyword_1()); }
	'SourceEqualsTarget'
	{ after(grammarAccess.getSourceEqualsTargetConstraintRuleAccess().getSourceEqualsTargetKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceEqualsTargetConstraintRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceEqualsTargetConstraintRule__Group__2__Impl
	rule__SourceEqualsTargetConstraintRule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceEqualsTargetConstraintRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceEqualsTargetConstraintRuleAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getSourceEqualsTargetConstraintRuleAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceEqualsTargetConstraintRule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceEqualsTargetConstraintRule__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceEqualsTargetConstraintRule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceEqualsTargetConstraintRuleAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getSourceEqualsTargetConstraintRuleAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SourceEqualsTargetTypeConstraintRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceEqualsTargetTypeConstraintRule__Group__0__Impl
	rule__SourceEqualsTargetTypeConstraintRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceEqualsTargetTypeConstraintRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceEqualsTargetTypeConstraintRuleAccess().getSourceEqualsTargetTypeAction_0()); }
	()
	{ after(grammarAccess.getSourceEqualsTargetTypeConstraintRuleAccess().getSourceEqualsTargetTypeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceEqualsTargetTypeConstraintRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceEqualsTargetTypeConstraintRule__Group__1__Impl
	rule__SourceEqualsTargetTypeConstraintRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceEqualsTargetTypeConstraintRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceEqualsTargetTypeConstraintRuleAccess().getSourceEqualsTargetTypeKeyword_1()); }
	'SourceEqualsTargetType'
	{ after(grammarAccess.getSourceEqualsTargetTypeConstraintRuleAccess().getSourceEqualsTargetTypeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceEqualsTargetTypeConstraintRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceEqualsTargetTypeConstraintRule__Group__2__Impl
	rule__SourceEqualsTargetTypeConstraintRule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceEqualsTargetTypeConstraintRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceEqualsTargetTypeConstraintRuleAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getSourceEqualsTargetTypeConstraintRuleAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceEqualsTargetTypeConstraintRule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceEqualsTargetTypeConstraintRule__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceEqualsTargetTypeConstraintRule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceEqualsTargetTypeConstraintRuleAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getSourceEqualsTargetTypeConstraintRuleAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IsFeature__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsFeature__Group__0__Impl
	rule__IsFeature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IsFeature__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsFeatureAccess().getIsFeatureAction_0()); }
	()
	{ after(grammarAccess.getIsFeatureAccess().getIsFeatureAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsFeature__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsFeature__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IsFeature__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsFeatureAccess().getFeatureNameAssignment_1()); }
	(rule__IsFeature__FeatureNameAssignment_1)
	{ after(grammarAccess.getIsFeatureAccess().getFeatureNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TrueFeatureRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrueFeatureRule__Group__0__Impl
	rule__TrueFeatureRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueFeatureRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrueFeatureRuleAccess().getTrueFeatureRuleAction_0()); }
	()
	{ after(grammarAccess.getTrueFeatureRuleAccess().getTrueFeatureRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueFeatureRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrueFeatureRule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueFeatureRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrueFeatureRuleAccess().getTrueKeyword_1()); }
	'true'
	{ after(grammarAccess.getTrueFeatureRuleAccess().getTrueKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TrueConstraintRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrueConstraintRule__Group__0__Impl
	rule__TrueConstraintRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueConstraintRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrueConstraintRuleAccess().getTrueConstraintRuleAction_0()); }
	()
	{ after(grammarAccess.getTrueConstraintRuleAccess().getTrueConstraintRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueConstraintRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrueConstraintRule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueConstraintRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrueConstraintRuleAccess().getTrueKeyword_1()); }
	'true'
	{ after(grammarAccess.getTrueConstraintRuleAccess().getTrueKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FalseFeatureRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FalseFeatureRule__Group__0__Impl
	rule__FalseFeatureRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FalseFeatureRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFalseFeatureRuleAccess().getFalseFeatureRuleAction_0()); }
	()
	{ after(grammarAccess.getFalseFeatureRuleAccess().getFalseFeatureRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FalseFeatureRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FalseFeatureRule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FalseFeatureRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFalseFeatureRuleAccess().getFalseKeyword_1()); }
	'false'
	{ after(grammarAccess.getFalseFeatureRuleAccess().getFalseKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FalseConstraintRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FalseConstraintRule__Group__0__Impl
	rule__FalseConstraintRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FalseConstraintRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFalseConstraintRuleAccess().getFalseConstraintRuleAction_0()); }
	()
	{ after(grammarAccess.getFalseConstraintRuleAccess().getFalseConstraintRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FalseConstraintRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FalseConstraintRule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FalseConstraintRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFalseConstraintRuleAccess().getFalseKeyword_1()); }
	'false'
	{ after(grammarAccess.getFalseConstraintRuleAccess().getFalseKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrFeature__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrFeature__Group__0__Impl
	rule__OrFeature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrFeature__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrFeatureAccess().getAndFeatureParserRuleCall_0()); }
	ruleAndFeature
	{ after(grammarAccess.getOrFeatureAccess().getAndFeatureParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrFeature__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrFeature__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrFeature__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrFeatureAccess().getGroup_1()); }
	(rule__OrFeature__Group_1__0)*
	{ after(grammarAccess.getOrFeatureAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrFeature__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrFeature__Group_1__0__Impl
	rule__OrFeature__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrFeature__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrFeatureAccess().getOrFeatureRuleRulesAction_1_0()); }
	()
	{ after(grammarAccess.getOrFeatureAccess().getOrFeatureRuleRulesAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrFeature__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrFeature__Group_1__1__Impl
	rule__OrFeature__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrFeature__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrFeatureAccess().getOrKeyword_1_1()); }
	'or'
	{ after(grammarAccess.getOrFeatureAccess().getOrKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrFeature__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrFeature__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrFeature__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrFeatureAccess().getRulesAssignment_1_2()); }
	(rule__OrFeature__RulesAssignment_1_2)
	{ after(grammarAccess.getOrFeatureAccess().getRulesAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndFeature__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndFeature__Group__0__Impl
	rule__AndFeature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndFeature__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndFeatureAccess().getNotFeatureExpressionParserRuleCall_0()); }
	ruleNotFeatureExpression
	{ after(grammarAccess.getAndFeatureAccess().getNotFeatureExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndFeature__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndFeature__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndFeature__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndFeatureAccess().getGroup_1()); }
	(rule__AndFeature__Group_1__0)*
	{ after(grammarAccess.getAndFeatureAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndFeature__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndFeature__Group_1__0__Impl
	rule__AndFeature__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndFeature__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndFeatureAccess().getAndFeatureRuleRulesAction_1_0()); }
	()
	{ after(grammarAccess.getAndFeatureAccess().getAndFeatureRuleRulesAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndFeature__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndFeature__Group_1__1__Impl
	rule__AndFeature__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndFeature__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndFeatureAccess().getAndKeyword_1_1()); }
	'and'
	{ after(grammarAccess.getAndFeatureAccess().getAndKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndFeature__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndFeature__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndFeature__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndFeatureAccess().getRulesAssignment_1_2()); }
	(rule__AndFeature__RulesAssignment_1_2)
	{ after(grammarAccess.getAndFeatureAccess().getRulesAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NotFeatureExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotFeatureExpression__Group_1__0__Impl
	rule__NotFeatureExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotFeatureExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotFeatureExpressionAccess().getExclamationMarkKeyword_1_0()); }
	'!'
	{ after(grammarAccess.getNotFeatureExpressionAccess().getExclamationMarkKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotFeatureExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotFeatureExpression__Group_1__1__Impl
	rule__NotFeatureExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotFeatureExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotFeatureExpressionAccess().getNotFeatureRuleAction_1_1()); }
	()
	{ after(grammarAccess.getNotFeatureExpressionAccess().getNotFeatureRuleAction_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotFeatureExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotFeatureExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotFeatureExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotFeatureExpressionAccess().getRuleAssignment_1_2()); }
	(rule__NotFeatureExpression__RuleAssignment_1_2)
	{ after(grammarAccess.getNotFeatureExpressionAccess().getRuleAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryFeature__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryFeature__Group_1__0__Impl
	rule__PrimaryFeature__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryFeature__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryFeatureAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getPrimaryFeatureAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryFeature__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryFeature__Group_1__1__Impl
	rule__PrimaryFeature__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryFeature__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryFeatureAccess().getFeatureExpressionParserRuleCall_1_1()); }
	ruleFeatureExpression
	{ after(grammarAccess.getPrimaryFeatureAccess().getFeatureExpressionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryFeature__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryFeature__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryFeature__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryFeatureAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getPrimaryFeatureAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImplicationConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicationConstraint__Group__0__Impl
	rule__ImplicationConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationConstraintAccess().getOrConstraintParserRuleCall_0()); }
	ruleOrConstraint
	{ after(grammarAccess.getImplicationConstraintAccess().getOrConstraintParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicationConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationConstraintAccess().getGroup_1()); }
	(rule__ImplicationConstraint__Group_1__0)?
	{ after(grammarAccess.getImplicationConstraintAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImplicationConstraint__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicationConstraint__Group_1__0__Impl
	rule__ImplicationConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationConstraint__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationConstraintAccess().getImplicationConstraintRuleLeftRuleAction_1_0()); }
	()
	{ after(grammarAccess.getImplicationConstraintAccess().getImplicationConstraintRuleLeftRuleAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationConstraint__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicationConstraint__Group_1__1__Impl
	rule__ImplicationConstraint__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationConstraint__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationConstraintAccess().getEqualsSignGreaterThanSignKeyword_1_1()); }
	'=>'
	{ after(grammarAccess.getImplicationConstraintAccess().getEqualsSignGreaterThanSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationConstraint__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicationConstraint__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationConstraint__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationConstraintAccess().getRightRuleAssignment_1_2()); }
	(rule__ImplicationConstraint__RightRuleAssignment_1_2)
	{ after(grammarAccess.getImplicationConstraintAccess().getRightRuleAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrConstraint__Group__0__Impl
	rule__OrConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrConstraintAccess().getAndConstraintParserRuleCall_0()); }
	ruleAndConstraint
	{ after(grammarAccess.getOrConstraintAccess().getAndConstraintParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrConstraintAccess().getGroup_1()); }
	(rule__OrConstraint__Group_1__0)*
	{ after(grammarAccess.getOrConstraintAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrConstraint__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrConstraint__Group_1__0__Impl
	rule__OrConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrConstraint__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrConstraintAccess().getOrConstraintRuleRulesAction_1_0()); }
	()
	{ after(grammarAccess.getOrConstraintAccess().getOrConstraintRuleRulesAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrConstraint__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrConstraint__Group_1__1__Impl
	rule__OrConstraint__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrConstraint__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrConstraintAccess().getOrKeyword_1_1()); }
	'or'
	{ after(grammarAccess.getOrConstraintAccess().getOrKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrConstraint__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrConstraint__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrConstraint__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrConstraintAccess().getRulesAssignment_1_2()); }
	(rule__OrConstraint__RulesAssignment_1_2)
	{ after(grammarAccess.getOrConstraintAccess().getRulesAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndConstraint__Group__0__Impl
	rule__AndConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndConstraintAccess().getNotConstraintExpressionParserRuleCall_0()); }
	ruleNotConstraintExpression
	{ after(grammarAccess.getAndConstraintAccess().getNotConstraintExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndConstraintAccess().getGroup_1()); }
	(rule__AndConstraint__Group_1__0)*
	{ after(grammarAccess.getAndConstraintAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndConstraint__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndConstraint__Group_1__0__Impl
	rule__AndConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndConstraint__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndConstraintAccess().getAndConstraintRuleRulesAction_1_0()); }
	()
	{ after(grammarAccess.getAndConstraintAccess().getAndConstraintRuleRulesAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndConstraint__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndConstraint__Group_1__1__Impl
	rule__AndConstraint__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndConstraint__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndConstraintAccess().getAndKeyword_1_1()); }
	'and'
	{ after(grammarAccess.getAndConstraintAccess().getAndKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndConstraint__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndConstraint__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndConstraint__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndConstraintAccess().getRulesAssignment_1_2()); }
	(rule__AndConstraint__RulesAssignment_1_2)
	{ after(grammarAccess.getAndConstraintAccess().getRulesAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NotConstraintExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotConstraintExpression__Group_1__0__Impl
	rule__NotConstraintExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotConstraintExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotConstraintExpressionAccess().getExclamationMarkKeyword_1_0()); }
	'!'
	{ after(grammarAccess.getNotConstraintExpressionAccess().getExclamationMarkKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotConstraintExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotConstraintExpression__Group_1__1__Impl
	rule__NotConstraintExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotConstraintExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotConstraintExpressionAccess().getNotConstraintRuleAction_1_1()); }
	()
	{ after(grammarAccess.getNotConstraintExpressionAccess().getNotConstraintRuleAction_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotConstraintExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotConstraintExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotConstraintExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotConstraintExpressionAccess().getRuleAssignment_1_2()); }
	(rule__NotConstraintExpression__RuleAssignment_1_2)
	{ after(grammarAccess.getNotConstraintExpressionAccess().getRuleAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryConstraint__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryConstraint__Group_1__0__Impl
	rule__PrimaryConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryConstraint__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryConstraintAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getPrimaryConstraintAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryConstraint__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryConstraint__Group_1__1__Impl
	rule__PrimaryConstraint__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryConstraint__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryConstraintAccess().getConstraintExpressionParserRuleCall_1_1()); }
	ruleConstraintExpression
	{ after(grammarAccess.getPrimaryConstraintAccess().getConstraintExpressionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryConstraint__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryConstraint__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryConstraint__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryConstraintAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getPrimaryConstraintAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__PoliciesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getPoliciesPolicyParserRuleCall_0_0()); }
		rulePolicy
		{ after(grammarAccess.getModelAccess().getPoliciesPolicyParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__PoliciesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getPoliciesPolicyParserRuleCall_1_0()); }
		rulePolicy
		{ after(grammarAccess.getModelAccess().getPoliciesPolicyParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__OverrideAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolicyAccess().getOverrideOverrideKeyword_0_0()); }
		(
			{ before(grammarAccess.getPolicyAccess().getOverrideOverrideKeyword_0_0()); }
			'override'
			{ after(grammarAccess.getPolicyAccess().getOverrideOverrideKeyword_0_0()); }
		)
		{ after(grammarAccess.getPolicyAccess().getOverrideOverrideKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__ActionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolicyAccess().getActionActionEnumEnumRuleCall_1_0()); }
		ruleActionEnum
		{ after(grammarAccess.getPolicyAccess().getActionActionEnumEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__ActionTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolicyAccess().getActionTypeFeatureTypeEnumEnumRuleCall_2_0()); }
		ruleFeatureTypeEnum
		{ after(grammarAccess.getPolicyAccess().getActionTypeFeatureTypeEnumEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__FeatureRuleAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolicyAccess().getFeatureRuleFeatureExpressionParserRuleCall_4_0()); }
		ruleFeatureExpression
		{ after(grammarAccess.getPolicyAccess().getFeatureRuleFeatureExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__ConstraintRuleAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolicyAccess().getConstraintRuleConstraintExpressionParserRuleCall_7_0()); }
		ruleConstraintExpression
		{ after(grammarAccess.getPolicyAccess().getConstraintRuleConstraintExpressionParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsTargetTypeConstraintRule__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIsTargetTypeConstraintRuleAccess().getTypeFeatureTypeEnumEnumRuleCall_3_0()); }
		ruleFeatureTypeEnum
		{ after(grammarAccess.getIsTargetTypeConstraintRuleAccess().getTypeFeatureTypeEnumEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsParentConstraintRule__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIsParentConstraintRuleAccess().getTypeFeatureTypeEnumEnumRuleCall_3_0()); }
		ruleFeatureTypeEnum
		{ after(grammarAccess.getIsParentConstraintRuleAccess().getTypeFeatureTypeEnumEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsSourceTypeConstraintRule__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIsSourceTypeConstraintRuleAccess().getTypeFeatureTypeEnumEnumRuleCall_3_0()); }
		ruleFeatureTypeEnum
		{ after(grammarAccess.getIsSourceTypeConstraintRuleAccess().getTypeFeatureTypeEnumEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsTargetConstraintRule__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIsTargetConstraintRuleAccess().getTypeFeatureTypeEnumEnumRuleCall_3_0()); }
		ruleFeatureTypeEnum
		{ after(grammarAccess.getIsTargetConstraintRuleAccess().getTypeFeatureTypeEnumEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsFeature__FeatureNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIsFeatureAccess().getFeatureNameFeatureNameEnumEnumRuleCall_1_0()); }
		ruleFeatureNameEnum
		{ after(grammarAccess.getIsFeatureAccess().getFeatureNameFeatureNameEnumEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrFeature__RulesAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrFeatureAccess().getRulesAndFeatureParserRuleCall_1_2_0()); }
		ruleAndFeature
		{ after(grammarAccess.getOrFeatureAccess().getRulesAndFeatureParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndFeature__RulesAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndFeatureAccess().getRulesNotFeatureExpressionParserRuleCall_1_2_0()); }
		ruleNotFeatureExpression
		{ after(grammarAccess.getAndFeatureAccess().getRulesNotFeatureExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotFeatureExpression__RuleAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotFeatureExpressionAccess().getRulePrimaryFeatureParserRuleCall_1_2_0()); }
		rulePrimaryFeature
		{ after(grammarAccess.getNotFeatureExpressionAccess().getRulePrimaryFeatureParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationConstraint__RightRuleAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImplicationConstraintAccess().getRightRuleOrConstraintParserRuleCall_1_2_0()); }
		ruleOrConstraint
		{ after(grammarAccess.getImplicationConstraintAccess().getRightRuleOrConstraintParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrConstraint__RulesAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrConstraintAccess().getRulesAndConstraintParserRuleCall_1_2_0()); }
		ruleAndConstraint
		{ after(grammarAccess.getOrConstraintAccess().getRulesAndConstraintParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndConstraint__RulesAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndConstraintAccess().getRulesNotConstraintExpressionParserRuleCall_1_2_0()); }
		ruleNotConstraintExpression
		{ after(grammarAccess.getAndConstraintAccess().getRulesNotConstraintExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotConstraintExpression__RuleAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotConstraintExpressionAccess().getRulePrimaryConstraintParserRuleCall_1_2_0()); }
		rulePrimaryConstraint
		{ after(grammarAccess.getNotConstraintExpressionAccess().getRulePrimaryConstraintParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
