//Do not delete the next line!
/*{generate imports here}*/
 import "NaturalTypeInheritance.etl";

 import "NaturalType.etl";

 import "Group.etl";

 import "AttributeAndOperation.etl";

 import "RoleTypeAttsAndOps.etl";

 import "RoleInheritance.etl";

 import "RoleTypeOccurenceConstraints.etl";

 import "RoleType.etl";

 import "Inheritance.etl";

 import "FulfillmentTopLevel.etl";

 import "Fulfillment.etl";

 import "FulfillmentInCompartmentType.etl";

 import "FulfillmentInGroup.etl";

 import "RoleGroup.etl";

 import "DataType.etl";

 import "DataTypeInheritance.etl";

 import "CompartmentInheritance.etl";

 import "CompartmentTypeAttsAndOps.etl";

 import "CompartmentTypeContainCompartments.etl";

 import "CompartmentType.etl";

 import "IntraRelationshipConstraints.etl";

 import "InterRelationshipConstraints.etl";

 import "RelationshipCardinalities.etl";

 import "Relationship.etl";

 import "RoleConstraints.etl";
 
import "../AllFeatures.eol";

//prints the object its called on
operation Any println() : Any { 
	("Printing : " + self)->println();
}

//sets up the map of all features, initiated with false here
operation Any setFeatureMap() : Map {
	for(s : String in getAllFeatures()) self.put(s, false);
}

//superior rule to start the transformation with
rule ORM2CROM
	transform s : source!Model
	to t : target!Model {
	guard : s.parent == null
	
	/*sets up the map of all feature and sets the value to true for features in the given
	  feature configuration*/
	var featureMap : Map;
	featureMap.setFeatureMap();
	for(f in s.framedConfiguration.features) {
		featureMap.put(f.getName().asString(), true);
	}
	/*it uses extended properties to enable access to feature map and the main model to the
	  sub rules*/
	for(e in s.elements) { 
		e.~features = featureMap;
		e.~mainModel = t;
	}
	//call sub rules for the iorm shapes 
	for(shape : source!Shape in s.elements) {
		var x = shape.equivalent();
		if(not ((x == null) or x.instanceOf(target!AbstractRole))) {
			t.elements.add(x);
	}	}
	//call sub rules for the iorm relations
	for (relation : source!Relation in s.elements) {
		var r = relation.equivalent();
		if (not (r == null)) {
			if(not(r.isKindOf(Sequence))) {
				t.relations.add(r);
			} 
			if(r.isKindOf(Sequence(target!Fulfillment))) {
				for(ob in r) t.relations.add(ob);
	}	}	}	
}

