/**
 */
package Editpolicymodel.provider;

import Editpolicymodel.util.EditpolicymodelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EditpolicymodelItemProviderAdapterFactory extends EditpolicymodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EditpolicymodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.Policy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolicyItemProvider policyItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.Policy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPolicyAdapter() {
		if (policyItemProvider == null) {
			policyItemProvider = new PolicyItemProvider(this);
		}

		return policyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.ContainsCompartment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainsCompartmentItemProvider containsCompartmentItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.ContainsCompartment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainsCompartmentAdapter() {
		if (containsCompartmentItemProvider == null) {
			containsCompartmentItemProvider = new ContainsCompartmentItemProvider(this);
		}

		return containsCompartmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.IsTarget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IsTargetItemProvider isTargetItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.IsTarget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIsTargetAdapter() {
		if (isTargetItemProvider == null) {
			isTargetItemProvider = new IsTargetItemProvider(this);
		}

		return isTargetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.IsParent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IsParentItemProvider isParentItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.IsParent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIsParentAdapter() {
		if (isParentItemProvider == null) {
			isParentItemProvider = new IsParentItemProvider(this);
		}

		return isParentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.IsFeature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IsFeatureItemProvider isFeatureItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.IsFeature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIsFeatureAdapter() {
		if (isFeatureItemProvider == null) {
			isFeatureItemProvider = new IsFeatureItemProvider(this);
		}

		return isFeatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.IsTargetType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IsTargetTypeItemProvider isTargetTypeItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.IsTargetType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIsTargetTypeAdapter() {
		if (isTargetTypeItemProvider == null) {
			isTargetTypeItemProvider = new IsTargetTypeItemProvider(this);
		}

		return isTargetTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.NotConstraintRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotConstraintRuleItemProvider notConstraintRuleItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.NotConstraintRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotConstraintRuleAdapter() {
		if (notConstraintRuleItemProvider == null) {
			notConstraintRuleItemProvider = new NotConstraintRuleItemProvider(this);
		}

		return notConstraintRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.AndConstraintRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AndConstraintRuleItemProvider andConstraintRuleItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.AndConstraintRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAndConstraintRuleAdapter() {
		if (andConstraintRuleItemProvider == null) {
			andConstraintRuleItemProvider = new AndConstraintRuleItemProvider(this);
		}

		return andConstraintRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.TrueConstraintRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrueConstraintRuleItemProvider trueConstraintRuleItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.TrueConstraintRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrueConstraintRuleAdapter() {
		if (trueConstraintRuleItemProvider == null) {
			trueConstraintRuleItemProvider = new TrueConstraintRuleItemProvider(this);
		}

		return trueConstraintRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.FalseConstraintRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FalseConstraintRuleItemProvider falseConstraintRuleItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.FalseConstraintRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFalseConstraintRuleAdapter() {
		if (falseConstraintRuleItemProvider == null) {
			falseConstraintRuleItemProvider = new FalseConstraintRuleItemProvider(this);
		}

		return falseConstraintRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.OrConstraintRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrConstraintRuleItemProvider orConstraintRuleItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.OrConstraintRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrConstraintRuleAdapter() {
		if (orConstraintRuleItemProvider == null) {
			orConstraintRuleItemProvider = new OrConstraintRuleItemProvider(this);
		}

		return orConstraintRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.ImplicationConstraintRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImplicationConstraintRuleItemProvider implicationConstraintRuleItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.ImplicationConstraintRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImplicationConstraintRuleAdapter() {
		if (implicationConstraintRuleItemProvider == null) {
			implicationConstraintRuleItemProvider = new ImplicationConstraintRuleItemProvider(this);
		}

		return implicationConstraintRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.IsSourceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IsSourceTypeItemProvider isSourceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.IsSourceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIsSourceTypeAdapter() {
		if (isSourceTypeItemProvider == null) {
			isSourceTypeItemProvider = new IsSourceTypeItemProvider(this);
		}

		return isSourceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.LogicalConstraintRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalConstraintRuleItemProvider logicalConstraintRuleItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.LogicalConstraintRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalConstraintRuleAdapter() {
		if (logicalConstraintRuleItemProvider == null) {
			logicalConstraintRuleItemProvider = new LogicalConstraintRuleItemProvider(this);
		}

		return logicalConstraintRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.TrueFeatureRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrueFeatureRuleItemProvider trueFeatureRuleItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.TrueFeatureRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrueFeatureRuleAdapter() {
		if (trueFeatureRuleItemProvider == null) {
			trueFeatureRuleItemProvider = new TrueFeatureRuleItemProvider(this);
		}

		return trueFeatureRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.NotFeatureRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotFeatureRuleItemProvider notFeatureRuleItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.NotFeatureRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotFeatureRuleAdapter() {
		if (notFeatureRuleItemProvider == null) {
			notFeatureRuleItemProvider = new NotFeatureRuleItemProvider(this);
		}

		return notFeatureRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.FalseFeatureRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FalseFeatureRuleItemProvider falseFeatureRuleItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.FalseFeatureRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFalseFeatureRuleAdapter() {
		if (falseFeatureRuleItemProvider == null) {
			falseFeatureRuleItemProvider = new FalseFeatureRuleItemProvider(this);
		}

		return falseFeatureRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.LogicalFeatureRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalFeatureRuleItemProvider logicalFeatureRuleItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.LogicalFeatureRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalFeatureRuleAdapter() {
		if (logicalFeatureRuleItemProvider == null) {
			logicalFeatureRuleItemProvider = new LogicalFeatureRuleItemProvider(this);
		}

		return logicalFeatureRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.ImplicationFeatureRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImplicationFeatureRuleItemProvider implicationFeatureRuleItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.ImplicationFeatureRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImplicationFeatureRuleAdapter() {
		if (implicationFeatureRuleItemProvider == null) {
			implicationFeatureRuleItemProvider = new ImplicationFeatureRuleItemProvider(this);
		}

		return implicationFeatureRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.OrFeatureRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrFeatureRuleItemProvider orFeatureRuleItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.OrFeatureRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrFeatureRuleAdapter() {
		if (orFeatureRuleItemProvider == null) {
			orFeatureRuleItemProvider = new OrFeatureRuleItemProvider(this);
		}

		return orFeatureRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.AndFeatureRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AndFeatureRuleItemProvider andFeatureRuleItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.AndFeatureRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAndFeatureRuleAdapter() {
		if (andFeatureRuleItemProvider == null) {
			andFeatureRuleItemProvider = new AndFeatureRuleItemProvider(this);
		}

		return andFeatureRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.SourceEqualsTarget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SourceEqualsTargetItemProvider sourceEqualsTargetItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.SourceEqualsTarget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSourceEqualsTargetAdapter() {
		if (sourceEqualsTargetItemProvider == null) {
			sourceEqualsTargetItemProvider = new SourceEqualsTargetItemProvider(this);
		}

		return sourceEqualsTargetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.SourceEqualsTargetType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SourceEqualsTargetTypeItemProvider sourceEqualsTargetTypeItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.SourceEqualsTargetType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSourceEqualsTargetTypeAdapter() {
		if (sourceEqualsTargetTypeItemProvider == null) {
			sourceEqualsTargetTypeItemProvider = new SourceEqualsTargetTypeItemProvider(this);
		}

		return sourceEqualsTargetTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Editpolicymodel.InCompartment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InCompartmentItemProvider inCompartmentItemProvider;

	/**
	 * This creates an adapter for a {@link Editpolicymodel.InCompartment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInCompartmentAdapter() {
		if (inCompartmentItemProvider == null) {
			inCompartmentItemProvider = new InCompartmentItemProvider(this);
		}

		return inCompartmentItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (policyItemProvider != null) policyItemProvider.dispose();
		if (containsCompartmentItemProvider != null) containsCompartmentItemProvider.dispose();
		if (isTargetItemProvider != null) isTargetItemProvider.dispose();
		if (isParentItemProvider != null) isParentItemProvider.dispose();
		if (isFeatureItemProvider != null) isFeatureItemProvider.dispose();
		if (isTargetTypeItemProvider != null) isTargetTypeItemProvider.dispose();
		if (notConstraintRuleItemProvider != null) notConstraintRuleItemProvider.dispose();
		if (andConstraintRuleItemProvider != null) andConstraintRuleItemProvider.dispose();
		if (trueConstraintRuleItemProvider != null) trueConstraintRuleItemProvider.dispose();
		if (falseConstraintRuleItemProvider != null) falseConstraintRuleItemProvider.dispose();
		if (orConstraintRuleItemProvider != null) orConstraintRuleItemProvider.dispose();
		if (implicationConstraintRuleItemProvider != null) implicationConstraintRuleItemProvider.dispose();
		if (isSourceTypeItemProvider != null) isSourceTypeItemProvider.dispose();
		if (logicalConstraintRuleItemProvider != null) logicalConstraintRuleItemProvider.dispose();
		if (trueFeatureRuleItemProvider != null) trueFeatureRuleItemProvider.dispose();
		if (notFeatureRuleItemProvider != null) notFeatureRuleItemProvider.dispose();
		if (falseFeatureRuleItemProvider != null) falseFeatureRuleItemProvider.dispose();
		if (logicalFeatureRuleItemProvider != null) logicalFeatureRuleItemProvider.dispose();
		if (implicationFeatureRuleItemProvider != null) implicationFeatureRuleItemProvider.dispose();
		if (orFeatureRuleItemProvider != null) orFeatureRuleItemProvider.dispose();
		if (andFeatureRuleItemProvider != null) andFeatureRuleItemProvider.dispose();
		if (sourceEqualsTargetItemProvider != null) sourceEqualsTargetItemProvider.dispose();
		if (sourceEqualsTargetTypeItemProvider != null) sourceEqualsTargetTypeItemProvider.dispose();
		if (inCompartmentItemProvider != null) inCompartmentItemProvider.dispose();
	}

}
